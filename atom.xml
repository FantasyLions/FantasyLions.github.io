<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Serio&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fantasylion.github.io/"/>
  <updated>2020-07-29T06:14:51.000Z</updated>
  <id>https://fantasylion.github.io/</id>
  
  <author>
    <name>Serio</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sentinel 熔断等指标如何统计以及如何判断熔断点</title>
    <link href="https://fantasylion.github.io/java/2020-07-29-Sentinel-Source-code-analysis/"/>
    <id>https://fantasylion.github.io/java/2020-07-29-Sentinel-Source-code-analysis/</id>
    <published>2020-07-29T06:14:51.000Z</published>
    <updated>2020-07-29T06:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sentinel-熔断等指标如何统计以及如何判断熔断点"><a class="markdownIt-Anchor" href="#sentinel-熔断等指标如何统计以及如何判断熔断点"></a> Sentinel 熔断等指标如何统计以及如何判断熔断点</h1><h4 id="sentinel-使用"><a class="markdownIt-Anchor" href="#sentinel-使用"></a> Sentinel 使用</h4><p>在分析源码之前首先看下，Sentinel 如何使用</p><h5 id="建立规则"><a class="markdownIt-Anchor" href="#建立规则"></a> 建立规则</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立规则</span></span><br><span class="line">List&lt;DegradeRule&gt; rule = <span class="keyword">new</span> ArrayList&lt;DegradeRule&gt;();</span><br><span class="line">DegradeRule ruleRatio = <span class="keyword">new</span> DegradeRule();</span><br><span class="line">ruleRatio.setResource(<span class="string">"sourceTest"</span>);</span><br><span class="line">ruleRatio.setCount(<span class="number">100</span>);</span><br><span class="line">ruleRatio.setGrade(<span class="number">1</span>);</span><br><span class="line">ruleRatio.setTimeWindow(<span class="number">60</span>)</span><br><span class="line">ruleRatio.setMinRequestAmount(<span class="number">2</span>);</span><br><span class="line">ruleRatio.setRtSlowRequestAmount(<span class="number">2</span>);</span><br><span class="line">rules.add(ruleRatio);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载规则</span></span><br><span class="line">DegradeRuleManager.loadRules(rules);</span><br></pre></td></tr></table></figure><h5 id="使用规则"><a class="markdownIt-Anchor" href="#使用规则"></a> 使用规则</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Entry entry = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    entry = SphU.entry( <span class="string">"sourceTest"</span> )</span><br><span class="line">    print(<span class="string">"Do something."</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>( DegradeException degradeException ) &#123;</span><br><span class="line">    logger.error(<span class="string">"触发熔断,熔断器：&#123;&#125;"</span>, JSON.toJSONString(degradeException.rule) )</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> DegradeException(<span class="string">"触发熔断"</span>+degradeException.rule.resource, degradeException)</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    Tracer.trace(e)</span><br><span class="line">    logger.error(<span class="string">"有异常"</span>)</span><br><span class="line">    <span class="keyword">throw</span> e</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 退出 Entry 并统计</span></span><br><span class="line">        entry.exit()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中大致可以看出，sentinel 通过 <code>SphU.entry</code> 验证规则并开始统计，如果其中某条规则不通过将会抛出对应的异常， 通过 <code>entry.exit()</code> 结束统计。</p><p>下面进入到源码中分析具体的实现原理<br /><img src="https://note.youdao.com/yws/api/personal/file/1AD25B53EDBD4EDD81103BD302296467?method=download&amp;shareKey=8ea22ed909a257924ca94194bfc76aab" alt="CtSph类图" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Sph sph = <span class="keyword">new</span> CtSph();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Entry <span class="title">entry</span><span class="params">(String name)</span> <span class="keyword">throws</span> BlockException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Env.sph.entry(name, EntryType.OUT, <span class="number">1</span>, OBJECTS0); <span class="comment">// @1 -&gt; @2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @2</span></span><br><span class="line"><span class="comment">// Env.sph.entry</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Entry <span class="title">entry</span><span class="params">(String name, EntryType type, <span class="keyword">int</span> count, Object... args)</span> <span class="keyword">throws</span> BlockException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个资源名包装类</span></span><br><span class="line">    StringResourceWrapper resource = <span class="keyword">new</span> StringResourceWrapper(name, type);</span><br><span class="line">    <span class="keyword">return</span> entry(resource, count, args); <span class="comment">// @3 -&gt; @4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @4</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Entry <span class="title">entry</span><span class="params">(ResourceWrapper resourceWrapper, <span class="keyword">int</span> count, Object... args)</span> <span class="keyword">throws</span> BlockException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> entryWithPriority(resourceWrapper, count, <span class="keyword">false</span>, args); <span class="comment">// @5 -&gt; @6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @6</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Entry <span class="title">entryWithPriority</span><span class="params">(ResourceWrapper resourceWrapper, <span class="keyword">int</span> count, <span class="keyword">boolean</span> prioritized, Object... args)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> BlockException </span>&#123;</span><br><span class="line">    <span class="comment">// 从线程变量中获取当前上下文</span></span><br><span class="line">    Context context = ContextUtil.getContext();</span><br><span class="line">    <span class="comment">// ... 省略部分代码</span></span><br><span class="line">    <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Using default context.</span></span><br><span class="line">        <span class="comment">// 如果没有上下文，创建一个默认的上下文和一个EntranceNode</span></span><br><span class="line">        context = InternalContextUtil.internalEnter(Constants.CONTEXT_DEFAULT_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果全局开关关闭，不需要检查规则和统计</span></span><br><span class="line">    <span class="comment">// Global switch is close, no rule checking will do.</span></span><br><span class="line">    <span class="keyword">if</span> (!Constants.ON) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CtEntry(resourceWrapper, <span class="keyword">null</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到所有的处理责任链【责任链模式】</span></span><br><span class="line">    ProcessorSlot&lt;Object&gt; chain = lookProcessChain(resourceWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 说明责任链数量已经超出最大允许数量，后面将没有规则会被检查</span></span><br><span class="line"><span class="comment">     * Means amount of resources (slot chain) exceeds &#123;@link Constants.MAX_SLOT_CHAIN_SIZE&#125;,</span></span><br><span class="line"><span class="comment">     * so no rule checking will be done.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (chain == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CtEntry(resourceWrapper, <span class="keyword">null</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建当前条目</span></span><br><span class="line">    Entry e = <span class="keyword">new</span> CtEntry(resourceWrapper, chain, context);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 触发责任链（从第一个开始执行到最后一个责任链节点，主要有创建节点、统计指标、验证各种规则...）</span></span><br><span class="line">        chain.entry(context, resourceWrapper, <span class="keyword">null</span>, count, prioritized, args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BlockException e1) &#123;</span><br><span class="line">        <span class="comment">// 被阻塞后退出当前条目，并统计指标</span></span><br><span class="line">        e.exit(count, args);</span><br><span class="line">        <span class="keyword">throw</span> e1;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e1) &#123;</span><br><span class="line">        <span class="comment">// This should not happen, unless there are errors existing in Sentinel internal.</span></span><br><span class="line">        RecordLog.info(<span class="string">"Sentinel unexpected exception"</span>, e1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="责任链模式"><a class="markdownIt-Anchor" href="#责任链模式"></a> 责任链模式</h3><p>以上 <code>entryWithPriority</code> 源码中可以 sentinel 用到了责任链模式，通过责任链创建节点、统计指标、验证规则…。<br />接下看下 Sentinel 是如何实现责任链模式又是如何统计指标和验证规则的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在没有调用链，并且调用链没有超过最大允许数时，初始化一个</span></span><br><span class="line">chain = SlotChainProvider.newSlotChain();</span><br><span class="line">Map&lt;ResourceWrapper, ProcessorSlotChain&gt; newMap = <span class="keyword">new</span> HashMap&lt;ResourceWrapper, ProcessorSlotChain&gt;(</span><br><span class="line">    chainMap.size() + <span class="number">1</span>);</span><br><span class="line">newMap.putAll(chainMap);</span><br><span class="line">newMap.put(resourceWrapper, chain);</span><br><span class="line">chainMap = newMap;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取到一个默认的slot调用链构建器，并开始构建</span></span><br><span class="line">slotChainBuilder = SpiLoader.loadFirstInstanceOrDefault(SlotChainBuilder<span class="class">.<span class="keyword">class</span>, <span class="title">DefaultSlotChainBuilder</span>.<span class="title">class</span>)</span>;</span><br><span class="line">slotChainBuilder.build();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ProcessorSlotChain <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建调用链对象</span></span><br><span class="line">    ProcessorSlotChain chain = <span class="keyword">new</span> DefaultProcessorSlotChain();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Note: the instances of ProcessorSlot should be different, since they are not stateless.</span></span><br><span class="line">    <span class="comment">// 通过SPI发现并加载并排序所有的调用链节点</span></span><br><span class="line">    List&lt;ProcessorSlot&gt; sortedSlotList = SpiLoader.loadPrototypeInstanceListSorted(ProcessorSlot<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">for</span> (ProcessorSlot slot : sortedSlotList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(slot <span class="keyword">instanceof</span> AbstractLinkedProcessorSlot)) &#123;</span><br><span class="line">            RecordLog.warn(<span class="string">"The ProcessorSlot("</span> + slot.getClass().getCanonicalName() + <span class="string">") is not an instance of AbstractLinkedProcessorSlot, can't be added into ProcessorSlotChain"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 按顺序依次将调用链节点添加都最后一个，并关联下一个节点</span></span><br><span class="line">        chain.addLast((AbstractLinkedProcessorSlot&lt;?&gt;) slot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> chain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">loadPrototypeInstanceListSorted</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// @1</span></span><br><span class="line">        <span class="comment">// Not use SERVICE_LOADER_MAP, to make sure the instances loaded are different.</span></span><br><span class="line">        ServiceLoader&lt;T&gt; serviceLoader = ServiceLoaderUtil.getServiceLoader(clazz);</span><br><span class="line"></span><br><span class="line">        List&lt;SpiOrderWrapper&lt;T&gt;&gt; orderWrappers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> ( T spi : serviceLoader ) &#123;</span><br><span class="line">            <span class="comment">// @2</span></span><br><span class="line">            <span class="keyword">int</span> order = SpiOrderResolver.resolveOrder(spi);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// @3</span></span><br><span class="line">            <span class="comment">// Since SPI is lazy initialized in ServiceLoader, we use online sort algorithm here.</span></span><br><span class="line">            SpiOrderResolver.insertSorted(orderWrappers, spi, order);</span><br><span class="line">            RecordLog.debug(<span class="string">"[SpiLoader] Found &#123;&#125; SPI: &#123;&#125; with order &#123;&#125;"</span>, clazz.getSimpleName(),</span><br><span class="line">                    spi.getClass().getCanonicalName(), order);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(orderWrappers.size());</span><br><span class="line">        <span class="comment">// @4</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; orderWrappers.size(); i++) &#123;</span><br><span class="line">            list.add(orderWrappers.get(i).spi);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        RecordLog.error(<span class="string">"[SpiLoader] ERROR: loadPrototypeInstanceListSorted failed"</span>, t);</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@1 SPI 发现并加载ProcessorSlot接口对象集合。通过[META-INF/services/com.alibaba.csp.sentinel.slotchain.ProcessorSlot]找到所有的调用链节点</li><li>@2 每个实现类上都有一个注解 <code>@SpiOrder</code> 取出注解上的值，用于后续的排序</li><li>@3 按 <code>@SpiOrder</code> 从小到大冒泡排序，将 <code>spi</code> 插入到 <code>orderWrappers</code> 中</li><li>@4 创建一个新的集合并将 <code>spi</code> 按顺序存入</li></ul><p>在完成以上步骤后，调用链将被初始化成</p><table><thead><tr><th>顺序</th><th>节点</th><th>作用</th><th>下一个节点</th></tr></thead><tbody><tr><td>1</td><td>DefaultProcessorSlotChain</td><td>第一个节点</td><td>NodeSelectorSlot</td></tr><tr><td>2</td><td>NodeSelectorSlot</td><td>创建当前Node</td><td>ClusterBuilderSlot</td></tr><tr><td>3</td><td>ClusterBuilderSlot</td><td>创建全局Cluster节点</td><td>LogSlot</td></tr><tr><td>4</td><td>LogSlot</td><td>记录日志</td><td>StatisticSlot</td></tr><tr><td>5</td><td>StatisticSlot</td><td>统计各项指标</td><td>AuthoritySlot</td></tr><tr><td>6</td><td>AuthoritySlot</td><td>验证认证规则</td><td>SystemSlot</td></tr><tr><td>7</td><td>SystemSlot</td><td>验证系统指标（CPU等指标）</td><td>FlowSlot</td></tr><tr><td>8</td><td>FlowSlot</td><td>验证限流指标</td><td>DegradeSlot</td></tr><tr><td>9</td><td>DegradeSlot</td><td>验证熔断指标</td><td>Null</td></tr></tbody></table><h3 id="责任链调用"><a class="markdownIt-Anchor" href="#责任链调用"></a> 责任链调用</h3><h4 id="nodeselectorslot-源码分析"><a class="markdownIt-Anchor" href="#nodeselectorslot-源码分析"></a> NodeSelectorSlot 源码分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DefaultNode node = map.get(context.getName());</span><br><span class="line"><span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        node = map.get(context.getName());</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            node = <span class="keyword">new</span> DefaultNode(resourceWrapper, <span class="keyword">null</span>);</span><br><span class="line">            HashMap&lt;String, DefaultNode&gt; cacheMap = <span class="keyword">new</span> HashMap&lt;String, DefaultNode&gt;(map.size());</span><br><span class="line">            cacheMap.putAll(map);</span><br><span class="line">            cacheMap.put(context.getName(), node);</span><br><span class="line">            map = cacheMap;</span><br><span class="line">            <span class="comment">// Build invocation tree</span></span><br><span class="line">            ((DefaultNode) context.getLastNode()).addChild(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">context.setCurNode(node);</span><br><span class="line">fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br></pre></td></tr></table></figure><p><code>NodeSelectorSlot</code> 源码比较简单，主要逻辑就是根据 <code>context</code> 名找到一个对应的 <code>Node</code> 如果没有就创建一个，并标记为 <code>context</code> 的<br />当前 <code>node</code></p><h4 id="clusterbuilderslot-源码分析"><a class="markdownIt-Anchor" href="#clusterbuilderslot-源码分析"></a> ClusterBuilderSlot 源码分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (clusterNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (clusterNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Create the cluster node.</span></span><br><span class="line">            clusterNode = <span class="keyword">new</span> ClusterNode(resourceWrapper.getName(), resourceWrapper.getResourceType());</span><br><span class="line">            HashMap&lt;ResourceWrapper, ClusterNode&gt; newMap = <span class="keyword">new</span> HashMap&lt;&gt;(Math.max(clusterNodeMap.size(), <span class="number">16</span>));</span><br><span class="line">            newMap.putAll(clusterNodeMap);</span><br><span class="line">            newMap.put(node.getId(), clusterNode);</span><br><span class="line"></span><br><span class="line">            clusterNodeMap = newMap;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">node.setClusterNode(clusterNode);</span><br></pre></td></tr></table></figure><ul><li>clusterNode 是相对资源唯一</li><li>因为一个资源只会有一个责任链，只有在初始化的时候需要进行缓存，所以这里只需要用 HashMap 用来存储这个 clusterNode， 并且在初始化的时候加上锁就可以了（后续只会读）。</li></ul><h4 id="logslot-源码分析"><a class="markdownIt-Anchor" href="#logslot-源码分析"></a> LogSlot 源码分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// @1</span></span><br><span class="line">    fireEntry(context, resourceWrapper, obj, count, prioritized, args);</span><br><span class="line">&#125; <span class="keyword">catch</span> (BlockException e) &#123;</span><br><span class="line">    <span class="comment">// @2</span></span><br><span class="line">    EagleEyeLogUtil.log(resourceWrapper.getName(), e.getClass().getSimpleName(), e.getRuleLimitApp(),</span><br><span class="line">        context.getOrigin(), count);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">    <span class="comment">// @3</span></span><br><span class="line">    RecordLog.warn(<span class="string">"Unexpected entry exception"</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@1 先调用后面的责任链节点</li><li>@2 当后面的责任链节点触发 BlockException 异常后记录 Block 次数到鹰眼</li><li>@3 当后面的责任链触发其他异常后打出警告日志</li></ul><h4 id="statisticslot-源码分析"><a class="markdownIt-Anchor" href="#statisticslot-源码分析"></a> StatisticSlot 源码分析</h4><p><code>StatisticSlot</code> 是 <code>Sentinel</code> 核心的一个类，统计各项指标用于后续的限流、熔断、系统保护等策略，接下来看下 <code>Sentinel</code> 是如何通过 <code>StatisticSlot</code> 进行指标统计的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...省略部分代码</span></span><br><span class="line"><span class="comment">// Do some checking.</span></span><br><span class="line"><span class="comment">// @1</span></span><br><span class="line">fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Request passed, add thread count and pass count.</span></span><br><span class="line"><span class="comment">// @2</span></span><br><span class="line">node.increaseThreadNum();</span><br><span class="line">node.addPassRequest(count);</span><br><span class="line"><span class="comment">// ...省略部分代码</span></span><br></pre></td></tr></table></figure><ul><li>@1 触发后面的责任链节点</li><li>@2 记录通过的线程数<code>+1</code>和通过请求 <code>+count</code><br />这里的 <code>node</code> 就是第二个责任链节点 <code>NodeSelectorSlot</code> 创建的 <code>DefaultNode</code><br />在分析源码前可以先简单了解下 <code>Context</code>、<code>Entry</code>、<code>DefaultNode</code>、<code>ClusterNode</code> 的关系<br /><img src="https://note.youdao.com/yws/api/personal/file/56B9E3EE9D89479F93F62FB5E16DE7DE?method=download&amp;shareKey=e6bfd5cf37270f55437be94f1a7d2efa" alt="Context 关系图" /></li><li><code>Context</code> 每个线程是独享的，但是不同线程的 <code>Context</code> 可以使用同一个名字</li><li><code>EntranceNode</code> 是根据 <code>Context</code> 名共享的，也就是说一个 <code>Context.name</code> 对应一个 <code>EntranceNode</code>。每次调用的时候都会创建，用于记录</li><li><code>Entry</code> 是相对于每个 <code>Context</code> 独享的即是同一个 <code>Context.name</code>，包含了资源名、curNode（当前统计节点）、originNode（来源统计节点）等信息</li><li><code>DefaultNode</code> 一个 <code>Context.name</code> 对应一个统计某资源调用链路上的指标</li><li><code>ClusterNode</code> 一个资源对应一个，统计一个资源维度的指标</li><li><code>DefaultNode</code> 和 <code>ClusterNode</code> 都继承至 <code>StatisticNode</code> 都包含两个 <code>ArrayMetric</code> 类型的字段 <code>rollingCounterInSecond</code>、<code>rollingCounterInMinute</code> 分别用于存储秒级和分钟级统计指标</li><li>而 <code>ArrayMetric</code> 类包含了一个 <code>LeapArray&lt;MetricBucket&gt;</code> 类型字段 <code>data</code>, <code>data</code> 中存放了一个 <code>WindowWrap&lt;MetricBucket&gt;</code> 元素的数组（滑动窗口）, 而这个数组就是各项指标最终存储的位置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.increaseThreadNum();</span><br></pre></td></tr></table></figure><p>这行代码其实就是对 <code>StatisticNode.curThreadNum</code> 进行自增操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPassRequest</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.addPassRequest(count);</span><br><span class="line">    <span class="keyword">this</span>.clusterNode.addPassRequest(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加通过的数量， 除了 <code>DefaultNode</code> 记录一次外，在 <code>ClusterNode</code> 上也需要记录一次【注意：<code>ClusterNode</code> 是按照资源维度统计的，这里指向的 <code>ClusterNode</code> 与同一资源不同 <code>Context</code> 指向的 <code>ClusterNode</code> 是同一个】。一个 <code>Node</code> 在调用了 <code>addPassRequest</code><br />后发生了什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPassRequest</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    rollingCounterInSecond.addPass(count);</span><br><span class="line">    rollingCounterInMinute.addPass(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上代码可以看到 <code>rollingCounterInSecond</code> 、<code>rollingCounterInMinute</code> 两个字段，它们分别用来统计秒级指标和分钟级指标。而实际上这两个字段使用了滑动时间窗口数据结构用于存储指标。接下来看下 <code>Sentinel</code> 滑动窗口的设计:<br />时间滑动窗口主要用到的几个类有：</p><ul><li>ArrayMetric: 负责初始化时间滑动窗口和维护</li><li>LeapArray: 一个滑动时间窗口主体</li><li>WindowWrap: 一个时间窗口主体</li><li>LongAdder：指标统计的计数类</li></ul><p><code>ArrayMetric</code> 构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayMetric</span><span class="params">(<span class="keyword">int</span> sampleCount, <span class="keyword">int</span> intervalInMs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.data = <span class="keyword">new</span> OccupiableBucketLeapArray(sampleCount, intervalInMs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayMetric</span><span class="params">(<span class="keyword">int</span> sampleCount, <span class="keyword">int</span> intervalInMs, <span class="keyword">boolean</span> enableOccupy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (enableOccupy) &#123;</span><br><span class="line">        <span class="keyword">this</span>.data = <span class="keyword">new</span> OccupiableBucketLeapArray(sampleCount, intervalInMs);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.data = <span class="keyword">new</span> BucketLeapArray(sampleCount, intervalInMs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * For unit test.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayMetric</span><span class="params">(LeapArray&lt;MetricBucket&gt; array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.data = array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ArrayMetric</code> 主要有三种构造器，最后一种只是用来跑单元测试使用，而前两种构造器主要为了初始化 <code>data</code> 字段。<br />从代码中我们可以看到 <code>LeapArray</code> 有两种实现方式 <code>OccupiableBucketLeapArray</code> 和 <code>BucketLeapArray</code>，而两种都继承至 <code>LeapArray</code>。</p><p><em>LeapArray 类图</em><br /><a href="https://note.youdao.com/yws/api/personal/file/F75D9590517F4F899ACB4F5D58989F2A?method=download&amp;shareKey=7143a970038fb64081b92019d9633390" target="_blank" rel="noopener">LeapArray类图</a><br /><code>LeapArray</code> 类主要包含以下几个字段：</p><ul><li><code>int windowLengthInMs</code> 一个时间窗口的长度，用毫秒表示</li><li><code>int sampleCount</code> 表示用几个时间窗口统计</li><li><code>int intervalInMs</code> 轮回时间，也就是所有时间窗口加起来的总时长</li><li><code>AtomicReferenceArray&lt;WindowWrap&lt;T&gt;&gt; array</code>  时间窗口实例集合，数组的长度等于 <code>sampleCount</code></li></ul><p>那么我们在回头看下 <code>rollingCounterInSecond</code> 、<code>rollingCounterInMinute</code> 用到了哪种 <code>LeapArray</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SampleCountProperty.SAMPLE_COUNT = 2</span></span><br><span class="line"><span class="comment"> * IntervalProperty.INTERVAL = 1000</span></span><br><span class="line"><span class="comment"> * Holds statistics of the recent &#123;<span class="doctag">@code</span> INTERVAL&#125; seconds. The &#123;<span class="doctag">@code</span> INTERVAL&#125; is divided into time spans</span></span><br><span class="line"><span class="comment"> * by given &#123;<span class="doctag">@code</span> sampleCount&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Metric rollingCounterInSecond = <span class="keyword">new</span> ArrayMetric(SampleCountProperty.SAMPLE_COUNT,</span><br><span class="line">    IntervalProperty.INTERVAL);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Holds statistics of the recent 60 seconds. The windowLengthInMs is deliberately set to 1000 milliseconds,</span></span><br><span class="line"><span class="comment"> * meaning each bucket per second, in this way we can get accurate statistics of each second.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Metric rollingCounterInMinute = <span class="keyword">new</span> ArrayMetric(<span class="number">60</span>, <span class="number">60</span> * <span class="number">1000</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>从上述代码中我们可以看到秒级统计初始化了一个 <code>OccupiableBucketLeapArray</code> 轮回时间为 1000ms 也就是 1s，分两个时间窗口每个各 500ms，而分钟级统计初始化了 <code>BucketLeapArray</code> 轮回时间为 60000ms 也就是 1Min ，分 60 个时间窗口每个窗口 1s。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ArrayMetric.addPass</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPass</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    WindowWrap&lt;MetricBucket&gt; wrap = data.currentWindow();</span><br><span class="line">    wrap.value().addPass(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在添加通过指标前先获取到当前的时间窗口，再将通过数量统计到窗口对应的 <code>MetricBucket</code> 中，那么如何获取当前窗口呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> WindowWrap&lt;T&gt; <span class="title">currentWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentWindow(TimeUtil.currentTimeMillis());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> WindowWrap&lt;T&gt; <span class="title">currentWindow</span><span class="params">(<span class="keyword">long</span> timeMillis)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timeMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//     private int calculateTimeIdx(long timeMillis) &#123;</span></span><br><span class="line">    <span class="comment">//         long timeId = timeMillis / windowLengthInMs;</span></span><br><span class="line">    <span class="comment">//         // Calculate current index so we can map the timestamp to the leap array.</span></span><br><span class="line">    <span class="comment">//         return (int)(timeId % array.length());</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="keyword">int</span> idx = calculateTimeIdx(timeMillis);</span><br><span class="line">    <span class="comment">// Calculate current bucket start time.</span></span><br><span class="line">    <span class="keyword">long</span> windowStart = calculateWindowStart(timeMillis);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Get bucket item at given time from the array.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * (1) Bucket is absent, then just create a new bucket and CAS update to circular array.</span></span><br><span class="line"><span class="comment">     * (2) Bucket is up-to-date, then just return the bucket.</span></span><br><span class="line"><span class="comment">     * (3) Bucket is deprecated, then reset current bucket and clean all deprecated buckets.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        WindowWrap&lt;T&gt; old = array.get(idx);</span><br><span class="line">        <span class="keyword">if</span> (old == <span class="keyword">null</span>) &#123;</span><br><span class="line">            WindowWrap&lt;T&gt; window = <span class="keyword">new</span> WindowWrap&lt;T&gt;(windowLengthInMs, windowStart, newEmptyBucket(timeMillis));</span><br><span class="line">            <span class="keyword">if</span> (array.compareAndSet(idx, <span class="keyword">null</span>, window)) &#123;</span><br><span class="line">                <span class="keyword">return</span> window;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Thread.yield();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (windowStart == old.windowStart()) &#123;</span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (windowStart &gt; old.windowStart()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (updateLock.tryLock()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// Successfully get the update lock, now we reset the bucket.</span></span><br><span class="line">                    <span class="keyword">return</span> resetWindowTo(old, windowStart);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    updateLock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Contention failed, the thread will yield its time slice to wait for bucket available.</span></span><br><span class="line">                Thread.yield();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (windowStart &lt; old.windowStart()) &#123;</span><br><span class="line">            <span class="comment">// Should not go through here, as the provided time is already behind.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> WindowWrap&lt;T&gt;(windowLengthInMs, windowStart, newEmptyBucket(timeMillis));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一步首先获取到当前的时间戳毫秒，通过时间戳计算出时间窗口数组的下标。在计算下标时首先将当前时间戳除以单个窗口时长，计算出当前所在从0ms开始到现在的第几个窗，再对窗口数取模得出当前窗口的在数组中所在下标。从这里我们大概可以看出，这里数组中的时间窗口对象是反复使用的只是代表的时间不同了。<br />我们以秒级统计为例模拟计算下，当前时间戳为：<code>1595495124658</code>，按照 <code>timeMillis / windowLengthInMs</code> 可以得出 <code>timeId</code> 为 <code>3190990249</code>。 <code>(int)(timeId % array.length())</code> 就是 <code>3190990249 % 2</code> 算出结果为 <code>1</code>，也就是说 <code>1</code> 下标位置的时间窗口是当前时间窗口。</p><p>第二步在计算出当前窗口所在下标后，需要计算出当前窗口的开始时间 <code>timeMillis - timeMillis % windowLengthInMs</code>，<code>timeMillis % windowLengthInMs</code> 表示当前窗口开始时间到当前时间的时长，所有当前时间减去时长即可得出当前窗口的开始时间，按上面的例子算出的结果就是 <code>1595495124500</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">WindowWrap&lt;T&gt; old = array.get(idx);</span><br><span class="line"><span class="keyword">if</span> (old == <span class="keyword">null</span>) &#123;</span><br><span class="line">    WindowWrap&lt;T&gt; window = <span class="keyword">new</span> WindowWrap&lt;T&gt;(windowLengthInMs, windowStart, newEmptyBucket(timeMillis));</span><br><span class="line">    <span class="keyword">if</span> (array.compareAndSet(idx, <span class="keyword">null</span>, window)) &#123;</span><br><span class="line">        <span class="keyword">return</span> window;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Thread.yield();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步根据下标取出我们的当前窗口的实例，如果实例还没有被创建过新建一个窗口实例并初始化同时通过 <code>CAS</code> 的方式更新到窗口数组中，如果更新失败让出 <code>CPU</code> 等待下次 <code>CPU</code> 执行本线程。</p><p>第四步如果下标位置已经存在一个窗口实例，并且窗口的开始时间跟本次窗口开始时间一致（同一个窗口），直接返回下标中的窗口</p><p>第五步如果当前窗口的开始时间大于下标窗口的开始时间，说明下标窗口已过期，需要重置数组下标中的窗口（把下标窗口的开始时间改完当前窗口时间，并将指标计数都置成 0 ）</p><p>第六步当前窗口时间小于下标窗口时间，重新实例化一个窗口（不太有这个可能，<code>sentinel</code> 内部实现了自己的时间戳）</p><p>在拿到当前时间所在窗口后，将当前的指标累加记录到 <code>MetriBucket</code> 中</p><ul><li>MetriBucket 累加通过指标 *</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPass</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    add(MetricEvent.PASS, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> MetricBucket <span class="title">add</span><span class="params">(MetricEvent event, <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    counters[event.ordinal()].add(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>counters</code> 是一个 <code>LongAdder</code> 类型的数组</li><li><code>MetricEvent</code> 是指标类型，分别有：PASS 通过、BLOCK 阻塞、 EXCEPTION 异常、 SUCCESS 成功、 RT 平均响应时间、 OCCUPIED_PASS 通过未来的配额</li><li><code>counters[event.ordinal()].add(n)</code> 在指定的指标计数器上累加计数</li></ul><p>看到这里我们知道了 <code>pass</code> 指标是在资源通过 <code>StatisticSlot</code> 后几个节点的验证后立即进行指标计数，那么剩下的 <code>BLOCK</code>、 <code>EXCEPTION</code>、 <code>SUCCESS</code>、 <code>RT</code>、 <code>OCCUPIED_PASS</code> 这几个是在什么时候做记录的呢?</p><h5 id="block-统计"><a class="markdownIt-Anchor" href="#block-统计"></a> BLOCK 统计</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...省略部分代码...</span><br><span class="line">&#125; <span class="keyword">catch</span> (BlockException e) &#123;</span><br><span class="line">    ...省略部分代码...</span><br><span class="line">    <span class="comment">// Add block count.</span></span><br><span class="line">    node.increaseBlockQps(count);</span><br><span class="line">    <span class="keyword">if</span> (context.getCurEntry().getOriginNode() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        context.getCurEntry().getOriginNode().increaseBlockQps(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (resourceWrapper.getEntryType() == EntryType.IN) &#123;</span><br><span class="line">        <span class="comment">// Add count for global inbound entry node for global statistics.</span></span><br><span class="line">        Constants.ENTRY_NODE.increaseBlockQps(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle block event with registered entry callback handlers.</span></span><br><span class="line">    <span class="keyword">for</span> (ProcessorSlotEntryCallback&lt;DefaultNode&gt; handler : StatisticSlotCallbackRegistry.getEntryCallbacks()) &#123;</span><br><span class="line">        handler.onBlocked(e, context, resourceWrapper, node, count, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在后续的责任链节点中（<code>StatisticSlot</code> 之后的节点），如果捕获到了阻塞异常，将对 <code>DefaultNode</code>、<code>OriginNode</code>、<code>ENTRY_NODE</code> 几个 <code>node</code> 进行指标累计。同样也是添加到当前窗口 <code>MetricBucket</code> 中不再进行过多描述</p><h5 id="exception-统计"><a class="markdownIt-Anchor" href="#exception-统计"></a> EXCEPTION 统计</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Do some checking.</span></span><br><span class="line">    fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br><span class="line">    ...省略部分代码</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">    <span class="comment">// Unexpected error, set error to current entry.</span></span><br><span class="line">    context.getCurEntry().setError(e);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This should not happen.</span></span><br><span class="line">    node.increaseExceptionQps(count);</span><br><span class="line">    <span class="keyword">if</span> (context.getCurEntry().getOriginNode() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        context.getCurEntry().getOriginNode().increaseExceptionQps(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (resourceWrapper.getEntryType() == EntryType.IN) &#123;</span><br><span class="line">        Constants.ENTRY_NODE.increaseExceptionQps(count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似的 <code>exception</code> 统计在后续的责任链节点中（<code>StatisticSlot</code> 之后的节点），如果捕获到了异常，将对 <code>DefaultNode</code>、<code>OriginNode</code>、<code>ENTRY_NODE</code> 几个 <code>node</code> 进行指标累计。</p><p>除了 <code>StatisticSlot</code> 自动捕获异常外，在资源调用过程中如果出现了异常将通过调用 <code>Tracer.trace(e)</code> 手动统计异常指标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">trace</span><span class="params">(Throwable e, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    traceContext(e, count, ContextUtil.getContext());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traceContext</span><span class="params">(Throwable e, <span class="keyword">int</span> count, Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!shouldTrace(e)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (context == <span class="keyword">null</span> || context <span class="keyword">instanceof</span> NullContext) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DefaultNode curNode = (DefaultNode)context.getCurNode();</span><br><span class="line">    traceExceptionToNode(e, count, context.getCurEntry(), curNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先从线程变量中出去当前线程的 <code>Context</code> 在从中取出 DefaultNode 和 ClusterNode 并进行异常指标累计</p><h5 id="success-rt-统计"><a class="markdownIt-Anchor" href="#success-rt-统计"></a> <code>SUCCESS</code>、 <code>RT</code> 统计</h5><p>平均响应时间和成功次数的统计是在资源退出的时候调用 <code>entry.exit()</code> 进行统计，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StatisticSlot#exit()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(Context context, ResourceWrapper resourceWrapper, <span class="keyword">int</span> count, Object... args)</span> </span>&#123;</span><br><span class="line">    DefaultNode node = (DefaultNode)context.getCurNode();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (context.getCurEntry().getError() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Calculate response time (max RT is statisticMaxRt from SentinelConfig).</span></span><br><span class="line">        <span class="keyword">long</span> rt = TimeUtil.currentTimeMillis() - context.getCurEntry().getCreateTime();</span><br><span class="line">        <span class="keyword">int</span> maxStatisticRt = SentinelConfig.statisticMaxRt();</span><br><span class="line">        <span class="keyword">if</span> (rt &gt; maxStatisticRt) &#123;</span><br><span class="line">            rt = maxStatisticRt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Record response time and success count.</span></span><br><span class="line">        node.addRtAndSuccess(rt, count);</span><br><span class="line">        <span class="keyword">if</span> (context.getCurEntry().getOriginNode() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            context.getCurEntry().getOriginNode().addRtAndSuccess(rt, count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.decreaseThreadNum();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (context.getCurEntry().getOriginNode() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            context.getCurEntry().getOriginNode().decreaseThreadNum();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resourceWrapper.getEntryType() == EntryType.IN) &#123;</span><br><span class="line">            Constants.ENTRY_NODE.addRtAndSuccess(rt, count);</span><br><span class="line">            Constants.ENTRY_NODE.decreaseThreadNum();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Error may happen.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle exit event with registered exit callback handlers.</span></span><br><span class="line">    Collection&lt;ProcessorSlotExitCallback&gt; exitCallbacks = StatisticSlotCallbackRegistry.getExitCallbacks();</span><br><span class="line">    <span class="keyword">for</span> (ProcessorSlotExitCallback handler : exitCallbacks) &#123;</span><br><span class="line">        handler.onExit(context, resourceWrapper, count, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fireExit(context, resourceWrapper, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>退出也是责任链调用退出每个节点，这里直接跳过了大部分代码。退出统计大致流程如下：</p><ul><li>获取得到当前时间戳和资源调用的时间，相减算出这次整个资源调用所花费的总时间</li><li>将总时间记录和成功次数累加记录当前窗口，本次总时间如果超过最大统计时间以最大统计时间作为本次统计时间</li><li>对 Node 扣减一次当前线程数</li><li>触发下一个责任链节点退出</li></ul><h3 id="longadder-源码分析"><a class="markdownIt-Anchor" href="#longadder-源码分析"></a> LongAdder 源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    Cell[] as = cells;</span><br><span class="line">    <span class="keyword">long</span> b = base;</span><br><span class="line">    <span class="keyword">long</span> v;</span><br><span class="line">    HashCode hc;</span><br><span class="line">    Cell a;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">if</span> (cells != <span class="keyword">null</span> || !casBase(base, b + x)) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> uncontended = <span class="keyword">true</span>;</span><br><span class="line">        hc = threadHashCode.get()</span><br><span class="line">        <span class="keyword">int</span> h = hc.code;</span><br><span class="line">        n = as.length;</span><br><span class="line">        a = as[(n - <span class="number">1</span>) &amp; h]</span><br><span class="line">        uncontended = a.cas(v = a.value, v + x)</span><br><span class="line">        <span class="keyword">if</span> (as == <span class="keyword">null</span> || as.length &lt; <span class="number">1</span> ||</span><br><span class="line">            a == <span class="keyword">null</span> ||</span><br><span class="line">            !uncontended) &#123;</span><br><span class="line">             retryUpdate(x, hc, uncontended);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LongAdder 中有一个Cell数组用于存储数值，当高并发时对数组中某个值进行加法运算减少同一个数值并发。（+1） 或者 （+ -1）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> sum = base;</span><br><span class="line">    Cell[] as = cells;</span><br><span class="line">    <span class="keyword">if</span> (as != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = as.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            Cell a = as[i];</span><br><span class="line">            <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123; sum += a.value; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取值时把 Cell 数组中所有元素的取出算总数</p><h4 id="熔点判断"><a class="markdownIt-Anchor" href="#熔点判断"></a> 熔点判断</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DegradeRuleManager.checkDegrade(resourceWrapper, context, node, count);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkDegrade</span><span class="params">(ResourceWrapper resource, Context context, DefaultNode node, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> BlockException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Set&lt;DegradeRule&gt; rules = degradeRules.get(resource.getName());</span><br><span class="line">    <span class="keyword">if</span> (rules == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (DegradeRule rule : rules) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!rule.passCheck(context, node, count)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DegradeException(rule.getLimitApp(), rule);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>熔点的判断是由 <code>DegradeRuleManager</code> 管理。 <code>DegradeRuleManager</code> 会根据资源名取出所有的熔断规则，然后检查所有的规则如果触发其中一个直接抛出 <code>DegradeException</code> 异常触发熔断机制。</p><ul><li>RT *</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> rt = clusterNode.avgRt();</span><br><span class="line"><span class="keyword">if</span> (rt &lt; <span class="keyword">this</span>.count) &#123;</span><br><span class="line">    passCount.set(<span class="number">0</span>); <span class="comment">// 计数，用于判断连续超 RT 多少次</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sentinel will degrade the service only if count exceeds.</span></span><br><span class="line"><span class="keyword">if</span> (passCount.incrementAndGet() &lt; rtSlowRequestAmount) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...省略部分代码</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><ul><li>从 <code>clusterNode</code> 中计算出平均响应时间</li><li>如果平均响应时间小于规则设置时间，将统计连续超时计数器重置为<code>0</code></li><li>如果平均响应时间大于规则设置时间，并且连续超时计数器超过了规则设置的大小，判为到达熔断点抛出熔断异常</li></ul><p>统计平均 RT 的方法（秒级）：</p><ul><li>取出所有窗口（秒级只定义了两个时间窗口）的 RT，并求总和</li><li>取出所有窗口（秒级只定义了两个时间窗口）的 success，并求总和</li><li>所有窗口的 RT 总和 除以 success 总和 得出平均RT</li></ul><p>异常比例熔断也是类似的逻辑（秒级）</p><ul><li>取出所有窗口的 exception 数求和，并除以一个间隔时间（秒为单位）【每秒总异常数】</li><li>取出所有窗口的 success 数求总和，并除以一个间隔时间（秒为单位）【每秒总退出成功数，包含了异常数】</li><li>取出所有窗口的 pass 总和 加上所有窗口 block 总数，并除以一个间隔时间（秒为单位）【算每秒总调用量】</li><li>如果每秒总调用量小于 minRequestAmount 判为未到达熔断点</li><li>如果每秒总异常数没有超过 minRequestAmount 判为未到达熔断点</li><li>每秒总退出成功数 / 每秒总异常数（异常比例）如果超过规则指定比例，判为到达熔断点抛出熔断异常</li></ul><p>异常数就比例（分钟级）</p><ul><li>取出所有窗口的 exception 数总和，判断如果超过规则配置数，抛出熔断异常</li></ul><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>Sentinel 通过责任链，触发节点创建、监控统计、日志、认证、系统限流、限流、熔断，因为Sentinl 是由 SPI 创建的责任链所以我们可以自定义链节点拿到指标根据自己的业务逻辑定义。<br />Sentinel 通过将所有的指标统计到时间窗口中，记录在 MetricBucket 类实例中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sentinel-熔断等指标如何统计以及如何判断熔断点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sentinel-熔断等指标如何统计以及如何判断熔断点&quot;&gt;&lt;/a&gt; Sentinel 熔断等指标如何统计以及如何判断熔断点&lt;/h1&gt;

      
    
    </summary>
    
    
      <category term="java" scheme="https://fantasylion.github.io/categories/java/"/>
    
    
      <category term="source" scheme="https://fantasylion.github.io/tags/source/"/>
    
  </entry>
  
  <entry>
    <title>ConcurrentHashMap 源码分析</title>
    <link href="https://fantasylion.github.io/java/ConcurrentHashMap-source-code/"/>
    <id>https://fantasylion.github.io/java/ConcurrentHashMap-source-code/</id>
    <published>2020-03-13T05:25:51.000Z</published>
    <updated>2020-03-13T05:25:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知 ConcurrentHashMap 是线程安全的一个 Map，那么他是如何实现线程安全的呢？以下就以 <code>jdk1.8.0_172</code> 的源码进行分析</p><h4 id="put-方法源码带注释"><a class="markdownIt-Anchor" href="#put-方法源码带注释"></a> put 方法源码，带注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Implementation for put and putIfAbsent */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> hash = spread(key.hashCode());  <span class="comment">// 通过扰动函数获取计算出一个 hash</span></span><br><span class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;                   <span class="comment">// 默认为 0， 节点已经存在一个元素时 1表示元素 hash 大于等于0，2 表示存在红黑树</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123; <span class="comment">// 无限循环</span></span><br><span class="line"></span><br><span class="line">        Node&lt;K,V&gt; f;    <span class="comment">// 根据算出来的 i(index)取到的 node 节点</span></span><br><span class="line">        <span class="keyword">int</span> n;          <span class="comment">// 当前 table 的长度</span></span><br><span class="line">        <span class="keyword">int</span> i;          <span class="comment">// (n - 1) &amp; hash 应该是 index，这样的话每次长度可能是不一样的算出来的index能一致么（扩容后如何重新存放数据）？</span></span><br><span class="line">        <span class="keyword">int</span> fh;         <span class="comment">// f 节点的hash值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">            tab = initTable();                      <span class="comment">// 如果 table 不存在就初始化一个</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;  <span class="comment">// 数组下标位置空缺，调用 unsafe 类的本地方法 getObjectVolatile 使用volatile的加载语义获取指定位置</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>, <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))  <span class="comment">// CAS 对比原值是否被改动，如果没有改动则替换原值</span></span><br><span class="line">                <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin    // CAS是一条CPU的原子指令（cmpxchg指令），不会造成所谓的数据不一致问题，属于乐观锁</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED) &#123;    <span class="comment">// hash for forwarding nodes</span></span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;        <span class="comment">// hash 冲突，当前 hash 对应数组下标已经有值了</span></span><br><span class="line">            V oldVal = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> ( f ) &#123;</span><br><span class="line">                <span class="keyword">if</span> ( tabAt(tab, i) == f ) &#123;   <span class="comment">// 在取一次数据确保数据在加锁前没有被修改过</span></span><br><span class="line">                    <span class="keyword">if</span> ( fh &gt;= <span class="number">0</span> ) &#123;          <span class="comment">// hash 大于等于0（hash 什么情况下会小于0？）</span></span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> ( Node&lt;K,V&gt; e = f ;; ++binCount ) &#123;        <span class="comment">// 死循环并计数</span></span><br><span class="line">                            K ek;           <span class="comment">// f 的key</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 取出来的node key、hash跟传入进来的key是同一个没变</span></span><br><span class="line">                            <span class="keyword">if</span> ( e.hash == hash &amp;&amp; ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek))) ) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> ( !onlyIfAbsent ) <span class="comment">// 不是 只有在空缺时进行存入操作，直接把新值存进去</span></span><br><span class="line">                                    e.val = value;  </span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 如果对应数组下标值key跟现在要存的key是不一样的</span></span><br><span class="line">                            Node&lt;K,V&gt; pred = e;     <span class="comment">// e 就是f,根据算出来的 i(index)取到的 node 节点</span></span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123; <span class="comment">// 下一个 node，如果是空的</span></span><br><span class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>);  <span class="comment">// 直接链表的下一个节点</span></span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( f <span class="keyword">instanceof</span> TreeBin ) &#123;  <span class="comment">// f 的 hash 小于 0 并且f 是一颗二叉树（树的hash肯定小于0么？）</span></span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span> ( ( p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key, value) ) != <span class="keyword">null</span> ) &#123; <span class="comment">// 找到一个节点或者新建一个节点</span></span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> ( !onlyIfAbsent )  <span class="comment">// 不是 只有在空缺时进行存入操作，直接把新值存进新树节点</span></span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;    <span class="comment">// 链表或者是二叉树</span></span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)      <span class="comment">// 链表的长度如果超过或等于8</span></span><br><span class="line">                    treeifyBin(tab, i);                 <span class="comment">// 将链表转换为二叉树</span></span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;<span class="comment">// 如果原来有值则返回原来的值</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);<span class="comment">// 元素计数并判断是否需要扩容</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="put-方法流程图"><a class="markdownIt-Anchor" href="#put-方法流程图"></a> put 方法流程图</h2><p><img src="https://note.youdao.com/yws/api/personal/file/DE5DE46C6C4740279EA45C6C27C66C15?method=download&amp;shareKey=c97f3124a814f2687a30e23eb4d33d01" alt="image" /></p><p>在 put 插入数据时存在这么几种情况：</p><ul><li>数组 table 不存在 或者没有初始化长度（懒加载）</li><li>数据插入到哪个地址</li><li>期望插入的地址已经有数据了</li><li>在插入数据时如何避免有其他线程同时操作插入或者其他线程在执行扩容</li><li>存储数据已经存满了，该怎么办</li></ul><p>下面针对以上几种情况进行分析 ConcurrentHashMap 时如何处理这些问题的</p><h4 id="数组-table-不存在或者没有初始化长度"><a class="markdownIt-Anchor" href="#数组-table-不存在或者没有初始化长度"></a> 数组 table 不存在或者没有初始化长度</h4><p>对于这个情况肯定是初始化一个数组就好了，在这里我们主要想分析的是如何初始化一个数组。对于初始化数组可能会存在的一个并发问题就是，在 A 线程初始化数组同时 B 线程也在执行初始化。</p><p>那 ConcurrentHashMap 是如何处理这个问题的。这里 ConcurrentHashMap 设置了一个 int 类型的属性 sizeCtl ，用于判断是否有其他线程在执行扩容或者初始化等调整大小的操作。先看下 sizeCtl 的注释：</p><blockquote><p>Table initialization and resizing control.  When negative, the table is being initialized or resized: -1 for initialization,  else -(1 + the number of active resizing threads).  Otherwise, when table is null, holds the initial table size to use upon creation, or 0 for default. After initialization, holds the next element count value upon which to resize the table.</p></blockquote><p>大致意思是</p><blockquote><p>表初始化和大小调整控制。如果为负，则表将被初始化或调整大小：-1用于初始化， -（1 +活动的调整大小线程数）表示调整大小。否则，当table为null时，保留创建时要使用的初始表大小， 或者默认为0。 初始化之后，保留下一个要调整表大小的元素计数值。</p></blockquote><p>代码中实现的逻辑是 siezeCtl 小于 0 的时候（也就是有其他线程对数组执行初始化或者调整大小），放弃 CPU 执行本线程，等待下次本线程抢到执行权（到时候在看还有没有其他线程在执行）</p><p>在确保只有本线程在执行初始化后，先对 sizeCtl 进行赋值 -1 准备开始初始化。在这里赋值时又有一个新的并发问题，如何保证在这一瞬间只有一个线程在执行赋值呢？这里 ConcurrentHashMap 调用了 Unsafe.compareAndSwapInt 方法去执行赋值操作，保证了本次赋值操作为原子操作。</p><p>那么这里可能又会产生一个新的疑问为什么 Unsafe.compareAndSwapInt 方法就是原子操作呢。翻看源码可以发现 compareAndSwapInt 是一个本地方法这类方法称为 CAS，实际最终调用的是一条 CPU 指令 compxchg。比较值是否被改动过，如果被改动过不做操作否则直接赋值数据，从操作中可以看出来这就是一个乐观锁的执行过程。</p><p>在上步加锁操作完成后，终于可以进入到初始化数组阶段了。到了这一步就很简单了，初始化一个 Node 数组，长度为默认 16 或者是 sizeCtl 有大于 0  的值就用 sizeCtl 做为数组长度。最后一个操作就是注释中提到的，保留下一个要调整表大小的元素计数值 （n - (n &gt;&gt;&gt; 2)）n 为最新长度。</p><h4 id="数据插入到哪个地址也就是定位索引计算数组下标"><a class="markdownIt-Anchor" href="#数据插入到哪个地址也就是定位索引计算数组下标"></a> 数据插入到哪个地址，也就是定位索引，计算数组下标</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> hash = (key.hashCode() ^ (key.hashCode() &gt;&gt;&gt; <span class="number">16</span>)) &amp; <span class="number">0x7fffffff</span>;  <span class="comment">// 扰动函数</span></span><br><span class="line"><span class="keyword">int</span> i = (n - <span class="number">1</span>) &amp; hash)</span><br></pre></td></tr></table></figure><h4 id="期望插入的地址已经有数据了如何解决-hash-冲突"><a class="markdownIt-Anchor" href="#期望插入的地址已经有数据了如何解决-hash-冲突"></a> 期望插入的地址已经有数据了，如何解决 Hash 冲突</h4><p>插入的地址中已经有值，一般有两种情况</p><ul><li>一种就是这个 key 已经存过一次了</li><li>另一种就是存在另外一个 key 跟当前 key 计算出的 hash 是一样的</li></ul><p>第一种情况存的是同一个 key ，记录下老的数据，同时如果存入规则是允许数组下标对应元素非空缺时覆盖，则做覆盖操作否则不做操作。</p><p>第二种情况就是面试经常会问到的 hash 冲突。ConcurrentHashMap 使用了常用的解决 hash 冲突的方法，采用链表结构（HashMap、redis的字典都是采用链表解决 hash 冲突）。但是链表有一个问题，当链表越来越长时查询链表的效率会越来越低，所以 1.8 版本后 ConcurrentHashMap 引入红黑树来解决此问题。当链表长度超过 8 后将会尝试转换为红黑树。转换为红黑树有个前提是数组的长度必须大于 64，不然只是重新调整节点位置。</p><h4 id="在插入数据时如何避免有其他线程同时操作插入或者其他线程在执行扩容"><a class="markdownIt-Anchor" href="#在插入数据时如何避免有其他线程同时操作插入或者其他线程在执行扩容"></a> 在插入数据时如何避免有其他线程同时操作插入或者其他线程在执行扩容</h4><p>插入数据分为以下几种情况：</p><ul><li>没有 hash 冲突，hash 对应的数组下标没有元素存在</li><li>存入的 key 与 hash 对应的元素是一样的</li><li>有 hash 冲突为链表结构数据</li><li>有 hash 冲突为红黑树结构数据</li></ul><h5 id="没有-hash-冲突hash-对应的数组下标没有元素存在"><a class="markdownIt-Anchor" href="#没有-hash-冲突hash-对应的数组下标没有元素存在"></a> 没有 hash 冲突，hash 对应的数组下标没有元素存在</h5><p>与初始化方法类型用了 CAS 进行赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">U.compareAndSwapObject(tab, ((long)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br></pre></td></tr></table></figure><h5 id="另外三种情况"><a class="markdownIt-Anchor" href="#另外三种情况"></a> 另外三种情况</h5><ul><li>存入的 key 与 hash 对应的元素是一样的</li><li>有 hash 冲突为链表结构数据</li><li>有 hash 冲突为红黑树结构数据<br />以上都是通过 synchronized 在数组中对应 Node 上加锁，以上三种情况同一时间只能有一个线程执行操作。</li></ul><h4 id="存储数据已经存满了该怎么办如何扩容"><a class="markdownIt-Anchor" href="#存储数据已经存满了该怎么办如何扩容"></a> 存储数据已经存满了，该怎么办，如何扩容</h4><p>在解决以上问题是我们先考虑一个问题，如何判断数组已经满了？</p><p>实际上 ConcurrentHashMap 并不会等到数组元素满了之后在进行扩容，有两种情况下需要进行扩容</p><ul><li>一种是在新增节点后等到数组元素超过了装载系数0.75（也就是装满75%）后就会立即进行扩容</li><li>另一种是链表转换为红黑树时，如果数组长度没超过 64，将不会转换为红黑树而是进行扩容重新调整节点位置</li></ul><p>以下为计数时候扩容代码加注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Adds to count, and if table is too small and not already</span></span><br><span class="line"><span class="comment">    * resizing, initiates transfer. If already resizing, helps</span></span><br><span class="line"><span class="comment">    * perform transfer if work is available.  Rechecks occupancy</span></span><br><span class="line"><span class="comment">    * after a transfer to see if another resize is already needed</span></span><br><span class="line"><span class="comment">    * because resizings are lagging additions.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> x the count to add</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> check if &lt;0, don't check resize, if &lt;= 1 only check if uncontended</span></span><br><span class="line"><span class="comment">    * 默认为 0 ， 节点已经存在一个元素时 1表示元素 hash 大于等于0，2 表示存在红黑树</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">int</span> check)</span> </span>&#123;</span><br><span class="line">       CounterCell[] as;<span class="comment">// 计数器集合，非空的时候是大小2的幂次方</span></span><br><span class="line"><span class="comment">// baseCount, Base counter value, used mainly when there is no contention, </span></span><br><span class="line">       <span class="comment">// but also as a fallback during table initialization races. Updated via CAS.</span></span><br><span class="line">       <span class="keyword">long</span> b；<span class="comment">// baseCount</span></span><br><span class="line">       <span class="keyword">long</span> s;<span class="comment">// 元素的总数</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// as 非空说明出现过竞争（需要找到自己线程的计数器进行计数）</span></span><br><span class="line">       <span class="comment">// 计数器 +x 失败说明存在赋值竞争（需要通过计数器集合计数）</span></span><br><span class="line">       <span class="keyword">if</span> ( (as = counterCells) != <span class="keyword">null</span> || !U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, b = baseCount, s = b + x) ) &#123;</span><br><span class="line"></span><br><span class="line">           CounterCell a; <span class="comment">// 计数器</span></span><br><span class="line">           <span class="keyword">long</span> v;     <span class="comment">// 当前线程的从 as 中随机取出的值</span></span><br><span class="line">           <span class="keyword">int</span>  m;       <span class="comment">// as 的最大下标</span></span><br><span class="line">           <span class="keyword">boolean</span> uncontended = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 如果计数器数组是空的，需要初始化计数器数组</span></span><br><span class="line">           <span class="keyword">if</span> (as == <span class="keyword">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">           <span class="comment">// 当前线程的计数（probe每个线程独享，类似于hash的作用用于寻址）如果是空的，需要初始化</span></span><br><span class="line">               (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class="keyword">null</span> ||</span><br><span class="line">               <span class="comment">// 通过CAS给计数器 +x 如果失败需要进入</span></span><br><span class="line">               !(uncontended =</span><br><span class="line">                 U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;<span class="comment">// 给cellvalue赋值</span></span><br><span class="line">               fullAddCount(x, uncontended);</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (check &lt;= <span class="number">1</span>)</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           <span class="comment">// 统计计数</span></span><br><span class="line">           s = sumCount();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 是否需要扩容</span></span><br><span class="line">    <span class="keyword">if</span> (check &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab, nt;</span><br><span class="line">        <span class="comment">// 表长度</span></span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sizeCtrl</span></span><br><span class="line">        <span class="keyword">int</span> sc;</span><br><span class="line">        <span class="comment">// sizeCtl</span></span><br><span class="line">        <span class="comment">//  -1 表示在初始化 </span></span><br><span class="line">        <span class="comment">//  -(1+在扩容的线程数) 表示在扩容</span></span><br><span class="line">        <span class="comment">//  如果表是 null, sizeCtl 的值就表示需要初始化的大小，默认是 0</span></span><br><span class="line">        <span class="comment">//  在初始化完成之后，sizeCtl 的值则表示下一个扩容的阈值（n-(n &gt;&gt;&gt; 2) 等于 n * 0.75 向上取整</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 元素总数超过 sizeCtrl，并且表不为Null并且 表的长度没超过最大容量</span></span><br><span class="line">        <span class="keyword">while</span> (s &gt;= (<span class="keyword">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            <span class="keyword">int</span> rs = resizeStamp(n);</span><br><span class="line">        <span class="comment">// 负数表示在初始化（-1）或者在扩容（-1 + -number of Threads）, 这里判断是否有其他线程正在进行扩容</span></span><br><span class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断扩容是否结束，结束则中断循环</span></span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</span><br><span class="line">                    transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// sizeCtrl +1 表示扩容线程 +1</span></span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                    transfer(tab, nt);</span><br><span class="line">            <span class="comment">// 触发扩容（第一个扩容的线程）</span></span><br><span class="line">            <span class="comment">// 高16位是一个对n的数据校验的标志位，低16位表示参与扩容操作的线程个数 + 1。</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</span><br><span class="line">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>)) &#123;</span><br><span class="line">                transfer(tab, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 统计元素总数</span></span><br><span class="line">            s = sumCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">       </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">fullAddCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">boolean</span> wasUncontended)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> h;</span><br><span class="line">       <span class="keyword">if</span> ((h = ThreadLocalRandom.getProbe()) == <span class="number">0</span>) &#123;</span><br><span class="line">           ThreadLocalRandom.localInit();      <span class="comment">// force initialization</span></span><br><span class="line">           h = ThreadLocalRandom.getProbe();</span><br><span class="line">           wasUncontended = <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">boolean</span> collide = <span class="keyword">false</span>;                <span class="comment">// True if last slot nonempty</span></span><br><span class="line">       <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">           CounterCell[] as; <span class="comment">// 计数器数组</span></span><br><span class="line">           CounterCell a;     </span><br><span class="line">           <span class="keyword">int</span> n;            <span class="comment">// 计数器数组长度</span></span><br><span class="line">           <span class="keyword">long</span> v;</span><br><span class="line">           <span class="comment">// 计数器数组不为空，已经初始化过了（存在以下两种情况）</span></span><br><span class="line">           <span class="comment">// 一、最开始没初始化，当前线程进来一瞬间被其他线程初始化了</span></span><br><span class="line">           <span class="comment">// 二、已经初始化了，但是在上一步当前线程给自己在计数器数组中的值加X时候有冲突导致失败了</span></span><br><span class="line">           <span class="keyword">if</span> ((as = counterCells) != <span class="keyword">null</span> &amp;&amp; (n = as.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="comment">// 当前线程在计数器数组中没有值</span></span><br><span class="line">               <span class="keyword">if</span> ((a = as[(n - <span class="number">1</span>) &amp; h]) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="comment">// 查看锁状态是否被锁住，（cellsBusy 是在计数器数组扩容或者创建计数器时用的锁）</span></span><br><span class="line">                   <span class="keyword">if</span> (cellsBusy == <span class="number">0</span>) &#123;            <span class="comment">// Try to attach new Cell</span></span><br><span class="line">                       CounterCell r = <span class="keyword">new</span> CounterCell(x); <span class="comment">// Optimistic create</span></span><br><span class="line">                       <span class="comment">// 给 cellsBusy 上锁，准备初始化计数器</span></span><br><span class="line">                       <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                           U.compareAndSwapInt(<span class="keyword">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                           <span class="keyword">boolean</span> created = <span class="keyword">false</span>;</span><br><span class="line">                           <span class="keyword">try</span> &#123;               <span class="comment">// Recheck under lock</span></span><br><span class="line">                               CounterCell[] rs; <span class="keyword">int</span> m, j;</span><br><span class="line">                               <span class="comment">// 进入到锁里面后，重新检查下计数器数组，确保当前线程计数器没有初始化过</span></span><br><span class="line">                               <span class="keyword">if</span> ((rs = counterCells) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                   (m = rs.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                                   rs[j = (m - <span class="number">1</span>) &amp; h] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                   <span class="comment">// 初始化当前线程的计数器</span></span><br><span class="line">                                   rs[j] = r;  </span><br><span class="line">                                   created = <span class="keyword">true</span>;</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                               <span class="comment">// 释放锁</span></span><br><span class="line">                               cellsBusy = <span class="number">0</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="comment">// 如果线程成功初始化计数器，则结束，否则继续回头起点重新初始化计数器</span></span><br><span class="line">                           <span class="keyword">if</span> (created)</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                           <span class="keyword">continue</span>;           <span class="comment">// Slot is now non-empty</span></span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   collide = <span class="keyword">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (!wasUncontended)       <span class="comment">// CAS already known to fail</span></span><br><span class="line">                   wasUncontended = <span class="keyword">true</span>;      <span class="comment">// Continue after rehash</span></span><br><span class="line">               <span class="comment">// 当前线程在计数器数组中有值，直接通过 cas 加x</span></span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="comment">// 当前计数器数组长度超过了 CPU 的数量，或者计数器被修改了</span></span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (counterCells != as || n &gt;= NCPU)</span><br><span class="line">                   collide = <span class="keyword">false</span>;            <span class="comment">// At max size or stale</span></span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (!collide)</span><br><span class="line">                   collide = <span class="keyword">true</span>;</span><br><span class="line">               <span class="comment">// 对计数器数组进行扩容</span></span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                        U.compareAndSwapInt(<span class="keyword">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       <span class="keyword">if</span> (counterCells == as) &#123;<span class="comment">// Expand table unless stale</span></span><br><span class="line">                           CounterCell[] rs = <span class="keyword">new</span> CounterCell[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">                           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                               rs[i] = as[i];</span><br><span class="line">                           counterCells = rs;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                       cellsBusy = <span class="number">0</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   collide = <span class="keyword">false</span>;</span><br><span class="line">                   <span class="keyword">continue</span>;                   <span class="comment">// Retry with expanded table</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 重新计算hash</span></span><br><span class="line">               h = ThreadLocalRandom.advanceProbe(h);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 计数器数组没被初始化过，通过cellsBusy 上锁 准备开始初始化计数器数组</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; counterCells == as &amp;&amp;</span><br><span class="line">                    U.compareAndSwapInt(<span class="keyword">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">               <span class="keyword">boolean</span> init = <span class="keyword">false</span>;</span><br><span class="line">               <span class="keyword">try</span> &#123;                           <span class="comment">// Initialize table</span></span><br><span class="line">                   <span class="keyword">if</span> (counterCells == as) &#123;</span><br><span class="line">                       CounterCell[] rs = <span class="keyword">new</span> CounterCell[<span class="number">2</span>];</span><br><span class="line">                       rs[h &amp; <span class="number">1</span>] = <span class="keyword">new</span> CounterCell(x);</span><br><span class="line">                       counterCells = rs;</span><br><span class="line">                       init = <span class="keyword">true</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                   cellsBusy = <span class="number">0</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (init)</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 初始化计数器数组上锁失败，尝试直接在 basecount 中计数</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, v = baseCount, v + x))</span><br><span class="line">               <span class="keyword">break</span>;                          <span class="comment">// Fall back on using base</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Moves and/or copies the nodes in each bin to new table. See</span></span><br><span class="line"><span class="comment">    * above for explanation.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> n = tab.length; <span class="comment">// 原表长度</span></span><br><span class="line">       <span class="keyword">int</span> stride; <span class="comment">// 一次操作多少条数据</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 根据 CPU 数量来划分一次操作多少条数据，最小是 16 条</span></span><br><span class="line">       <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)<span class="comment">// MIN_TRANSFER_STRIDE = 16 </span></span><br><span class="line">           stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (nextTab == <span class="keyword">null</span>) &#123;            <span class="comment">// initiating</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">               <span class="comment">// n &lt;&lt; 1 就是 n * 2，表示原来的两倍</span></span><br><span class="line">               Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">               nextTab = nt;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></span><br><span class="line">               sizeCtl = Integer.MAX_VALUE;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           nextTable = nextTab;</span><br><span class="line">           transferIndex = n;<span class="comment">// 一直指向最小边界</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span> nextn = nextTab.length;</span><br><span class="line">       <span class="comment">// A node inserted at head of bins during transfer operations.</span></span><br><span class="line">       ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</span><br><span class="line">       <span class="keyword">boolean</span> advance = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">boolean</span> finishing = <span class="keyword">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// i 指向最大边界 bound 指向最小边界</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</span><br><span class="line">           Node&lt;K,V&gt; f; <span class="keyword">int</span> fh;</span><br><span class="line">           </span><br><span class="line">           <span class="comment">// 给当前线程分配任务（移动指针指向一个操作范围）</span></span><br><span class="line">           <span class="keyword">while</span> (advance) &#123;</span><br><span class="line">               <span class="keyword">int</span> nextIndex; <span class="comment">// 过度用的临时存储变量</span></span><br><span class="line">               <span class="keyword">int</span> nextBound; <span class="comment">// </span></span><br><span class="line">               <span class="comment">// --i &gt;= bound 表示 或者 任务已经完成</span></span><br><span class="line">               <span class="keyword">if</span> (--i &gt;= bound || finishing) &#123;</span><br><span class="line">                   advance = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 一个任务的指针如果小于0 表示任务分配完毕</span></span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                   i = -<span class="number">1</span>;</span><br><span class="line">                   advance = <span class="keyword">false</span>;</span><br><span class="line">               <span class="comment">// 分配下一个迁移任务范围</span></span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, TRANSFERINDEX, nextIndex, </span><br><span class="line">               nextBound = (nextIndex &gt; stride ? nextIndex - stride : <span class="number">0</span>))) &#123;</span><br><span class="line"></span><br><span class="line">                   bound = nextBound;</span><br><span class="line">                   i = nextIndex - <span class="number">1</span>;</span><br><span class="line">                   advance = <span class="keyword">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// i &lt; 0 任务完成</span></span><br><span class="line">           <span class="comment">// i &gt;= n 任务完成后</span></span><br><span class="line">           <span class="comment">// i + n &gt;= nextn 任务完成后</span></span><br><span class="line">           <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class="line">               <span class="keyword">int</span> sc;</span><br><span class="line">               <span class="comment">// 如果所有任务都已经完成，重置数据</span></span><br><span class="line">               <span class="keyword">if</span> (finishing) &#123;</span><br><span class="line">                   nextTable = <span class="keyword">null</span>;</span><br><span class="line">                   table = nextTab;</span><br><span class="line">                   <span class="comment">// 设置下一个阈值</span></span><br><span class="line">                   sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 当前线程数减一</span></span><br><span class="line">               <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                   finishing = advance = <span class="keyword">true</span>;</span><br><span class="line">                   i = n; <span class="comment">// recheck before commit</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 如果i (最大边界) 的值是空的不需要迁移，直接插入 forwardNode 告知其他线程这块已经处理过了</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="keyword">null</span>)</span><br><span class="line">               advance = casTabAt(tab, i, <span class="keyword">null</span>, fwd);</span><br><span class="line">           <span class="comment">// 数据已经拷贝到新表中</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">               advance = <span class="keyword">true</span>; <span class="comment">// already processed</span></span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// f 节点加锁</span></span><br><span class="line">               <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">               <span class="comment">// 加锁后再次确认数据没有被修改过</span></span><br><span class="line">                   <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                       Node&lt;K,V&gt; ln; <span class="comment">// 用来存放保留原位置的链表</span></span><br><span class="line">                       Node&lt;K,V&gt; hn; <span class="comment">// 用来存放迁移到 原位置+n 的链表</span></span><br><span class="line">                       <span class="comment">// 节点 hash code 不为负数表示为链表</span></span><br><span class="line">                       <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                       <span class="comment">// fh 为需要迁移节点hash, n 为原表长度</span></span><br><span class="line">                       <span class="comment">// f 为需要迁移起始节点</span></span><br><span class="line">                       </span><br><span class="line">                       <span class="comment">// hash &amp; n 只会计算出 n 或者 0 值</span></span><br><span class="line">                       <span class="comment">// n 为原表长度为2的幂次方，所以二进制肯定是 一个1后面带几个零，如16： 10000</span></span><br><span class="line">                       <span class="comment">// 任何值 &amp; 上 10000 只会有两个结果 10000 或者 0</span></span><br><span class="line">                       <span class="comment">// 计算结果为n的，直接迁移到 原位置index + n 的位置</span></span><br><span class="line">                       <span class="comment">// 计算结果为0的，保留在原位置</span></span><br><span class="line">                       <span class="comment">// 为什么这么做呢？后面在讲...</span></span><br><span class="line">                           <span class="keyword">int</span> runBit = fh &amp; n;</span><br><span class="line">                           Node&lt;K,V&gt; lastRun = f;</span><br><span class="line"></span><br><span class="line">                           <span class="comment">// 循环遍历找到链表最后几个连续的同一类型节点（都保留原位置的或者都要迁移到 原位置+n 的节点）</span></span><br><span class="line">                           <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="keyword">null</span>; p = p.next) &#123;</span><br><span class="line">                               <span class="keyword">int</span> b = p.hash &amp; n;</span><br><span class="line">                               <span class="comment">// 找到链表最后几个连续同一类型节点中的头节点</span></span><br><span class="line">                               <span class="keyword">if</span> (b != runBit) &#123;</span><br><span class="line">                                   runBit = b;</span><br><span class="line">                                   lastRun = p;</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="comment">// 如果本次找到的连续节点是保留原位置的放到 ln 链表</span></span><br><span class="line">                           <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</span><br><span class="line">                               ln = lastRun;</span><br><span class="line">                               hn = <span class="keyword">null</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="comment">// 如果本次找到的连续节点是迁移到 原位置+n 位置的放到 hn 链表</span></span><br><span class="line">                           <span class="keyword">else</span> &#123;</span><br><span class="line">                               hn = lastRun;</span><br><span class="line">                               ln = <span class="keyword">null</span>;</span><br><span class="line">                           &#125;</span><br><span class="line"></span><br><span class="line">                           <span class="comment">// 继续把其他的节点进行分类</span></span><br><span class="line">                           <span class="comment">// 保留原位置的插入到 ln 链表起始位置</span></span><br><span class="line">                           <span class="comment">// 迁移到 原位置+n 的插入到 hn 链表起始位置</span></span><br><span class="line">                           <span class="comment">// 这里都是插入到起始位置，所以链表不会跟 1.7 jdk 一样发生链表倒置问题</span></span><br><span class="line">                           <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class="line">                               <span class="keyword">int</span> ph = p.hash;</span><br><span class="line">                               K pk = p.key;</span><br><span class="line">                               V pv = p.val;</span><br><span class="line"></span><br><span class="line">                               <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</span><br><span class="line">                                   ln = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class="line">                               <span class="keyword">else</span></span><br><span class="line">                                   hn = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class="line">                           &#125;</span><br><span class="line"></span><br><span class="line">                           <span class="comment">// 迁移数据</span></span><br><span class="line">                           setTabAt(nextTab, i, ln);</span><br><span class="line">                           setTabAt(nextTab, i + n, hn);</span><br><span class="line">                           <span class="comment">// 原表原位置插上 forwardNode 节点表示已经迁移完毕</span></span><br><span class="line">                           setTabAt(tab, i, fwd);</span><br><span class="line">                           advance = <span class="keyword">true</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="comment">// 如果已经被转成红黑树了</span></span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                           TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;<span class="comment">// 需要迁移的节点，转成树类型</span></span><br><span class="line">                           TreeNode&lt;K,V&gt; lo = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;<span class="comment">// </span></span><br><span class="line">                           TreeNode&lt;K,V&gt; hi = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;<span class="comment">// </span></span><br><span class="line">                           <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">                           </span><br><span class="line">                           <span class="comment">// TreeNode 本身也就是链表</span></span><br><span class="line">                           <span class="comment">// 跟链表一样先分成两类，然后一起迁移</span></span><br><span class="line">                           <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                               <span class="keyword">int</span> h = e.hash;</span><br><span class="line">                               TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;(h, e.key, e.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                               <span class="comment">// 保持原位节点</span></span><br><span class="line">                               <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</span><br><span class="line">                                   <span class="keyword">if</span> ((p.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                                       lo = p;</span><br><span class="line">                                   <span class="keyword">else</span></span><br><span class="line">                                       loTail.next = p;</span><br><span class="line">                                   loTail = p;</span><br><span class="line">                                   ++lc;</span><br><span class="line">                               &#125;</span><br><span class="line">                               <span class="comment">// 迁移到 原位+n 节点</span></span><br><span class="line">                               <span class="keyword">else</span> &#123;</span><br><span class="line">                                   <span class="keyword">if</span> ((p.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                                       hi = p;</span><br><span class="line">                                   <span class="keyword">else</span></span><br><span class="line">                                       hiTail.next = p;</span><br><span class="line">                                   hiTail = p;</span><br><span class="line">                                   ++hc;</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素数量没有超过6，退化成链表</span></span><br><span class="line">                           ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class="line">                           <span class="comment">// new TreeBin&lt;K,V&gt;(lo) 会把lo TreeNode 链表重新构建成一个新的红黑树</span></span><br><span class="line">                               (hc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;</span><br><span class="line">                           hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class="line">                               (lc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;</span><br><span class="line"></span><br><span class="line">                           setTabAt(nextTab, i, ln);</span><br><span class="line">                           setTabAt(nextTab, i + n, hn);</span><br><span class="line">                           setTabAt(tab, i, fwd);</span><br><span class="line">                           advance = <span class="keyword">true</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br/><br/><br/><p><strong>参考资料</strong>：<br />ConcurrentHashMap: <a href="https://www.cnblogs.com/zyrblog/p/9881958.html" target="_blank" rel="noopener">https://www.cnblogs.com/zyrblog/p/9881958.html</a><br />Map: <a href="https://sylvanassun.github.io/2018/03/16/2018-03-16-map_family/#more" target="_blank" rel="noopener">https://sylvanassun.github.io/2018/03/16/2018-03-16-map_family/#more</a><br />cmpxchg：<a href="http://heather.cs.ucdavis.edu/~matloff/50/PLN/lock.pdf" target="_blank" rel="noopener">http://heather.cs.ucdavis.edu/~matloff/50/PLN/lock.pdf</a><br />CAS1：<a href="https://juejin.im/post/5a73cbbff265da4e807783f5" target="_blank" rel="noopener">https://juejin.im/post/5a73cbbff265da4e807783f5</a><br />CAS2：<a href="https://liuzhengyang.github.io/2017/05/11/cas/" target="_blank" rel="noopener">https://liuzhengyang.github.io/2017/05/11/cas/</a><br />CAS3：<a href="https://zhuanlan.zhihu.com/p/34556594" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/34556594</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;众所周知 ConcurrentHashMap 是线程安全的一个 Map，那么他是如何实现线程安全的呢？以下就以 &lt;code&gt;jdk1.8.0_172&lt;/code&gt; 的源码进行分析&lt;/p&gt;
&lt;h4 id=&quot;put-方法源码带注释&quot;&gt;&lt;a class=&quot;markdownIt-A
      
    
    </summary>
    
    
      <category term="java" scheme="https://fantasylion.github.io/categories/java/"/>
    
    
      <category term="source" scheme="https://fantasylion.github.io/tags/source/"/>
    
  </entry>
  
  <entry>
    <title>Airflow 使用 Celery 时，如何添加 Celery 配置</title>
    <link href="https://fantasylion.github.io/tool/2020-01-07-adding-extra-celery-configs-to-airflow/"/>
    <id>https://fantasylion.github.io/tool/2020-01-07-adding-extra-celery-configs-to-airflow/</id>
    <published>2020-01-06T16:00:00.000Z</published>
    <updated>2020-01-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><p>前段时间我选用了 <code>Airflow</code> 对 <code>wms</code> 进行数据归档，在运行一段时间后，经常发现会报以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">[2020-01-07 14:41:34,465: WARNING&#x2F;ForkPoolWorker-5] Failed operation _store_result.  Retrying 2 more times.</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;sqlalchemy&#x2F;engine&#x2F;base.py&quot;, line 1245, in _execute_context</span><br><span class="line">    self.dialect.do_execute(</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;sqlalchemy&#x2F;engine&#x2F;default.py&quot;, line 581, in do_execute</span><br><span class="line">    cursor.execute(statement, parameters)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;MySQLdb&#x2F;cursors.py&quot;, line 255, in execute</span><br><span class="line">    self.errorhandler(self, exc, value)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;MySQLdb&#x2F;connections.py&quot;, line 50, in defaulterrorhandler</span><br><span class="line">    raise errorvalue</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;MySQLdb&#x2F;cursors.py&quot;, line 252, in execute</span><br><span class="line">    res &#x3D; self._query(query)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;MySQLdb&#x2F;cursors.py&quot;, line 378, in _query</span><br><span class="line">    db.query(q)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;MySQLdb&#x2F;connections.py&quot;, line 280, in query</span><br><span class="line">    _mysql.connection.query(self, query)</span><br><span class="line">_mysql_exceptions.OperationalError: (2006, &#39;MySQL server has gone away&#39;)</span><br><span class="line"></span><br><span class="line">The above exception was the direct cause of the following exception:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;celery&#x2F;backends&#x2F;database&#x2F;__init__.py&quot;, line 53, in _inner</span><br><span class="line">    return fun(*args, **kwargs)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;celery&#x2F;backends&#x2F;database&#x2F;__init__.py&quot;, line 107, in _store_result</span><br><span class="line">    task &#x3D; list(session.query(Task).filter(Task.task_id &#x3D;&#x3D; task_id))</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;sqlalchemy&#x2F;orm&#x2F;query.py&quot;, line 3367, in __iter__</span><br><span class="line">    return self._execute_and_instances(context)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;sqlalchemy&#x2F;orm&#x2F;query.py&quot;, line 3392, in _execute_and_instances</span><br><span class="line">    result &#x3D; conn.execute(querycontext.statement, self._params)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;sqlalchemy&#x2F;engine&#x2F;base.py&quot;, line 982, in execute</span><br><span class="line">    return meth(self, multiparams, params)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;sqlalchemy&#x2F;sql&#x2F;elements.py&quot;, line 287, in _execute_on_connection</span><br><span class="line">    return connection._execute_clauseelement(self, multiparams, params)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;sqlalchemy&#x2F;engine&#x2F;base.py&quot;, line 1095, in _execute_clauseelement</span><br><span class="line">    ret &#x3D; self._execute_context(</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;sqlalchemy&#x2F;engine&#x2F;base.py&quot;, line 1249, in _execute_context</span><br><span class="line">    self._handle_dbapi_exception(</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;sqlalchemy&#x2F;engine&#x2F;base.py&quot;, line 1476, in _handle_dbapi_exception</span><br><span class="line">    util.raise_from_cause(sqlalchemy_exception, exc_info)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;sqlalchemy&#x2F;util&#x2F;compat.py&quot;, line 398, in raise_from_cause</span><br><span class="line">    reraise(type(exception), exception, tb&#x3D;exc_tb, cause&#x3D;cause)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;sqlalchemy&#x2F;util&#x2F;compat.py&quot;, line 152, in reraise</span><br><span class="line">    raise value.with_traceback(tb)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;sqlalchemy&#x2F;engine&#x2F;base.py&quot;, line 1245, in _execute_context</span><br><span class="line">    self.dialect.do_execute(</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;sqlalchemy&#x2F;engine&#x2F;default.py&quot;, line 581, in do_execute</span><br><span class="line">    cursor.execute(statement, parameters)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;MySQLdb&#x2F;cursors.py&quot;, line 255, in execute</span><br><span class="line">    self.errorhandler(self, exc, value)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;MySQLdb&#x2F;connections.py&quot;, line 50, in defaulterrorhandler</span><br><span class="line">    raise errorvalue</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;MySQLdb&#x2F;cursors.py&quot;, line 252, in execute</span><br><span class="line">    res &#x3D; self._query(query)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;MySQLdb&#x2F;cursors.py&quot;, line 378, in _query</span><br><span class="line">    db.query(q)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;MySQLdb&#x2F;connections.py&quot;, line 280, in query</span><br><span class="line">    _mysql.connection.query(self, query)</span><br><span class="line">sqlalchemy.exc.OperationalError: (_mysql_exceptions.OperationalError) (2006, &#39;MySQL server has gone away&#39;)</span><br><span class="line">[SQL: SELECT celery_taskmeta.id AS celery_taskmeta_id, celery_taskmeta.task_id AS celery_taskmeta_task_id, celery_taskmeta.status AS celery_taskmeta_status, celery_tas</span><br><span class="line">kmeta.result AS celery_taskmeta_result, celery_taskmeta.date_done AS celery_taskmeta_date_done, celery_taskmeta.traceback AS celery_taskmeta_traceback </span><br><span class="line">FROM celery_taskmeta </span><br><span class="line">WHERE celery_taskmeta.task_id &#x3D; %s]</span><br><span class="line">[parameters: (&#39;e909b916-4284-47c4-bc5b-321bc32eb9f9&#39;,)]</span><br><span class="line">(Background on this error at: http:&#x2F;&#x2F;sqlalche.me&#x2F;e&#x2F;e3q8)</span><br></pre></td></tr></table></figure><h3 id="解决过程"><a class="markdownIt-Anchor" href="#解决过程"></a> 解决过程</h3><p>查了下资料一般情况下数据库服务器断开连接后，被连接池未收回将会导致以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQL server has gone away</span><br></pre></td></tr></table></figure><p>所以看了下 <code>sqlalchemy</code> 的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">sql_alchemy_pool_enabled &#x3D; True</span><br><span class="line"></span><br><span class="line"># The SqlAlchemy pool size is the maximum number of database connections</span><br><span class="line"># in the pool. 0 indicates no limit.</span><br><span class="line">sql_alchemy_pool_size &#x3D; 5</span><br><span class="line"></span><br><span class="line"># The maximum overflow size of the pool.</span><br><span class="line"># When the number of checked-out connections reaches the size set in pool_size,</span><br><span class="line"># additional connections will be returned up to this limit.</span><br><span class="line"># When those additional connections are returned to the pool, they are disconnected and discarded.</span><br><span class="line"># It follows then that the total number of simultaneous connections the pool will allow is pool_size + max_overflow,</span><br><span class="line"># and the total number of &quot;sleeping&quot; connections the pool will allow is pool_size.</span><br><span class="line"># max_overflow can be set to -1 to indicate no overflow limit;</span><br><span class="line"># no limit will be placed on the total number of concurrent connections. Defaults to 10.</span><br><span class="line">sql_alchemy_max_overflow &#x3D; 10</span><br><span class="line"></span><br><span class="line"># The SqlAlchemy pool recycle is the number of seconds a connection</span><br><span class="line"># can be idle in the pool before it is invalidated. This config does</span><br><span class="line"># not apply to sqlite. If the number of DB connections is ever exceeded,</span><br><span class="line"># a lower config value will allow the system to recover faster.</span><br><span class="line">sql_alchemy_pool_recycle &#x3D; 1800</span><br><span class="line"></span><br><span class="line"># Check connection at the start of each connection pool checkout.</span><br><span class="line"># Typically, this is a simple statement like “SELECT 1”.</span><br><span class="line"># More information here: https:&#x2F;&#x2F;docs.sqlalchemy.org&#x2F;en&#x2F;13&#x2F;core&#x2F;pooling.html#disconnect-handling-pessimistic</span><br><span class="line">sql_alchemy_pool_pre_ping &#x3D; True</span><br><span class="line"></span><br><span class="line">sql_alchemy_pool_size &#x3D; 5</span><br><span class="line"></span><br><span class="line"># The maximum overflow size of the pool.</span><br><span class="line"># When the number of checked-out connections reaches the size set in pool_size,</span><br><span class="line"># additional connections will be returned up to this limit.</span><br><span class="line"># When those additional connections are returned to the pool, they are disconnected and discarded.</span><br><span class="line"># It follows then that the total number of simultaneous connections the pool will allow is pool_size + max_overflow,</span><br><span class="line"># and the total number of &quot;sleeping&quot; connections the pool will allow is pool_size.</span><br><span class="line"># max_overflow can be set to -1 to indicate no overflow limit;</span><br><span class="line"># no limit will be placed on the total number of concurrent connections. Defaults to 10.</span><br><span class="line">sql_alchemy_max_overflow &#x3D; 10</span><br><span class="line"></span><br><span class="line"># The SqlAlchemy pool recycle is the number of seconds a connection</span><br><span class="line"># can be idle in the pool before it is invalidated. This config does</span><br><span class="line"># not apply to sqlite. If the number of DB connections is ever exceeded,</span><br><span class="line"># a lower config value will allow the system to recover faster.</span><br><span class="line">sql_alchemy_pool_recycle &#x3D; 1800</span><br><span class="line"></span><br><span class="line"># Check connection at the start of each connection pool checkout.</span><br><span class="line"># Typically, this is a simple statement like “SELECT 1”.</span><br><span class="line"># More information here: https:&#x2F;&#x2F;docs.sqlalchemy.org&#x2F;en&#x2F;13&#x2F;core&#x2F;pooling.html#disconnect-handling-pessimistic</span><br><span class="line">sql_alchemy_pool_pre_ping &#x3D; True</span><br></pre></td></tr></table></figure><p>该配的都配置上了，因为我们的任务是一天跑一次，查了下数据库变量 <code>waits_timeout</code> 是 <code>28800</code> ，所以直接改成25个小时。</p><p>到了第二天发现还是报这个错，很奇怪该配的都配上了，到底是哪里的问题？</p><p>仔细翻下报错日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File &quot;&#x2F;usr&#x2F;local&#x2F;python38&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;celery&#x2F;backends&#x2F;database&#x2F;__init__.py&quot;, line 107, in _store_result</span><br><span class="line">    task &#x3D; list(session.query(Task).filter(Task.task_id &#x3D;&#x3D; task_id))</span><br></pre></td></tr></table></figure><p>难道 <code>Airflow</code> 的 <code>sqlalchemy</code> 配置对 <code>celery</code> 不生效？</p><p>翻阅下源码发现果然 <code>Airflow</code> 配置的 <code>sqlalchemy</code> 只对 <code>Airflow</code> 生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app &#x3D; Celery(</span><br><span class="line">    conf.get(&#39;celery&#39;, &#39;CELERY_APP_NAME&#39;),</span><br><span class="line">    config_source&#x3D;celery_configuration)</span><br></pre></td></tr></table></figure><p>在继续翻阅 <code>Celery</code> 文档看有没有办法配置</p><blockquote><p>database_short_lived_sessions<br />Default: Disabled by default.</p><p>Short lived sessions are disabled by default. If enabled they can drastically reduce performance, especially on systems processing lots of tasks. This option is useful on low-traffic workers that experience errors as a result of cached database connections going stale through inactivity. For example, intermittent errors like (OperationalError) (2006, ‘MySQL server has gone away’) can be fixed by enabling short lived sessions. This option only affects the database backend.</p></blockquote><p>文档告知通过<code>database_short_lived_sessions</code> 参数就可以避免这个问题，但是新的问题又来了，如何在 <code>Airflow</code> 中配置额外的 <code>Celery</code> 配置呢？</p><h3 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h3><p>找到以下文件拷贝到 <code>DAGS</code> 目录下，重新命名为 <code>my_celery_config</code> 随便起</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python&#x2F;Python37&#x2F;site-packages&#x2F;airflow&#x2F;config_templates&#x2F;default_celery.py</span><br></pre></td></tr></table></figure><p>修改 <code>Airflow.cfg</code> 配置<br />找到 <code>celery_config_options</code> 将配置改为<br />刚才起的名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery_config_options &#x3D; my_celery_config.DEFAULT_CELERY_CONFIG</span><br></pre></td></tr></table></figure><p>在 <code>my_celery_config</code> 文件中的 <code>DEFAULT_CELERY_CONFIG</code> dict 中就可以随便加自己需要的 <code>Celery</code> 配置</p>]]></content>
    
    <summary type="html">
    
      Airflow 使用 Celery 时，如何添加 Celery 配置
    
    </summary>
    
    
      <category term="tool" scheme="https://fantasylion.github.io/categories/tool/"/>
    
    
      <category term="tool" scheme="https://fantasylion.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>Windows 本地搭建 Airflow 开发环境</title>
    <link href="https://fantasylion.github.io/tool/2019-11-25-airflow-remote-dev/"/>
    <id>https://fantasylion.github.io/tool/2019-11-25-airflow-remote-dev/</id>
    <published>2020-01-06T16:00:00.000Z</published>
    <updated>2020-01-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><p>因为 Airflow 无法在windows搭建开发环境导致开发过程比较麻烦。下面提供一个方法用来在windows环境中debug。以下方法的前提是在 Pycharm IDE中开发</p><h4 id="第一步本地开启-debug-端口"><a class="markdownIt-Anchor" href="#第一步本地开启-debug-端口"></a> 第一步：本地开启 debug 端口</h4><p><img src="https://note.youdao.com/yws/api/personal/file/AF4C7F7C9CEA4981AB96EBB4CAE8D671?method=download&amp;shareKey=288bb922aec53c40f32eda03527a0a3d" alt="图1" /></p><p><img src="https://note.youdao.com/yws/api/personal/file/223F24C94A664EDE8B9B8B47907C5940?method=download&amp;shareKey=7b8027d61c707934baef6bfa4eeb38b4" alt="图2" /></p><p><img src="https://note.youdao.com/yws/api/personal/file/4AA9A0DA28A447A8A273A09C4F013CCB?method=download&amp;shareKey=fe00c67b07e9ba4db5f37fd8275fe346" alt="图3" /></p><p><img src="https://note.youdao.com/yws/api/personal/file/13C3E5878F3549CF83B26A17DD756400?method=download&amp;shareKey=80cfb246dbf60b87631bce27eaf652bc" alt="图4" /></p><h4 id="第二步给远程服务器安装pydevd模块"><a class="markdownIt-Anchor" href="#第二步给远程服务器安装pydevd模块"></a> 第二步：给远程服务器安装<code>pydevd</code>模块</h4><p>图2中的断点代码拷贝到服务器后无法立即生效还会报错，因为缺少了模块。<br />在 pycharm 安装目录下找到 <code>pycharm-debug.egg</code> 文件，放到远程服务器python目录下我放到了<code>site-package</code>目录下，pycharm-debug-py3k.egg 提供给python3版本使用，我这边是2.7用第一个即可<br /><img src="https://note.youdao.com/yws/api/personal/file/526F8AE46EA6411EAC2B0A168CF200BD?method=download&amp;shareKey=8a99c3eb58b6cda8c008f617358cf3ab" alt="图6" /></p><p>完成以上步骤可以在服务器<code>python</code>中执行下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pydevd</span><br></pre></td></tr></table></figure><p>如果没有报错说明安装成功</p><h4 id="第三步开始debug"><a class="markdownIt-Anchor" href="#第三步开始debug"></a> 第三步：开始debug</h4><p>点击右上角小虫启动，console 中出现 waiting 后说明开始等待远程的debug请求了<br /><img src="https://note.youdao.com/yws/api/personal/file/F3E9D418B3BD4886AB4513820D846898?method=download&amp;shareKey=60d802a2b06d092ad1ea1b7f2d0549b8" alt="图7" /></p><p>运行远程服务器的代码后，本地对应代码将进入对应代码段<br /><img src="https://note.youdao.com/yws/api/personal/file/F02A108263F24069BC0B40EF02C148CF?method=download&amp;shareKey=6f7c67705cb87decd66d32c876b7c494" alt="图9" /></p><p><strong>参考资料：</strong></p><p><a href="https://blog.jetbrains.com/pycharm/2010/12/python-remote-debug-with-pycharm/" target="_blank" rel="noopener">pycharm官网远程debug教程</a></p><p><strong>Linux和Mac搭建开发环境资料：</strong></p><p><a href="https://github.com/apache/airflow/blob/master/LOCAL_VIRTUALENV.rst" target="_blank" rel="noopener">https://github.com/apache/airflow/blob/master/LOCAL_VIRTUALENV.rst</a><br /><a href="https://github.com/apache/airflow/blob/master/BREEZE.rst#testing-and-debugging-in-breeze" target="_blank" rel="noopener">https://github.com/apache/airflow/blob/master/BREEZE.rst#testing-and-debugging-in-breeze</a></p>]]></content>
    
    <summary type="html">
    
      Windows 本地搭建 Airflow 开发环境
    
    </summary>
    
    
      <category term="tool" scheme="https://fantasylion.github.io/categories/tool/"/>
    
    
      <category term="tool" scheme="https://fantasylion.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 Enterprise Architect 画 UML</title>
    <link href="https://fantasylion.github.io/Tools/2019-01-17-How-to-use-EA/"/>
    <id>https://fantasylion.github.io/Tools/2019-01-17-How-to-use-EA/</id>
    <published>2019-01-16T16:00:00.000Z</published>
    <updated>2019-01-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="重识-ea-enterprise-architect"><a class="markdownIt-Anchor" href="#重识-ea-enterprise-architect"></a> 重识 EA (Enterprise Architect)</h3><p>公司使用的 OMS 是从外面买过来后进行二次开发的，而对方给到的技术文档不够全面，有很大部分的业务细节需要自己看代码梳理。想起来之前 IBM Developer 看过一篇关于<a href="https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/index.html" target="_blank" rel="noopener"> Tomcat 原理</a>的文章，文章里面用到了很多建模语言（UML）去描述代码逻辑结构。这不仅看起来高大上而且逻辑清晰易懂，就想着将上学那会学的 UML 重新捡起来，学着用 UML 去梳理代码逻辑。</p><p>记得上学那会写 UML 的工具叫 EA ，这两天我就给扒拉出来重新装上又学了一遍。下面就讲下 EA 的使用</p><h3 id="ea-简介"><a class="markdownIt-Anchor" href="#ea-简介"></a> EA 简介</h3><p>EA 的英文全称叫 Enterprise Architect，是由澳大利亚公司 Sparx Systems 开发的一款基于 OMG UML 的可视化模型与设计工具，提供了对软件系统的设计和构建、业务流程建模和基于领域建模的支持，被企业和组织不仅应用于对系统的建模，还用于推进模型在整个应用程序开发周期中实现。不是我们玩游戏的那个 EA 哦！在官网的文档中还有看到 EA 可以跟 Eclipse 做无缝的对接，很可惜的是没有找到有跟 IDEA 相关的。</p><h3 id="ea-安装下载"><a class="markdownIt-Anchor" href="#ea-安装下载"></a> EA 安装下载</h3><p>安装 EA 其实很简单，Windows 系统在<a href="https://sparxsystems.com/products/ea/trial/request.html" target="_blank" rel="noopener">官网下载</a>下来后直接下一步下一步即可。但是 EA 是需要付费的，当然你也可以选择教学版的或者免费试用30天，这里我给大家提供一个密钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">834735814236</span><br></pre></td></tr></table></figure><p>这个 Key 目前本人在使用，我的 EA 版本是 14.0.1422。</p><p>我之前安装的时候被我不小心跳过了输入密钥的环节，因为英文不好后来找输入密钥的窗口找了很久，这里记录下方便遇到跟我一样问题的朋友参考。</p><p>点击左上角Start --&gt; Help --&gt; Register and Manage Your License Keys --&gt; 在输入框中输入 key。<br /><img src="https://fantasylion.github.io/images/posts/find_register_key_step1.jpg" alt="" /></p><p>在弹出的输入框中输入key，我这里窗口 title 显示 Upgrade Key 应该是因为我已经注册过 key 的原因<br /><img src="https://fantasylion.github.io/images/posts/find_register_key_step2.jpg" alt="" /></p><h3 id="ea-的使用"><a class="markdownIt-Anchor" href="#ea-的使用"></a> EA 的使用</h3><p>既然 EA 是 UML 的可视化模型与设计工具，当然是支持 UML 常见的模型，但是目前我也是刚开始使用 UML 这里只记录下怎么画用例模型中的时序图。</p><p>常见 UML 模型</p><ul><li>业务过程模型</li><li>用例模型</li><li>动态模型</li><li>逻辑模型</li><li>组件模型</li><li>物理模型</li></ul><p>在 EA 安装完成后运行 EA，首先看到的应该是一张 Start Page。<br /><img src="https://fantasylion.github.io/images/posts/EA_start_page.png" alt="" /></p><p>如上图所示，正常打开后分这么几个区域，最上方显示的是各种功能选项下方一般有多个区域可以通过拖动自定义摆放位置。 图中最左边的 Toolbox 是模型的工具栏主要放置当前编辑模型的组件，中间大块的是编辑区以选项卡的方式呈现可以在最下方点击不同选项卡切换编辑区，右边数来第二个区域显示了三个模块 Diagram Properties 、 Resources 、 Project Browser 也是通过选项卡的方式呈现，最后一个 Portals 可以显示指南书、学习、状态查询…</p><h4 id="创建一个项目"><a class="markdownIt-Anchor" href="#创建一个项目"></a> 创建一个项目</h4><p>点击编辑区 Start Page 选项卡中的 New File 选项，在选择项目目录输入文件名点击保存。或者在最上方区域的左上角点击 EA 图标后点击 New Project 创建一个新的项目。</p><p>在项目创建成功后开始创建 Model ，点击最上方区域右下角栅格式的图标 -&gt; 点击 Add Model 后 -&gt; 在编辑区选择 UML 并选择相应模型（这演示我选择的是时序图 Sequence Diagrams -&gt; Starter Sequence Diagram） -&gt; 点击 Create Pattern(s)</p><p>步骤如下图所示<br /><img src="https://fantasylion.github.io/images/posts/create_model_step1.jpg" alt="" /></p><p>下图为编辑区操作，这里 Create Pattern(s) 按钮在图的左下角忘记圈出来了<br /><img src="https://fantasylion.github.io/images/posts/create_model_step2.jpg" alt="" /></p><p>创建 Model 成功后在 Project Browser 中可以看到已经成功创建了一个 Model (Starter Sequence Diagram)，第三级的为当前包含的组件，点击下图中画红圈选项在编辑区中将会打开 Starter Sequence Diagram 开始编辑<br /><img src="https://fantasylion.github.io/images/posts/edit_model_step1.jpg" alt="" /></p><p>编辑区如下图所示<br /><img src="https://fantasylion.github.io/images/posts/edit_model_step_2.jpg" alt="" /></p><h4 id="如何编辑设计模型"><a class="markdownIt-Anchor" href="#如何编辑设计模型"></a> 如何编辑设计模型</h4><p>将 ToolBox 中的相应的组件拖拽到编辑区中即可生成，在编辑区双击相应的主键将会弹出组件的属性框，在属性框可以修改组件名称、类型、结构等属性，这里就不做详细的记录。</p><h4 id="如何将编辑完的模型导出图片"><a class="markdownIt-Anchor" href="#如何将编辑完的模型导出图片"></a> 如何将编辑完的模型导出图片</h4><p>点击最上方区域的 Publish 选项 -&gt; Image -&gt; Save to File 写好图片名和格式保存到相应目录中，或者选择 Save to clipboard 保存到粘贴板中。</p><p>如下图：</p><p><img src="https://fantasylion.github.io/images/posts/pubish_step1.jpg" alt="" /></p><h3 id="最后展示下最终的成果"><a class="markdownIt-Anchor" href="#最后展示下最终的成果"></a> 最后展示下最终的成果</h3><p><img src="https://fantasylion.github.io/images/posts/publish_step2.png" alt="" /></p>]]></content>
    
    <summary type="html">
    
      EA 的英文全称叫 Enterprise Architect，是由澳大利亚公司 Sparx Systems 开发的一款基于 OMG UML 的可视化模型与设计工具，提供了对软件系统的设计和构建、业务流程建模和基于领域建模的支持，被企业和组织不仅应用于对系统的建模，还用于推进模型在整个应用程序开发周期中实现。
    
    </summary>
    
    
      <category term="Tools" scheme="https://fantasylion.github.io/categories/Tools/"/>
    
    
      <category term="uml" scheme="https://fantasylion.github.io/tags/uml/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper 应用指南中文版</title>
    <link href="https://fantasylion.github.io/zookeeper/2018-03-20-zookeeper-guide-chinese/"/>
    <id>https://fantasylion.github.io/zookeeper/2018-03-20-zookeeper-guide-chinese/</id>
    <published>2018-03-19T16:00:00.000Z</published>
    <updated>2018-03-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h1><h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p>本文档适合于希望利用ZooKeeper创建协调服务分布式应用程序的开发人员。本文包含了概念和实例。</p><p>文档的前四部分对各种ZooKeeper概念进行了深入的讨论。它可以让你更深入的了解ZooKeeper是怎么运行的和怎么去使用它。这里不包含ZooKeeper的源码，但是这里详细描述了分布式计算相关的问题。这四部分分别为：</p><ul><li>ZooKeeper 数据模型</li><li>ZooKeeper 会话</li><li>ZooKeeper 观察者（订阅者）</li><li>一致性保证</li></ul><p>以下为后四部分描述了编程设计的信息：</p><ul><li>构建模块：ZooKeeper 操作指南</li><li>绑定</li><li>程序结构和一些简单的案例</li><li>陷阱：常见的问题和故障排除</li></ul><p>本文后提供一份附件包含了一些其他关于 ZooKeeper 的信息。</p><p>本文中大部分信息都是作为独立参考资料编写的。在你开始写第一个ZooKeeper应用之前，你最好先阅读下这两部分文章，<code>ZooKeeper 数据模型</code>和 <code>ZooKeeper 基础操作</code>。当然<code>简单示例</code>对你理解 ZooKeeper 客户端应用也有很大帮助。</p><h2 id="zookeeper-数据模型"><a class="markdownIt-Anchor" href="#zookeeper-数据模型"></a> ZooKeeper 数据模型</h2><p>ZooKeeper 使用分级命名规则，看起来就像一个分布式文件系统。它们唯一的区别是 ZooKeeper 命名空间中的每个节点都可以拥有相关数据和子节点。就像是一个文件系统它允许一个文件可以当做目录来用。节点的路径可以用 canonical、绝对路径、斜线路径表示；这里不可以使用相对路径。任何unicode字符都可以在路径中被使用但是需要遵从一下规则：</p><ul><li><code>null</code> 字符(<code>\u0000</code>)不能被用在路径名上。（这是因为使用 C 编译导致的）</li><li>以下几个字符不允许使用：<code>\ud800 -uF8FFF</code>, <code>\uFFF0 - uFFFF</code>。</li><li><code>“.”</code> 字符可以被用在路径名上，但是 <code>“.”</code> 和 <code>“..”</code> 不能用于单独指示一个节点，因为ZooKeeper不能使用相对路径。后面这几个路径被认为是无效的：<code>&quot;/a/b/./c&quot;</code> or <code>&quot;/a/b/../c&quot;</code>。</li><li>zookeeper 是系统保留字符，不允许被使用。</li></ul><h3 id="znodes"><a class="markdownIt-Anchor" href="#znodes"></a> ZNodes</h3><p>ZooKeeper 树中的任何一个节点都依赖于 <code>ZNode</code>。<code>ZNode</code> 维护一个统计结构，这个结构包含了修改数据和修改ACL的版本号。当然这个统计结构也有一个时间戳。这个版本号和时间戳一起使用可以用来 ZooKeeper 去验证缓存和定位更新。每当有一个znode的数据被修改，这个版本号就会增加一个值。比如：当客户端检索数据的时候它也会收到这个数据的版本号。当一个客户端执行修改和删除的时候，它必须提供一个修改后的节点数据的版本号。如果这个版本号跟实际的数据版本号不匹配，本次的更新将会失败。（这个行为可以被覆盖。详情请看…）</p><table><thead><tr><th style="text-align:left">Note</th></tr></thead><tbody><tr><td style="text-align:left">在分布式应用引擎上，节点可以是指一台主机、一个服务、集群中的某个成员、一个客户端进程等等。在 ZooKeeper 文档中，<code>ZNodes</code> 指一个数据节点。<code>Servers</code> 指启动ZooKeeper服务的服务器；<code>quorum peers</code> 指服务集群； 客户端指任何一台主机或者使用 ZooKeeper 服务的进程</td></tr></tbody></table><p><code>znode</code> 是 ZooKeeper 的主要概念程序员需要认真了解。Znodes有几个特性值得在此提及：</p><h4 id="zookeepr-监控"><a class="markdownIt-Anchor" href="#zookeepr-监控"></a> ZooKeepr 监控</h4><p>客户端可以在 <code>znodes</code> 上设置监控。如果被监控节点有修改，<code>znode</code> 将触发监控然后再清除这个监控。当监控被触发后，ZooKeeper 将会发送通知到客户端。更多关于监控可以在 <code>ZooKeeper 监控</code> 部分找到。</p><h4 id="数据访问"><a class="markdownIt-Anchor" href="#数据访问"></a> 数据访问</h4><p>在一个命名空间下每个 <code>Znode</code> 数据存储的读写都是原子化的。读取操作将获取到所有这个 <code>znode</code> 相关的字节数据，写入操作将会替换所有数据。每个节点都会有一个访问控制列表(ACL)用于限制谁可以做什么。</p><p>ZooKeeper 并不是设计用来当做数据库或者大量的数据存储。相反，它管理协调数据。这个数据可以通过一个 form 表单配置、状态信息、集合点等形式出现。各种形式的协调数据的共同特点是它们相对较小：以千字节为单位。ZooKeeper的客户端还有服务实例都要检查并确保每个 Znode 的数据要小于1M，并且每个数据都必须小于平均值。<br />操作相对较大的数据会比其他数据时间要长，并且由于需要花费额外多的时间在网络传输上和存入存储媒介中会导致操作延时。如果真的需要比较大的数据存储，通常采用大容量的存储系统去处理这些数据，类似 NFS、HDFS ，然后将存储指针指向 ZooKeeper 的存储位置。</p><h4 id="临时节点"><a class="markdownIt-Anchor" href="#临时节点"></a> 临时节点</h4><p>ZooKeeper 当然也临时节点的概念。这些 Znodes 生命周期同   保持一致，当 session 创建的时候 Znodes 将被激活。当 session 结束 这个 Znode 也同时将被删除。正是由于这个行为临时节点不允许有子节点。</p><h4 id="序列节点唯一命名"><a class="markdownIt-Anchor" href="#序列节点唯一命名"></a> 序列节点–唯一命名</h4><p>在创建一个Znode的时候你也可以要求 ZooKeeper 在路径的后面追加一个递增的计数器。这个计数器相对于 Znode 是唯一的。这个计数器格式为 %010d – 这是一个10位数，用0占位（计数器用这个格式排序），“举例：<path>000000000001”。点击<a href="https://zookeeper.apache.org/doc/r3.4.11/recipes.html#sc_recipes_Queues" target="_blank" rel="noopener">Queue Recipe</a>查看使用这个功能的例子。注意：用于存储下一个序列号的计数器是由父节点维护的带符号整型（4字节），计数器在增加到2147483647之后会溢出（导致名称为“<path> -2147483647”）。</p><h3 id="zookeeper-时间"><a class="markdownIt-Anchor" href="#zookeeper-时间"></a> ZooKeeper 时间</h3><p>ZooKeeper 有很多方法去追踪这个时间</p><ul><li><strong>xid</strong><br><br />ZooKeeper 状态有任何修改都将会收到一个 zxid(ZooKeeper Transaction Id) 的标记。这个暴露了 ZooKeeper 所有的修改排序。每次修改都将会有一个唯一的   zxid，如果 zxid1 小于 zxid2 那么就可以认为 zxid1 是发生在 zxid2 之前。</li><li><strong>Version numbers</strong><br><br />所有对节点的修改都将造成这个节点的版本号增加。这三个版本数字就是version（znode数据修改的数量），cversion（znode子节点修改的数量），aversion（znode  修改的数量）。</li><li><strong>Ticks</strong><br><br />当使用多服务的 ZooKeeper，服务将使用 ticks 去定义事件时间，像（上传状态，会话超时，管道连接超时等等）。Tick 只会间接的暴露最小会话时间（两倍的 Tick time）；如果一个客户端的请求超时时间小于这个会话时间，服务器将告知客户端这个超时时间以最小的超时时间为准。</li><li><strong>Real time</strong><br><br />ZooKeeper 不使用真实的时间或锁定时间，除了将时间戳放到 znode 的创建和修改的统计结构中。</li></ul><h3 id="zookeeper-统计结构"><a class="markdownIt-Anchor" href="#zookeeper-统计结构"></a> ZooKeeper 统计结构</h3><p>ZooKeeper 每个节点的统计结构由以下几个字段组成：</p><ul><li><strong>czxid</strong><br><br />表示造成这次 znode 创建的时间。</li><li><strong>mzxid</strong><br><br />znode 最后的修改时间。</li><li><strong>pzxid</strong><br><br />znode 子节点最后的修改时间。</li><li><strong>ctime</strong><br><br />znode 创建时间（以毫秒为单位）。</li><li><strong>mtime</strong><br><br />znode 最后的修改时间（以毫秒为单位）。</li><li><strong>version</strong><br><br />znode 数据的修改次数。</li><li><strong>cversion</strong><br><br />znode 子节点的修改次数</li><li><strong>aversion</strong><br><br />znode 的修改次数</li><li><strong>ephemeralOwner</strong><br><br />如果是暂时节点，表示这个 znode 的主人的 session id 。如果不是，这个值为0.</li><li><strong>dataLength</strong><br><br />znode 数据字段的长度。</li><li><strong>numChildren</strong><br><br />znode 有多少子节点</li></ul><h2 id="zookeeper-会话"><a class="markdownIt-Anchor" href="#zookeeper-会话"></a> ZooKeeper 会话</h2><p>ZooKeeper 客户端通过语言绑定于服务创建握手来建立与 ZooKeeper 服务的会话。一旦创建，句柄就会以CONNECTING状态开始，并且客户端库尝试连接到组成ZooKeeper服务的服务器之一，此时它将切换到CONNECTED状态。在正常的操作时候将会是这两者状态之一。如果发生一个不可逆转的错误事件，像 session 过期或者认证失败，再或者应用直接关闭了句柄，这个句柄将切换到 closed 状态。下面的图表展示了 ZooKeeper 客户端事物的处理状态：<br /><img src="http://fantasylion.github.io/images/state_dia.jpg" alt="结构图" /><br><br />要创建客户端会话，应用程序代码必须提供一个连接字符串，其中包含以逗号分隔的host：port对列表，每个对应于一个ZooKeeper服务器（举例：“127.0.0.1:4545” 或者 “127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002”）。ZooKeeper 客户端库将随机挑选一台服务器然后尝试去链接它。如果链接失败或者由于某些原因服务端到客户端断开链接，客户端都会自动尝试链接列表中的下一个服务，知道链接重新建立。</p><p><strong>3.2.0 版本添加</strong><br><br />可选后缀 “chroot” 可以追加到连接字符串后面。这会运行客户端命令以相对ROOT路径的形式（类似unix系统的chroot命令）。如果要举例的话看起来就像：“127.0.0.1:4545/app/a” 或 “127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002/app/a” 这样客户端就会以 “app/a” 为根目录，所有的路径都会相对于这个根目录。比如 “/foo/bar” 返回的结果将是运行 “/app/a/foo/bar” 得到（从服务器的角度来看）。这个功能在多租户环境真的很有用，每个 ZooKeeper 服务的用户可以有不同的根目录。这使得复用变得简单，用户可以将他的应用程序根目录编码成 “/” ，但是实际的位置可以在发布的时候在去决定。</p><p>当客户端获取到连接 ZooKeeper 服务的句柄，ZooKeeper 将创建一个以64位的数字表示的 ZooKeeper session，派送到客户端。如果客户端连接到一个不同的 ZooKeeper 服务，它将会发送一个 session id 作为连接握手的一个部分。为了保证安全，服务端会给 session id 创建一个秘密，任何的 ZooKeeper 服务都可以去验证。这个密码将会在客户端建立会话的时候和 session id 一起发送到客户端。客户端随时都可以发送这个密码和 session id 跟一个新的服务重新建立会话。</p><p>ZooKeeper 客户端库用来创建 ZooKeeper session超时的参数是用毫秒表示。客户端发送一个超时请求，服务端将响应一个超时给到客户端。现在的实例要求超时至少是两倍 tickTime （这个可以在服务端配置）或者大于20倍的tickTime。ZooKeeper 客户端API允许访问协商超时时间。</p><p>如果客户端是 ZooKeeper 服务集群中的分区，它将会开始搜索在 session 创建期间指定的服务器列表。实际上，当客户端和最后一个服务器之间重新建立起连接， session 将会切换到 “connected” 状态（如果重连在超时时间范围内）或者切换到 “expired” 状态（如果重连时间已经超出超时时间）。为断开链接创建一个新的 session 对象这是一个不明智的决定（一个新的 ZooKeeper类 或 zookeeper 对象在 C 绑定中处理 ）。ZooKeeper 客户端库将会帮你自动重新连接。特别是，我们在客户端库中内置了启发式技术，以处理诸如“群效应”等等… 当你被通知到 session 过期（强制性）的时候，只能创建一个新的 session。</p><p>session 过期通过 ZooKeeper 集群自己管理，不是通过客户端。当 ZooKeeper 客户端建立一个集群 session 它将提供一个详细的 timeout 值。这个值是集群用来确定客户端的 session 何时过期。当集群没有收到来自客户端指定的过期时间（比如：没有心跳）将会直接过期。在 session 过期时集群将会删除任何/所有这个  session 所拥有的临时节点并且立刻通知所有连接的客户端这个事情（任何监控这些节点的客户端）。在这个时候会话过期的时间点于集群是一直保持断开状态，session 过期不会被通知到直到它可以重新连接到集群。客户端将会一直保持断开状态一直到重新 TCP 连接到集群，在这个时间点上如果 session 过期，监控者将收到 session 过期的通过。</p><p>举一个会话过期监控者看到的会话过期状态转换的例子：</p><ol><li><p>‘connected’ : session is established and client is communicating with cluster (client/server communication is operating properly)</p></li><li><p>… client is partitioned from the cluster</p></li><li><p>‘disconnected’ : client has lost connectivity with the cluster</p></li><li><p>… time elapses, after ‘timeout’ period the cluster expires the session, nothing is seen by client as it is disconnected from cluster</p></li><li><p>… time elapses, the client regains network level connectivity with the cluster</p></li><li><p>‘expired’ : eventually the client reconnects to the cluster, it is then notified of the expiration</p></li></ol><p>ZooKeeper 调用会话建立的另外一个参数是默认的 watchers。当客户端任何一个改变状态的事件发生 watchers 都是收到通知。举个例子：如果客户端丢失了跟服务器端的连接客户端将收到通知，或者如果客户端的 session 过期等等… 这个 watcher 应该考虑到初始化状态为断开状态。（比如：在客户端库把状态变化的事件发送到 watcher 之前）。在新的连接案例中，第一个发送到 watcher 的事件一般是 session 连接事件。</p><p>ZooKeeper 通过客户端发送请求保持 session 不过期。如果让 session 保持一段时间的空闲将使得 session 过期，所以客户端会一直发送一个 ping 请求保证 session 一直存活。这个 ping 请求不仅仅只是让 ZooKeeper 服务知道这个客户端还活着，还可以让客户端验证它连接的 ZooKeeper 服务是否一直活着。这个 ping 请求的时间安排的足够合理保证有充足的时间去检测断开的连接和重新去连接一个新的服务。</p><p>一旦一个到服务器端的连接成功被建立，基本上有两种情况客户端库生成一个 connectionloss（这个返回码会在 C binding 中， java 的话会在异常里面 – 看 API 文档会有详细的介绍）如果有同步或者异步的操作被执行而且有以下情况之一：</p><ol><li><p>应用程序在一个 session 过期或者无效的服务器上执行一项操作。</p></li><li><p>在客户端在等待服务响应的时候，服务断开连接，比如：在等待异步调用的响应的时候。</p></li></ol><p><strong>3.2.0 版本添加 – SessionMovedException.</strong><br><br />这是一个内部的异常，通常不会被客户端看到。</p><p><strong>Added in 3.2.0 – SessionMovedException.</strong> There is an internal exception that is generally not seen by clients called the SessionMovedException. This exception occurs because a request was received on a connection for a session which has been reestablished on a different server. The normal cause of this error is a client that sends a request to a server, but the network packet gets delayed, so the client times out and connects to a new server. When the delayed packet arrives at the first server, the old server detects that the session has moved, and closes the client connection. Clients normally do not see this error since they do not read from those old connections. (Old connections are usually closed.) One situation in which this condition can be seen is when two clients try to reestablish the same connection using a saved session id and password. One of the clients will reestablish the connection and the second client will be disconnected (causing the pair to attempt to re-establish its connection/session indefinitely).</p><h2 id="zookeeper-监控"><a class="markdownIt-Anchor" href="#zookeeper-监控"></a> ZooKeeper 监控</h2><h3 id="监控语义"><a class="markdownIt-Anchor" href="#监控语义"></a> 监控语义</h3><h3 id="如何保障-zookeeper-订阅者"><a class="markdownIt-Anchor" href="#如何保障-zookeeper-订阅者"></a> 如何保障 ZooKeeper 订阅者</h3><h3 id="关于订阅者的事项"><a class="markdownIt-Anchor" href="#关于订阅者的事项"></a> 关于订阅者的事项</h3><h2 id="zookeeper-权限控制-acl"><a class="markdownIt-Anchor" href="#zookeeper-权限控制-acl"></a> ZooKeeper 权限控制 (ACL)</h2><h3 id="acl权限"><a class="markdownIt-Anchor" href="#acl权限"></a> ACL权限</h3><h4 id="acl内建方案"><a class="markdownIt-Anchor" href="#acl内建方案"></a> ACL内建方案</h4><h4 id="zookeeper-c-客户端-api"><a class="markdownIt-Anchor" href="#zookeeper-c-客户端-api"></a> ZooKeeper C 客户端 API</h4><h2 id="插件式的-zookeeper-认证"><a class="markdownIt-Anchor" href="#插件式的-zookeeper-认证"></a> 插件式的 ZooKeeper 认证</h2><h2 id="一致性保证"><a class="markdownIt-Anchor" href="#一致性保证"></a> 一致性保证</h2><h2 id="绑定"><a class="markdownIt-Anchor" href="#绑定"></a> 绑定</h2><h3 id="java-绑定"><a class="markdownIt-Anchor" href="#java-绑定"></a> Java 绑定</h3><h3 id="c-绑定"><a class="markdownIt-Anchor" href="#c-绑定"></a> C 绑定</h3><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><h4 id="构建属于你的-c-客户端"><a class="markdownIt-Anchor" href="#构建属于你的-c-客户端"></a> 构建属于你的 C 客户端</h4><h2 id="构建模块zookeeper-操作指南"><a class="markdownIt-Anchor" href="#构建模块zookeeper-操作指南"></a> 构建模块：ZooKeeper 操作指南</h2><h3 id="解决错误"><a class="markdownIt-Anchor" href="#解决错误"></a> 解决错误</h3><h3 id="连接-zookeeper"><a class="markdownIt-Anchor" href="#连接-zookeeper"></a> 连接 ZooKeeper</h3><h3 id="读取操作"><a class="markdownIt-Anchor" href="#读取操作"></a> 读取操作</h3><h3 id="写入操作"><a class="markdownIt-Anchor" href="#写入操作"></a> 写入操作</h3><h3 id="处理订阅者"><a class="markdownIt-Anchor" href="#处理订阅者"></a> 处理订阅者</h3><h3 id="混杂-zookeeper-操作"><a class="markdownIt-Anchor" href="#混杂-zookeeper-操作"></a> 混杂 ZooKeeper 操作</h3><h2 id="程序结构简单案例"><a class="markdownIt-Anchor" href="#程序结构简单案例"></a> 程序结构（简单案例）</h2><h2 id="陷阱常见问题和故障排除"><a class="markdownIt-Anchor" href="#陷阱常见问题和故障排除"></a> 陷阱：常见问题和故障排除</h2>]]></content>
    
    <summary type="html">
    
      使用ZooKeeper开始分布式应用
    
    </summary>
    
    
      <category term="zookeeper" scheme="https://fantasylion.github.io/categories/zookeeper/"/>
    
    
      <category term="zookeeper" scheme="https://fantasylion.github.io/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Ebbinghaus Forgetting Curve</title>
    <link href="https://fantasylion.github.io/English/2018-01-31-The-Shawshank-Redemption/"/>
    <id>https://fantasylion.github.io/English/2018-01-31-The-Shawshank-Redemption/</id>
    <published>2018-01-30T16:00:00.000Z</published>
    <updated>2018-01-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="the-shawshank-redemption"><a class="markdownIt-Anchor" href="#the-shawshank-redemption"></a> The Shawshank Redemption</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line">Mr.Dufresne, describe the confrontation you had with your wife the night she wwas murdered.</span><br><span class="line"></span><br><span class="line">It was very bitter.She said she was glad I knew that she hated all the sneaking around. </span><br><span class="line">And she said that she wanted a divorce in Reno.</span><br><span class="line"></span><br><span class="line">What was your reponse?</span><br><span class="line"></span><br><span class="line">I told her I would not grant one.</span><br><span class="line"></span><br><span class="line">I&#39;ll see you in hell before I see you in Reno. Those were your words, according to your neighbors.</span><br><span class="line"></span><br><span class="line">If they say so. I really don&#39;t remember. I was upset.</span><br><span class="line"></span><br><span class="line">What Happened after you argued with your wife?</span><br><span class="line"></span><br><span class="line">She packed a bag. She packed a bag to go and stay with Mr.Quentin.</span><br><span class="line"></span><br><span class="line">Glenn Quentin, golf pro at the Snowden Hills Country Club whom you had discovered was your wife&#39;s lover. Did you follow</span><br><span class="line">her?</span><br><span class="line"></span><br><span class="line">I went to a few bars first. Later, I drove to his house to confront them. They weren&#39;t home. </span><br><span class="line">So I parked in the turnout and waited.[Some errors here]</span><br><span class="line"></span><br><span class="line">With what intention?</span><br><span class="line"></span><br><span class="line">I&#39;m not sure. I was confused, drunk, I think mostly I wanted to scare them.</span><br><span class="line"></span><br><span class="line">When they arrived, you went up to the house and murdered them.</span><br><span class="line"></span><br><span class="line">No, I was sobering up.</span><br><span class="line"></span><br><span class="line">I got back in the car and I drove home to sleep it off.</span><br><span class="line"></span><br><span class="line">Along the way, I threw my gun into the Royal River. I&#39;ve been very clear on this point.</span><br><span class="line"></span><br><span class="line">Well I get hazy where the cleaning woman shows up the following morning, and finds your wife in bed with her lover riddled</span><br><span class="line">with 38-caliber bullets. Does that strike you as a fantastic coincidence, or is it just me?</span><br><span class="line"></span><br><span class="line">Yes it dose.</span><br><span class="line"></span><br><span class="line">Yet you still maintain you threw your gun into the river before the murders took place. That&#39;s very convenient.</span><br><span class="line"></span><br><span class="line">It&#39;s the truth.</span><br><span class="line"></span><br><span class="line">The police dragged that river for three days, and nary a gun was found, so no comparison could be made between your</span><br><span class="line">gun and the bullets taken from the bloodstained corpses of the victims. And that also is very convenient.</span><br><span class="line">Isn&#39;s it, Mr,Dufresne?</span><br><span class="line"></span><br><span class="line">Since I am innocent of this crime.I find it decidedly inconvenient that the gun was nerver found.</span><br><span class="line"></span><br><span class="line">Ladied and gentlemen, you&#39;ve heard all the evidence.[Lost some words] We have the accused at the scene of the crime.</span><br><span class="line">We have footprints. Bullets on the ground bearing his fingerprints. A broken bourbon bottle, likewise with fingerprints.</span><br><span class="line">And most of all, We have a beautifull young woman and her lover lying dead in each other&#39;s arms. They had sinned.</span><br><span class="line">But was their crime so great as to merit a death sentence? While you think about that,</span><br><span class="line">think about this: A revoiver holds six bullets, not eight. I submit that this was not a hot-blooded crime of passion.</span><br><span class="line">That at least could be understood, if not condoned. NO! This was revenge of a much more brutal, cold-blooded nature, </span><br><span class="line">Consider this: Four bullets per victim Not six shots fired, but eight. That means that he fired the gun empty</span><br><span class="line">and then stopped to reload so that he could shoot each of them again. And extra bullet per lover right in the head.</span><br><span class="line"></span><br><span class="line">You strike me as a particularly icy and remoreseless man, Mr.Dufresne. It chills my blood just to look at you.</span><br><span class="line">By the power vested in me by the state of Maine. I hereby order you to sever two life sentences back-to-back</span><br><span class="line">on for each of your victims. So be it!</span><br><span class="line"></span><br><span class="line">Sit.</span><br><span class="line"></span><br><span class="line">We see you&#39;ve served 20 year of a life sentence?</span><br><span class="line"></span><br><span class="line">Yes, sir.</span><br><span class="line"></span><br><span class="line">Your feel you&#39;ve been rehabilitated?</span><br><span class="line"></span><br><span class="line">Yes sir. Absolutely, sir. I mean, I learned my lessson. I can honestly say that I&#39;m a changed man. </span><br><span class="line">I&#39;m no longer a danger to society. That&#39;s God&#39;s honest truth.</span><br><span class="line"></span><br><span class="line">Hey red, How&#39;d it go?</span><br><span class="line"></span><br><span class="line">Same old shit, different day.</span><br><span class="line"></span><br><span class="line">Yeah, I know how you feel.</span><br><span class="line"></span><br><span class="line">I&#39;m up for rejection next week.</span><br><span class="line"></span><br><span class="line">Yeah, I got rejected last week.</span><br><span class="line"></span><br><span class="line">It happens.</span><br><span class="line"></span><br><span class="line">Hey, Red, bump me a deck.</span><br><span class="line"></span><br><span class="line">Get out of my face, man! You&#39;re into me for five packs already.</span><br><span class="line"></span><br><span class="line">Four!-Five!</span><br><span class="line"></span><br><span class="line">There must be a con like me in every prison in America. I&#39;m the guy who can get it for you. Cigarettes, a bag of reefer,</span><br><span class="line">if that&#39;s your thing... A bottle of brandy to celebrate your kids high school graduation. Damn near anything within reason.</span><br><span class="line">Yes sir. I&#39;m a regular sears an Roebuck.So when Andy Dufresne came to me in 1949 and asked me to smuggle Rita Hayworth</span><br><span class="line">into the prison for him. I told him, &quot;No problem&quot;</span><br><span class="line"></span><br><span class="line">Officers to main gate. Officers to main gate. Secure main gate.</span><br><span class="line"></span><br><span class="line">Andy came to Shawshank Prison in early 1947 for murdering his wife and the fella she was banging.On the outside, </span><br><span class="line">he&#39;d been vice president of a large Portland bank.Good work for a man so young.[Lost some words]</span><br><span class="line"></span><br><span class="line">Hey Red.</span><br><span class="line"></span><br><span class="line">You speak English, butt-steak? You follow this officer.</span><br><span class="line"></span><br><span class="line">I never seen such a sorry-looking heap of maggot shit in all my life.</span><br><span class="line"></span><br><span class="line">Hey, fish! Come over here!</span><br><span class="line"></span><br><span class="line">Taking bets today, Red?</span><br><span class="line"></span><br><span class="line">Smokers or coin? Bettor&#39;s choice.</span><br><span class="line"></span><br><span class="line">Smokes. Put me down for tow.</span><br><span class="line"></span><br><span class="line">All right, who&#39;s your horse?</span><br><span class="line"></span><br><span class="line">That little sack of shit.</span><br><span class="line"></span><br><span class="line">Eighth.He&#39;ll be first.-Bullshit! I&#39;ll take that action.</span><br><span class="line"></span><br><span class="line">You&#39;re out some smokes, son.</span><br><span class="line"></span><br><span class="line">If your&#39;re so smart, you call it.</span><br><span class="line"></span><br><span class="line">I&#39;ll take the chubby fat-ass three.The fifth one. Put me down for a quarter deck.</span><br><span class="line"></span><br><span class="line">Fresh fish today! We&#39;re reeling them in!</span><br><span class="line"></span><br><span class="line">I must admit I didn&#39;t think much of Andy first time I laid eyes on him. Looked like a stiff breeze would blow him over.</span><br><span class="line">That was my first impression of the man.</span><br><span class="line"></span><br><span class="line">What do you say?</span><br><span class="line"></span><br><span class="line">That tall drink of water the silver spoon up his ass.</span><br><span class="line"></span><br><span class="line">That guy?Never happen.</span><br><span class="line"></span><br><span class="line">Ten cigarettes-That&#39;s a rich bet. Who&#39;s going to prove me wrong? Heywood?Jigger?Skeets?Floyd!Four brave souls.</span><br><span class="line"></span><br><span class="line">Return to your cellblocks for evening count.All prisoners, return to your cellblocks.</span><br><span class="line"></span><br><span class="line">Turn o the right! Eyes front.</span><br><span class="line"></span><br><span class="line">This is Mr.Hadley. He&#39;s captain of the guards.I&#39;m Mr.Norton, the warden. You are conviceted felons.That&#39;s why they&#39;ve sent you to me.</span><br><span class="line">Rule number one: No blasphemy, I&#39;ll not have the lord&#39;s name taken in vain in my prison. The other rules, you&#39;ll figure out as you go</span><br><span class="line">along. Any questions?</span><br><span class="line"></span><br><span class="line">When do we eat?</span><br><span class="line"></span><br><span class="line">You eat when we say you eat. You shit when we say you shit, and piss when we say you piss. You got that, you maggot-dick motherfucker?</span><br><span class="line">On your feet.</span><br><span class="line"></span><br><span class="line">I believe in two things: Discipline and the Bible. Here, you&#39;ll receive both. Put your trust in the Lord. Your ass belongs to me.</span><br><span class="line">Welcome to Shawshank.</span><br><span class="line"></span><br><span class="line">Unhook them.</span><br><span class="line">[time is 14:19]</span><br><span class="line"></span><br><span class="line">Turn around.</span><br><span class="line"></span><br><span class="line">That&#39;s enough. Move to the end of the cage. Turn around. Delouse him. Turn around. Move out of the cage.</span><br><span class="line">Pick up your clohes and Bible. Next man up. To the right. Right. Right. Left. The first night&#39;s the toughest. No doubt about it.</span><br><span class="line">They march you in naked as the day you were born. Skin burning and half-blind from that delouing shit. And when they put you in </span><br><span class="line">that cell and those bars slam home. That&#39;s when you know it&#39;s for real. Old life blown away in the blink of an eye. Nothing left</span><br><span class="line">but all the time in the world to think about it. Most new fish come close to madness the first night. Somebody always breaks down crying. Hapens every time. The only question is who&#39;s it going to be? It&#39;s as good a thing to bet on as any, I guess. I had my</span><br><span class="line">money on Andy Dufresne.</span><br><span class="line"></span><br><span class="line">Lights out.</span><br><span class="line"></span><br><span class="line">I remember my first night.Seems like a long time ago.</span><br><span class="line"></span><br><span class="line">Hey fish, fish ,fish, what are you, scared of the dark? Bet you wish your daddy never dicked your mama? Piggy! Pork! I want me</span><br><span class="line">a port chop.</span><br><span class="line"></span><br><span class="line">Poke your ass out, give me a first look! Keep it down.</span><br><span class="line"></span><br><span class="line">The boys always go fishing with first-timers. And the don&#39;t quit till they reel someone in.</span><br><span class="line"></span><br><span class="line">Hey, Fat Ass. Take to me boy. I know your&#39;re there. I can hear you breathing. Don&#39;t you listen to these nitwits, you hear me?</span><br><span class="line">This place ain&#39;t so bad. Tell you what, I&#39;ll introduce you around, make you feel right at home.</span><br><span class="line">I konw a couple of big od bull queers that&#39;d just love to make your acquaintance. Especially that big,</span><br><span class="line">white, mushy butt of yours.</span><br><span class="line"></span><br><span class="line">Glod!</span><br><span class="line"></span><br><span class="line">I don&#39;t belong here!</span><br><span class="line"></span><br><span class="line">We have a winner!- I want to go home!</span><br><span class="line"></span><br><span class="line">And it&#39;s Fat Ass by a nose!</span><br><span class="line"></span><br><span class="line">Fresh fish! Fresh fish! Fresh fish!</span><br><span class="line"></span><br><span class="line">I don&#39;t belong here. I want to go home. I want my mother!</span><br><span class="line"></span><br><span class="line">I had your mother! She wasn&#39;t that great!</span><br><span class="line">[time is 18:01]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      The Shawshank Redemption
    
    </summary>
    
    
      <category term="English" scheme="https://fantasylion.github.io/categories/English/"/>
    
    
      <category term="English" scheme="https://fantasylion.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>Ebbinghaus Forgetting Curve</title>
    <link href="https://fantasylion.github.io/English/2018-01-02-How-to-remember-sthing/"/>
    <id>https://fantasylion.github.io/English/2018-01-02-How-to-remember-sthing/</id>
    <published>2018-01-01T16:00:00.000Z</published>
    <updated>2018-01-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何运用艾宾浩斯遗忘曲线背单词"><a class="markdownIt-Anchor" href="#如何运用艾宾浩斯遗忘曲线背单词"></a> 如何运用艾宾浩斯遗忘曲线背单词</h2><h3 id="复习点的确定"><a class="markdownIt-Anchor" href="#复习点的确定"></a> 复习点的确定</h3><ul><li>1． 第一个记忆周期：5分钟</li><li>2． 第二个记忆周期：30分钟</li><li>3． 第三个记忆周期：12小时</li><li>4． 第四个记忆周期：1天</li><li>5． 第五个记忆周期：2天</li><li>6． 第六个记忆周期：4天</li><li>7． 第七个记忆周期：7天</li><li>8． 第八个记忆周期：15天</li></ul><h3 id="背诵方法"><a class="markdownIt-Anchor" href="#背诵方法"></a> 背诵方法</h3><ul><li>1． 初记单词时需要记忆的内容：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a）单词外观</span><br><span class="line">b） 单词的中文释义</span><br><span class="line">c） 单词的记忆法</span><br></pre></td></tr></table></figure><ul><li>2． 每个list的具体背诵过程（每个list按12页，每页10个单词计）：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a) 背完一页（大约5分钟），立即返回该页第一个单词开始复习（大约几十秒）</span><br><span class="line">b) 按上面方法背完1～6页（大约在30分钟），回到第1页开始复习（两三分钟）</span><br><span class="line">c) 按上面同样方法背完7～12页，一个list结束</span><br><span class="line">d) 相当于每个list被分为12个小的单元，每个小的单元自成一个复习系统；</span><br><span class="line">   每6个小单元组成一个大单元，2个大单元各自成为一个复习系统。背一个list总共需要一小时左右的时间。</span><br></pre></td></tr></table></figure><h3 id="复习过程"><a class="markdownIt-Anchor" href="#复习过程"></a> 复习过程</h3><ul><li>a) 复习方法：遮住中文释义，尽力回忆该单词的意思，几遍下来都记不住的单词可以做记号重点记忆。</li><li>b) 复习一个list所需的时间为20分钟以内</li><li>c) 当天的list最好在中午之前背完，大约12小时之后（最好睡觉前）复习当天所背的list</li><li>d) 在其后的1，2，4，7，15天后分别复习当日所背的list</li><li>e）复习的原则<br />时间间隔：30秒 1分钟 5分钟 30分钟 1小时 8小时 1天 2天 6天 31天<br />重学节省诵读时间百分数：58.2 44.2 35.8 33.7 27.8 25.4 21.1</li></ul><h3 id="复习点的确定-2"><a class="markdownIt-Anchor" href="#复习点的确定-2"></a> 复习点的确定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">人的记忆周期分为短期记忆和长期记忆两种。</span><br><span class="line">第一个记忆周期是 5分钟</span><br><span class="line">第二个记忆周期是30分钟</span><br><span class="line">第三个记忆周期是12小时</span><br><span class="line">这三个记忆周期属于短期记忆的范畴。</span><br><span class="line">下面是几个比较重要的周期。</span><br><span class="line">第四个记忆周期是 1天</span><br><span class="line">第五个记忆周期是 2天</span><br><span class="line">第六个记忆周期是 4天</span><br><span class="line">第七个记忆周期是 7天</span><br><span class="line">第八个记忆周期是15天</span><br><span class="line">以上的8个周期应用于背词法，作为一个大的背词的循环的8个复习点，可以最大程度的提高背单词的效率</span><br><span class="line">背单词就找个小本子窄窄的那种，每页中间对折左边英文右边中文，每天背100个，分5组每组20个，每一个看过留下读音和拼写的印象，</span><br><span class="line">基本上5～8分钟一组，全部5组大概看30分钟，最好不要超过40分钟，然后再从第一组再看，每天一百个新的，</span><br><span class="line">看过的按记忆周期在第2、4、7、15天重新复习，基本每天进行的300～400个单词记忆。</span><br></pre></td></tr></table></figure><h3 id="英语背诵任务"><a class="markdownIt-Anchor" href="#英语背诵任务"></a> 英语背诵任务</h3><ul><li>a) 每天连续背诵1个list，每个list 120个单词，并完成复习任务；</li><li>b) 复习永远比记新词重要，要反复高频率的复习，复习，再复习；</li><li>c) 一天都不能间断，坚持挺过这15天，之后每天都要花大约1小时复习；</li></ul><h3 id="时间表"><a class="markdownIt-Anchor" href="#时间表"></a> 时间表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">新学背诵</span><br><span class="line">第1天：list1*list1</span><br><span class="line">第2天：list2*list1*list2</span><br><span class="line">第3天：list3*list2*list3</span><br><span class="line">第4天：list4*list3*list1*list4</span><br><span class="line">第5天：list5*list4*list2*list5</span><br><span class="line">第6天：list6*list5*list3*list6</span><br><span class="line">第7天：    list7*list6*list4*list1*list7</span><br><span class="line">第8天：list8*list7*list5*list2*list8</span><br><span class="line">第9天：    list9*list8*list6*list3*list9</span><br><span class="line">第10天：list10*list9*list7*list4*list10</span><br><span class="line">第11天：list11*list10*list8*list5*list11</span><br><span class="line">第12天：list12*list11*list9*list6*list12</span><br><span class="line">第13天：list13*list12*list10*list7*list13</span><br><span class="line">第14天*：list14*list13*list11*list8*list14</span><br><span class="line">第15天：list15*list14*list12*list9*list1*list15</span><br><span class="line">第16天：list16*list15*list13*list10*list2*list16</span><br><span class="line">第17天：list17*list16*list14*list11*list3*list17</span><br><span class="line">第18天：list18*list17*list15*list12*list4*list18</span><br><span class="line">第19天：list19*list18*list16*list13*list5*list19</span><br><span class="line">第20天：list20*list19*list17*list14*list6*list20</span><br><span class="line">第21天：list21*list20*list18*list15*list7*list21</span><br><span class="line">第22天：list22*list21*list19*list16*list8*list22</span><br><span class="line">第23天：list23*list22*list20*list17*list9*list23</span><br><span class="line">第24天：list24*list23*list21*list18*list10*list24</span><br><span class="line">第25天：list25*list24*list22*list19*list11*list25</span><br><span class="line">第26天：list26*list25*list23*list20*list12*list26</span><br><span class="line">第27天：list27*list26*list24*list21*list13*list27</span><br><span class="line">第28天：list28*list27*list25*list22*list14*list28</span><br><span class="line">第29天：list29*list28*list26*list23*list15*list29</span><br><span class="line">第30天：list30*list29*list27*list24*list16*list30</span><br><span class="line">第31天：list31*list30*list28*list25*list17*list31</span><br><span class="line">第32天：list32*list31*list29*list26*list18*list32</span><br><span class="line">第33天：list33*list32*list30*list27*list19*list33</span><br><span class="line">第34天：list34*list33*list31*list28*list20*list34</span><br><span class="line">第35天：list35*list34*list32*list29*list21*list35</span><br><span class="line">第36天：list36*list35*list33*list30*list22*list36</span><br><span class="line">第37天：list37*list36*list34*list31*list23*list37</span><br><span class="line">第38天：list38*list37*list35*list32*list24*list38</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h3><ul><li>a) 每天连续背诵2个list，并完成复习任务；</li><li>b) 复习永远比记新词重要，要反复高频率的复习，复习，再复习；</li><li>c) 一天都不能间断，坚持挺过这15天，之后每天都要花大约1小时复习；</li></ul><h3 id="时间表左边序号表示第几天号之后表示复习内容"><a class="markdownIt-Anchor" href="#时间表左边序号表示第几天号之后表示复习内容"></a> 时间表（左边序号表示第几天，*号之后表示复习内容）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">　　第1天 list1→2 *list1→2</span><br><span class="line">　  第2天 *list1→2 list3→4 *list3→4</span><br><span class="line">　　第3天 *list3→4 list5→6 *list5→6 </span><br><span class="line">@ 第4天 *list1→2 *list5→6 list7→8 *list7→8</span><br><span class="line">　　第5天 *list3→4 *list7→8 list9→10 *list9→10</span><br><span class="line">　　第6天 *list5→6 *list9→10 list11→12 *list11→12</span><br><span class="line">　　第7天 *list1→2 *list7→8 *list11→12 list13→14 *list13→14</span><br><span class="line">　　第8天 *list3→4 *list9→10 *list13→14 list15→16 *list15→16</span><br><span class="line">　　第9天 *list5→6 *list11→12 *list15→16 list17→18 *list17→18</span><br><span class="line">　　第10天 *list7→8 *list13→14 *list17→18 list19→20 *list19→20</span><br><span class="line">　　第11天 *list9→10 *list15→16 *list19→20 list21→22 *list21→22</span><br><span class="line">　　第12天 *list11→12 *list17→18 *list21→22 list23→24 *list23→24</span><br><span class="line">　　第13天 *list13→14 *list19→20 *list23→24</span><br><span class="line">　　第14天 *list15→16 *list21→22</span><br><span class="line">　　第15天 *list1→2 *list17→18 *list23→24</span><br><span class="line">　　第16天 *list3→4 *list19→20</span><br><span class="line">　　第17天 *list5→6 *list21→22</span><br><span class="line">　　第18天 *list7→8 *list23→24</span><br><span class="line">　　第19天 *list9→10</span><br><span class="line">　　第24天 *list19→20</span><br><span class="line">　　第25天 *list21→22</span><br><span class="line">　　第26天 *list23→24</span><br><span class="line">　　第27天</span><br><span class="line">　　第28天</span><br><span class="line">　　第29天</span><br><span class="line">　　第30天 *list1→2</span><br><span class="line">　　第31天 *list3→4</span><br><span class="line">　　第32天 *list5→6</span><br><span class="line">　　第33天 *list7→8</span><br><span class="line">　　第34天 *list9→10</span><br><span class="line">　　第35天 *list11→12</span><br><span class="line">　　第36天 *list13→14</span><br><span class="line">　　第37天 *list15→16</span><br><span class="line">　　第38天 *list17→18</span><br><span class="line">　　第39天 *list19→20</span><br><span class="line">　　第40天 *list21→22</span><br><span class="line">　　第41天 *list23→24</span><br><span class="line">　　起始(单元或页码)编号为1</span><br><span class="line">　　截止(单元或页码)编号为24</span><br><span class="line">　　总共需要复习的编号数为24</span><br><span class="line">　　每天需要复习的编号数为2</span><br><span class="line">　　你需要41天时间完成任务[4]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      利用艾宾浩斯遗忘曲线背单词
    
    </summary>
    
    
      <category term="English" scheme="https://fantasylion.github.io/categories/English/"/>
    
    
      <category term="English" scheme="https://fantasylion.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>Enterprise Architect key</title>
    <link href="https://fantasylion.github.io/Tools/2016-05-06-Enterprise-Architect-key/"/>
    <id>https://fantasylion.github.io/Tools/2016-05-06-Enterprise-Architect-key/</id>
    <published>2016-05-05T16:00:00.000Z</published>
    <updated>2016-05-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>Enterprise Architect是一款非常好用的建模软件</p><p>Enterprise Architect11企业版注册码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Registration Key</span><br><span class="line">ADF8D83B-0683-4d1f-BB60-FF66D-WFM1-CHPZ-PII0-HN75-BC</span><br><span class="line">Authorization Key</span><br><span class="line">F08113BA-8B4F-41df-8F01-46DF2C35D249</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Enterprise Architect是一款非常好用的建模软件
    
    </summary>
    
    
      <category term="Tools" scheme="https://fantasylion.github.io/categories/Tools/"/>
    
    
      <category term="uml" scheme="https://fantasylion.github.io/tags/uml/"/>
    
  </entry>
  
  <entry>
    <title>spring boot使用</title>
    <link href="https://fantasylion.github.io/program/2016-04-27-spring-boot/"/>
    <id>https://fantasylion.github.io/program/2016-04-27-spring-boot/</id>
    <published>2016-04-26T16:00:00.000Z</published>
    <updated>2016-04-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>spring团队为了方便使用spring，开发出了springBoot将spring的配置都简单化了。SpringBoot也是在微服务架构中使用比较频繁的一个框架。</p><h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p>SpringBoot把创建一个独立的网站变得更加的简单。启动一个SpringBoot的应用你只需要简单的run一下就可以。基本上SpringBoot的应用只需要很少的配置就可以。</p><p>你可以使用SpringBoot去创建一个java应用，可以通过命令<code>java -jar</code>或者启动’war’包，而且他们提供了’spring scripts’可以更方便的启动应用。</p><p><strong>SpringBoot 目标</strong></p><ul><li>为所有Spring开发一种完全更快普及入门体验。</li><li>自以为是开箱即用，但得到的出路尽快开始要求从默认发散。</li><li>提供一系列的非功能性特征是常见的大课的项目（例如嵌入式服务器，安全，指标，健康检查，外部配置）。</li><li>绝对没有生成代码,没有要求配置XML。</li></ul><p><strong>系统要求</strong></p><ul><li>默认使用SpringBoot 1.3.5.release</li><li>Java 7</li><li>Spring Frameework 4.2.6RELEASE 以上</li></ul><p>当然SpringBoot内嵌了许多应用服务器</p><table><thead><tr><th>Name</th><th>Servlet version</th><th>Java Version</th></tr></thead><tbody><tr><td>Tomcat8</td><td>3.1</td><td>Java 7+</td></tr><tr><td>Tomcat7</td><td>3.0</td><td>Java 6+</td></tr><tr><td>jetty9</td><td>3.1</td><td>Java 7+</td></tr><tr><td>jetty8</td><td>3.0</td><td>Java 6+</td></tr><tr><td>Undertow1.1</td><td>3.0</td><td>Java 6+</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      spring团队为了方便使用spring，开发出了springBoot将spring的配置都简单化了
    
    </summary>
    
    
      <category term="program" scheme="https://fantasylion.github.io/categories/program/"/>
    
    
      <category term="java" scheme="https://fantasylion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>心甘情愿</title>
    <link href="https://fantasylion.github.io/LifeFeeling/2016-04-01-love/"/>
    <id>https://fantasylion.github.io/LifeFeeling/2016-04-01-love/</id>
    <published>2016-03-31T16:00:00.000Z</published>
    <updated>2016-03-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>    《心甘情愿》<br><br />世界上最幸福的事，莫过于想起一个人的时候！<br><br />脸上露出的笑意，心中流动的暖意。<br><br />不由自主的想起，是心中柔软的秘密；<br><br />情不自禁的挂念，是生命不可或缺的一部分。<br><br />相见或者不见，心一直在陪伴；<br><br />知冷知热的情，让心灵有了靠岸；<br><br />含笑带泪的暖，给生命以春天。<br><br />思念不为容颜，只为感觉；<br><br />眷恋不为拥有，只为懂得。<br><br />相识于路上，不如相知于心上！<br><br />人在难受的时候，特别需要的是最爱的人来陪。<br><br />哪怕是一杯平淡的白水，也会暖心暖肺；<br><br />即使是一句简单的安慰，也能深入心扉。<br><br />卸下了伪装，不在狼狈；<br><br />除去了疲惫，不在憔悴。<br><br />也许那个人并不完美，但在你眼里就是最美；<br><br />也许那颗心会偶尔忽略，但却是你最想要的体会。<br><br />人海再多，这种感觉别人不能给就；<br><br />缘分无数，这份感情无人能媲美。<br><br />一个人的心最不会说谎，心在哪里，爱就在哪里！<br></p></blockquote>]]></content>
    
    <summary type="html">
    
      世界上最幸福的事，莫过于想起一个人的时候！
    
    </summary>
    
    
      <category term="LifeFeeling" scheme="https://fantasylion.github.io/categories/LifeFeeling/"/>
    
    
      <category term="爱" scheme="https://fantasylion.github.io/tags/%E7%88%B1/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg使用</title>
    <link href="https://fantasylion.github.io/tools/2016-03-30-introduce-ffmpeg/"/>
    <id>https://fantasylion.github.io/tools/2016-03-30-introduce-ffmpeg/</id>
    <published>2016-03-29T16:00:00.000Z</published>
    <updated>2016-03-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍ffmpeg"><a class="markdownIt-Anchor" href="#介绍ffmpeg"></a> 介绍<a href="https://www.ffmpeg.org/about.html" target="_blank" rel="noopener">FFmpeg</a></h1><p><a href="https://www.ffmpeg.org/about.html" target="_blank" rel="noopener">FFmpeg</a>的是全球领先的多媒体框架，能够解码，编码，转码，复用，解复用，流，过滤器和播放。它支持各种格式的视频。</p>]]></content>
    
    <summary type="html">
    
      FFmpeg introduction
    
    </summary>
    
    
      <category term="tools" scheme="https://fantasylion.github.io/categories/tools/"/>
    
    
      <category term="ffmpeg" scheme="https://fantasylion.github.io/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>排序算法总计(未完结)</title>
    <link href="https://fantasylion.github.io/notes/2016-02-27-data-structure-for-sort/"/>
    <id>https://fantasylion.github.io/notes/2016-02-27-data-structure-for-sort/</id>
    <published>2016-02-26T16:00:00.000Z</published>
    <updated>2016-02-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>北京的生活已经远去，新的生活即将开始，趁现在有空将学校学过的计算机基础知识复习一下，先看一下排序算法</p><h1 id="排序篇"><a class="markdownIt-Anchor" href="#排序篇"></a> 排序篇</h1><h2 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h2><p>排序是计算机程序设计中的一种重要操作。不论数值计算还是非数值计算问题都要广泛地用到排序运算，特别是在数据处理方面引用的更加广泛。它的功能是将一个数据元素的任意序列，重新排列成一个按指定官架子有序的序列。排序的目的是便于查找，提高计算机的工作效率。因此，学习和研究各种排序方法是计算机工作中的重要课题之一。</p><h2 id="插入排序"><a class="markdownIt-Anchor" href="#插入排序"></a> 插入排序</h2><p>基本思想：每次将一个待排序的记录，按其关键字的大小插入到前面已经排好序的有序序列中的适当位置上，直到全部记录插入完成为止。按照插入的方法不通可以分为好几种，其中：直接插入排序，折半插入排序，2-路插入排序和希尔排序。</p><h3 id="直接插入排序"><a class="markdownIt-Anchor" href="#直接插入排序"></a> 直接插入排序</h3><p><strong>基本思想</strong></p><p>将序列中的元素依次的插入到有序序列中，导致最终结果有序序列不断变长，直到取完最后一个无序序列中的元素</p><h3 id="折半插入排序"><a class="markdownIt-Anchor" href="#折半插入排序"></a> 折半插入排序</h3><p>利用折半查找来实现插入位置的定位，因为折半查找的效率比较高，因此可以减少排序过程中的比较次数。适用于待排序的记录数量较大的情况。</p><h3 id="2-路插入排序"><a class="markdownIt-Anchor" href="#2-路插入排序"></a> 2-路插入排序</h3><h3 id="希尔排序"><a class="markdownIt-Anchor" href="#希尔排序"></a> 希尔排序</h3><p>希尔排序方法又称为缩小增量排序，它也是一种插入排序方法，是对直接插入排序方法的改进。</p><p><strong>基本思想</strong></p><p>将整个待排序的记录序列划分成若干个子序列，然后分别对每个子序列进行直接插入排序，这样可以减少参与直接插入排序的数据量，如此反复，当经过几次分组排序后，记录的排序依据基本有序，这个时候在对所有的记录进行一次直接插入排序。</p><p>例如，假设有这样一组数[ 13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10 ]，如果我们以步长为5开始进行排序，我们可以通过将这列表放在有5列的表中来更好地描述算法，这样他们就应该看起来是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">13 14 94 33 82</span><br><span class="line"></span><br><span class="line">25 59 94 65 23</span><br><span class="line"></span><br><span class="line">45 27 73 25 39</span><br><span class="line"></span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>然后我们对每列进行排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">10 14 73 25 23</span><br><span class="line"></span><br><span class="line">13 27 94 33 39</span><br><span class="line"></span><br><span class="line">25 59 94 65 82</span><br><span class="line"></span><br><span class="line">45</span><br></pre></td></tr></table></figure><p>將上述四行數字，依序接在一起时我们得到：[ 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 ].这时10已经移至正确位置了，然后再以3为步长进行排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10 14 73</span><br><span class="line"></span><br><span class="line">25 23 13</span><br><span class="line"></span><br><span class="line">27 94 33</span><br><span class="line"></span><br><span class="line">39 25 59</span><br><span class="line"></span><br><span class="line">94 65 82</span><br><span class="line"></span><br><span class="line">45</span><br></pre></td></tr></table></figure><p>排序之后变为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10 14 13</span><br><span class="line"></span><br><span class="line">25 23 33</span><br><span class="line"></span><br><span class="line">27 25 59</span><br><span class="line"></span><br><span class="line">39 65 73</span><br><span class="line"></span><br><span class="line">45 94 82</span><br><span class="line"></span><br><span class="line">94</span><br></pre></td></tr></table></figure><p>最后以1步长进行排序（此时就是简单的插入排序了）。</p><h2 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序"></a> 选择排序</h2><p><strong>选择排序思想</strong></p><p>每一趟从待排序的序列中选出关键字最小的记录，按顺序放在已排好序的子序列的最后，直到全部记录排序完毕。常用的选择排序方法有简单选择排序和堆排序。</p><h3 id="简单选择排序"><a class="markdownIt-Anchor" href="#简单选择排序"></a> 简单选择排序</h3><h3 id="堆排序"><a class="markdownIt-Anchor" href="#堆排序"></a> 堆排序</h3><h2 id="交换排序"><a class="markdownIt-Anchor" href="#交换排序"></a> 交换排序</h2><p>交换排序的基本思想是：两两比较待排序记录的关键字，若发现两个记录的次序为逆序时，交换其存储位置，直到没有逆序的记录位置。下面介绍两个比较常用的交换排序：冒泡排序和快速排序。</p><h3 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h3><p><strong>冒泡排序的基本思想：</strong></p><p>对所有相邻记录的关键字值进行比较，如果是逆序(r[i]&gt;[i+1]),则交换其位置，进过多趟排序，最终使整个序列有序。</p><ul><li>就是不断的将一个元素向后移动，直到移动到这个值最后所因在的位置。这个过程有点像水中冒泡一样不断的向上扩大直到水泡变得它所能承受的最大体积然后爆裂。</li></ul><h3 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h3><p><strong>排序排序基本思想：</strong></p><p>快排是对冒泡排序的一种改进，它通过一趟排序将待排序记录划分成两部分，是的其中一部分记录的关键字比另一部分记录的关键字小；然后再分别对这两部分记录进行这种划分，直到每个部分为空或只包含一个记录时，整个快速排序结束。</p><h2 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h2><p>归并排序是将两个或者两个以上的有序序列合成一个新的有序序列。</p><h2 id="基数排序"><a class="markdownIt-Anchor" href="#基数排序"></a> 基数排序</h2><h3 id="多关键字排序"><a class="markdownIt-Anchor" href="#多关键字排序"></a> 多关键字排序</h3><h3 id="链式基数排序"><a class="markdownIt-Anchor" href="#链式基数排序"></a> 链式基数排序</h3><h2 id="排序的几种方法"><a class="markdownIt-Anchor" href="#排序的几种方法"></a> 排序的几种方法</h2>]]></content>
    
    <summary type="html">
    
      北京的生活已经远去，新的生活即将开始，趁现在有空将学校学过的计算机基础知识复习一下，先看一下排序算法
    
    </summary>
    
    
      <category term="notes" scheme="https://fantasylion.github.io/categories/notes/"/>
    
    
      <category term="DS" scheme="https://fantasylion.github.io/tags/DS/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB笔记2-使用MongoDB</title>
    <link href="https://fantasylion.github.io/database/2016-02-20-use-mongodb-2/"/>
    <id>https://fantasylion.github.io/database/2016-02-20-use-mongodb-2/</id>
    <published>2016-02-19T16:00:00.000Z</published>
    <updated>2016-02-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用mongodb"><a class="markdownIt-Anchor" href="#使用mongodb"></a> 使用<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a></h1><p><a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>存储和操作的数据是以类似<a href="https://en.wikipedia.org/wiki/JSON" target="_blank" rel="noopener">JSON</a>的格式数据，使用<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>的命令有点类似在页面<code>console</code>中写<code>js</code>的感觉。</p><h2 id="创建一个数据库"><a class="markdownIt-Anchor" href="#创建一个数据库"></a> 创建一个数据库</h2><p><strong>使用如下命令进行数据库创建</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; use mongotestDB</span><br><span class="line">switched to db mongotestDB</span><br></pre></td></tr></table></figure><ul><li>use：切换到某个数据库，如果这个数据库不存在则会创建一个数据库对象。这个时候使用<code>show dbs</code>是查询不到这个数据库的，只有在<code>insert</code>一条数据后才能查到。从这里可以看出<code>show dbs</code>命令是从磁盘上去查询的</li></ul><h2 id="插入数据"><a class="markdownIt-Anchor" href="#插入数据"></a> 插入数据</h2><p>使用以下命令及可插入一条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycollection.insert(&#123;x:10&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure><ul><li>db 代表你当前使用的数据库</li><li>mycollection 代表你的数据要插入到哪个集合，如果这个集合不存在或者说没有使用过则会创建一个新的集合并将数据插入到这个集合中。</li></ul><p>如果你的集合名需要空格或者一些符号，但是使用的<code>Mongo shell</code>又不支持的话可以使用以下方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db[&quot;collection-test&quot;].insert(&#123;x:20&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; db.getCollection(&quot;collection-test&quot;).insert(&#123;x:20&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure><p>当然如果觉得数据写的太长也可以这么插入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; var doc &#x3D; &#123;xx:1,ary:[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]&#125;</span><br><span class="line">&gt; db.mycollection.insert(doc)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure><p><strong>批量插入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; var doc &#x3D; [&#123;x:1&#125;,&#123;x:2&#125;,&#123;x:3&#125;,&#123;x:4&#125;]</span><br><span class="line">&gt; db.mycollection.insert(doc)</span><br><span class="line">WriteResult(&#123; </span><br><span class="line">&quot;writeErrors&quot; : [],</span><br><span class="line">&quot;writeConernErroes&quot;:[],</span><br><span class="line">&quot;nInserted&quot; : 4,</span><br><span class="line">&quot;nUpserted&quot; : 0,</span><br><span class="line">&quot;nMatched&quot;:0,</span><br><span class="line">&quot;nModified&quot;:0,</span><br><span class="line">&quot;nRemoved&quot;:0,</span><br><span class="line">&quot;upserted&quot;:[]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果需要批量的插入，首先声明一个数组，这个数组里存放需要插入的数据。如上面所示插入4条数据</p><h2 id="查询数据"><a class="markdownIt-Anchor" href="#查询数据"></a> 查询数据</h2><p><a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>使用<code>find</code>函数（我不知道应该说命令还是函数-_-|||）去查询，还有一个是<code>findOne</code>函数。</p><p><strong>查询<code>mycollection</code>中所有的数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycollection.find(&#123;&#125;)</span><br><span class="line">&#123;&quot;_id&quot;:Object(56c870d24d49c30492efa870), &quot;x&quot;:1&#125;</span><br></pre></td></tr></table></figure><p><strong>条件查询</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycollection.find(&#123;x:&#123;$gt:0&#125;&#125;)</span><br><span class="line">&gt; db.mycollection.find(&#123;x:&#123;$lt:0&#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li>大于<code>(greater than)</code>使用<code>$gt</code>，上面命令第一条命令表示：查询<code>x</code>大于0的所有数据</li><li>小于<code>(less than)</code>使用<code>$lt</code>，第二条表示：查询<code>x</code>小于0的所有数据</li></ul><p><strong>查询显示指定字段</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycollection.find(&#123;x:&#123;$gt:0&#125;&#125;, &#123;x:1&#125;)</span><br></pre></td></tr></table></figure><ul><li>查询<code>x</code>大于0的所有数据，只列出<code>x</code>字段</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycollection.find(&#123;x:&#123;$gt:0&#125;&#125;, &#123;x:0&#125;)</span><br></pre></td></tr></table></figure><ul><li>查询<code>x</code>大于0的所有数据，不显示x字段</li></ul><p><strong>某个条件内查询</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.testCollection.find(&#123;x:&#123;$in:[10,11]&#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li>查询testCollection中<code>x</code>在属于10或11中的所有数据<br /><strong>条件或查询</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.testCollection.find(&#123;$or:[&#123;x:&#123;$gt:12&#125;&#125;,&#123;t:3&#125;]&#125;)</span><br></pre></td></tr></table></figure><ul><li>查询testCollection中<code>x</code>大于12或者<code>t</code>小于3的所有数据</li></ul><p><strong>查询嵌入文档</strong></p><p>先插入一个文档doc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.testCollection.insert(&#123;doc:&#123;y:1,t:2,c:3&#125;&#125;)</span><br><span class="line">&gt; db.testCollection.insert(&#123;doc:&#123;y:2,t:3,c:4&#125;&#125;)</span><br><span class="line">&gt; db.testCollection.insert(&#123;doc:&#123;y:3,t:4,c:5&#125;&#125;)</span><br><span class="line">&gt; db.testCollection.insert(&#123;doc:&#123;y:4,t:5,c:6&#125;&#125;)</span><br><span class="line">&gt; db.testCollection.insert(&#123;doc:&#123;y:5,t:6,c:7&#125;&#125;)</span><br><span class="line">&gt; db.testCollection.insert(&#123;doc:&#123;y:6,t:7,c:8&#125;&#125;)</span><br></pre></td></tr></table></figure><p>查询<code>doc={y:1,t:2,c:3}</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.testCollection.find(&#123;doc:&#123;y:6,t:7,c:8&#125;&#125;)</span><br></pre></td></tr></table></figure><p>查询所有<code>doc</code>中<code>y = 6</code>的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.testCollection.find(&#123;&quot;doc.y&quot;:6&#125;&#125;)</span><br></pre></td></tr></table></figure><p>查询所有<code>doc</code>中<code>y &gt; 3</code>的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.testCollection.find(&#123;&quot;doc.y&quot;:&#123;$gt:3&#125;&#125;)</span><br></pre></td></tr></table></figure><p><strong>查询数组</strong><br></p><p>先插入一些数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.testCollection.insert(&#123;ary:[1,2,3,4,5,6,7]&#125;)</span><br><span class="line">&gt; db.testCollection.insert(&#123;ary:[3,5,6,7,5,6,3]&#125;)</span><br><span class="line">&gt; db.testCollection.insert(&#123;ary:[5,5,1,7,5,4,3]&#125;)</span><br><span class="line">&gt; db.testCollection.insert(&#123;ary:[4,5,6,6,7,6,3]&#125;)</span><br><span class="line">&gt; db.testCollection.insert(&#123;ary:[2,5,4,7,5,7,3]&#125;)</span><br></pre></td></tr></table></figure><p>查询<code>ary=[1,2,3,4,5,6,7]</code>的所有数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.testCollection.find(&#123;ary:[1,2,3,4,5,6,7]&#125;)</span><br></pre></td></tr></table></figure><p>查询数据第<code>0</code>个数等于<code>2</code>的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.testCollection.find(&#123;&quot;ary.0&quot;:2&#125;)</span><br></pre></td></tr></table></figure><p>查询数组中某个元素满足条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.testCollection.find(&#123;ary:&#123;$elemMatch:&#123;$gt:2, $lt:5&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li>查询条件<code>ary</code>中存在元素满足大于<code>2</code>小于<code>5</code>的所有数组</li></ul><p><a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>支持查询优化，<a href="https://docs.mongodb.org/manual/core/query-optimization/" target="_blank" rel="noopener">详情点击&gt;&gt;&gt;</a></p><h2 id="修改数据"><a class="markdownIt-Anchor" href="#修改数据"></a> 修改数据</h2><p><a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>提供<code>update</code>函数，<code>$set</code>操作符来执行更新操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.testCollection.update(&#123;x:1&#125;,&#123;$set:&#123;x:100&#125;, $currentDate: &#123; lastModified: true &#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li>将满足<code>x</code>为1的数据<code>x</code>值改为100，并通过<code>$currentDate</code>添加时间字段lastModified</li></ul><p>默认情况下使用<code>update</code>函数只更新一条数据，如果需要更新多条数据使用操作字段<code>multi</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.testCollection.update(&#123;x:1&#125;,&#123;$set:&#123;x:100&#125;, $currentDate: &#123; lastModified: true &#125;&#125;, &#123; multi: true &#125;)</span><br></pre></td></tr></table></figure><p>直接替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.testCollection.update(&#123;x:1&#125;,&#123;x:111, y:100 &#125;)</span><br></pre></td></tr></table></figure><ul><li>满足<code>x=1</code>条件的第一条数据将会被替换成{x:111, y:100}</li></ul><blockquote><p>如果加上<code>upsert</code>字段并设值为<code>true</code>将会修改多条满足条件的数据，如果不存在此条件的数据将会添加一条数据</p></blockquote><h2 id="删除数据"><a class="markdownIt-Anchor" href="#删除数据"></a> 删除数据</h2><p><a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>使用<code>remove</code>函数进行删除操作</p><p><strong>删除集合中所有的数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.testCollection.remove(&#123;&#125;)</span><br></pre></td></tr></table></figure><p><strong>删除满足条件的数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.testCollection.remove(&#123;x:1&#125;)</span><br></pre></td></tr></table></figure><p><strong>删除单个数据，设置参数<code>1</code>或者<code>true</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.testCollection.remove(&#123;x:1&#125;, 1)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      如何使用MongoDB去存储数据，对数据进行增删改查等操作。
    
    </summary>
    
    
      <category term="database" scheme="https://fantasylion.github.io/categories/database/"/>
    
    
      <category term="MongoDB" scheme="https://fantasylion.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>人生有感</title>
    <link href="https://fantasylion.github.io/LifeFeeling/2016-02-19-my-grandma/"/>
    <id>https://fantasylion.github.io/LifeFeeling/2016-02-19-my-grandma/</id>
    <published>2016-02-18T16:00:00.000Z</published>
    <updated>2016-02-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>    《青春》<br><br />所有的结局都已写好<br><br />所有的泪水也都已启程<br><br />切忽然忘了是怎样的一个开始<br><br />在哪个古老的不再回来的夏日<br><br />无论我如何地去追索<br><br />年轻的你只如云影掠过<br><br />而你微笑的面容极浅极浅<br><br />逐渐隐没在日落后的群岚<br><br />遂翻开那发黄的扉页<br><br />命运将它装订的极为拙劣<br><br />含着泪，我一读在读<br><br />却不得不承认<br><br />青春是一本太仓促的书<br></p></blockquote>]]></content>
    
    <summary type="html">
    
      人生就像一场旅行，在乎的不是目的地而是沿途的风景
    
    </summary>
    
    
      <category term="LifeFeeling" scheme="https://fantasylion.github.io/categories/LifeFeeling/"/>
    
    
      <category term="人生" scheme="https://fantasylion.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB笔记1-安装运行MongoDB</title>
    <link href="https://fantasylion.github.io/database/2016-02-19-use-mongodb/"/>
    <id>https://fantasylion.github.io/database/2016-02-19-use-mongodb/</id>
    <published>2016-02-18T16:00:00.000Z</published>
    <updated>2016-02-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>前段时间在上家公司做的产品后台用的就是<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>，由于当时这块根本接触不到，也一直没有时间去学习。趁现在在家呆着没事学习一下<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>。</p><h1 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h1><p><a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>是一个基于分布式文件存储的开源数据库系统，在高负载的情况下，添加更多的节点，可以保证服务器性能。<br /><a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a> 将数据存储为一个文档，数据结构由键值<code>(key=&gt;value)</code>对组成。<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a> 文档类似于 <a href="https://en.wikipedia.org/wiki/JSON" target="_blank" rel="noopener">JSON</a> 对象。字段值可以包含其他文档，数组及文档数组。</p><h1 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h1><h2 id="安装mongodb"><a class="markdownIt-Anchor" href="#安装mongodb"></a> 安装<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a></h2><p>在安装<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>之前先要到__<a href="https://www.mongodb.org" target="_blank" rel="noopener">官网</a><strong>上</strong><a href="https://www.mongo%7C%7C%7Cdb.org%7C/%7C%7Cdow%7C%7Cnloads?_ga=1.146306676.1535760226.1455459089#production" target="_blank" rel="noopener">下载</a>__安装包</p><p><img src="http://7xr0d3.com1.z0.glb.clouddn.com/blog-post-img/mondb1/install.png" alt="官网" /></p><p>进去官网后选择自己的系统对应的版本下载，我这里用的是<code>win7 64bit</code> 所以选择 <code>Windows 64-bit 2008 R2+</code>, <code>Legacy</code>的版本是被放弃的版本不建议使用。</p><p><strong>MongoDB对各系统平台的支持</strong></p><table><thead><tr><th>Platform</th><th>3.2</th><th>3.0</th><th>2.6</th><th>2.4</th><th>2.2</th></tr></thead><tbody><tr><td>Amazon Linux</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>Debian 7</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>Fedora 8+</td><td></td><td></td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>RHEL/CentOS 6.2+</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>RHEL/CentOS 7.0+</td><td>✓</td><td>✓</td><td>✓</td><td></td><td></td></tr><tr><td>SLES 11</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>SLES 12</td><td>✓</td><td></td><td></td><td></td><td></td></tr><tr><td>Solaris 64-bit</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>Ubuntu 12.04</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>Ubuntu 14.04</td><td>✓</td><td>✓</td><td>✓</td><td></td><td></td></tr><tr><td>Microsoft Azure</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>Windows Vista/Server 2008R2/2012+</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>OSX 10.7+</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td></td></tr></tbody></table><p><strong>32位的<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>存在以下几个限制</strong></p><ul><li>不支持<code>WiredTiger</code> 存储引擎</li><li>默认日志是禁止的，因为日志会限制<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>可以存储的最大数据量</li><li>当运行的<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>，服务器的总存储大小，包括数据和索引，是2G字节。所以不要生产环境下使用在32位的<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>。</li></ul><p>在下载完成后，<code>windows</code>版本直接下一步安装就可以了</p><p>安装完成之后<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>的目录是这样的</p><p><img src="http://7xr0d3.com1.z0.glb.clouddn.com/blog-post-img/mondb1/floder.png" alt="目录" /></p><h2 id="运行mongodb"><a class="markdownIt-Anchor" href="#运行mongodb"></a> 运行<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a></h2><p><strong>安装完成接下来要把<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>跑起来</strong></p><p>在运行<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>之前先介绍一些刚安装<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>目录的<code>lib</code>目录下存放的文件作用</p><p><img src="http://7xr0d3.com1.z0.glb.clouddn.com/blog-post-img/mondb1/lib-floder.png" alt="lib" /></p><p><strong>各可执行文件对应的作用</strong></p><table><thead><tr><th>Component Set</th><th>Binaries</th></tr></thead><tbody><tr><td>Server</td><td>mongod.exe</td></tr><tr><td>Router</td><td>mongos.exe</td></tr><tr><td>Client</td><td>mongo.exe</td></tr><tr><td>MonitoringTools</td><td>mongostat.exe, mongotop.exe</td></tr><tr><td>ImportExportTools</td><td>mongodump.exe, mongorestore.exe, mongoexport.exe, mongoimport.exe</td></tr><tr><td>MiscellaneousTools</td><td>bsondump.exe, mongofiles.exe, mongooplog.exe, mongoperf.exe</td></tr></tbody></table><p>首先得把<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>的<code>Server</code>端跑起来</p><p>在dos下敲下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;dbpath参数后面的跟的是数据库的路径，MongoDB默认有一个test库，参数可不加则直接使用默认的数据库</span><br><span class="line">mongod.exe --dbpath D:\Tools\Mongodb\test\data</span><br></pre></td></tr></table></figure><p>    这个时候<code>Server</code>端就会开启一个默认的端口<code>27017</code>，当然这个端口是可以通过参数更换的（加<code>-h</code> 就可以了解更多的参数）。<br /><a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>在启动的时候需要知道数据库存储在哪个位置或者说将数据存储到哪，所以在启动的时候传入一个参数<code>--dbpath</code>告诉将要启动的<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>进程，数据库位置如果不指定的话则默认在<code>/data/db</code>位置去找，如果没有找到则将不能启动<a href="https://www.mongodb.org" target="_blank" rel="noopener">MongoDB</a>。<br />在执行完上面的命令后，会出现<code>The waiting for connections</code>字样，说明服务器这个时候就已经开启了在等待一个客户端连接进来。</p><h2 id="连接数据库"><a class="markdownIt-Anchor" href="#连接数据库"></a> 连接数据库</h2><p>在数据库已经启动的情况下我们接下来就需要通过<code>client</code>去访问操作数据库。<br />在确保数据库已经启动成功，直接点击<code>mongo.exe</code>即可通过默认的端口连接到本地的数据库。如果你需要连接别的数据库，需要通过命令行传入指定参数进行连接。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mongo --username &lt;user&gt; --password &lt;pass&gt; --host &lt;host&gt; --port 28015</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">mongo -u &lt;user&gt; -p &lt;pass&gt; --host &lt;host&gt; --port 28015</span><br></pre></td></tr></table></figure><ul><li><code>user</code>：填入你在那台机器上的用户名<br></li><li><code>pass</code>：填入你的用户密码<br></li><li><code>host</code>：数据库主机地址<br></li><li><code>port</code>：数据库开启的端口<br></li></ul><p>当执行完命令后（或者直接点击<code>mongo.exe</code>）将会出现下方显示内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2016-02-20T14:05.849+0800 I CONTROL [main] Hotfix KB271284 or later update is not installed, will zero-out data files</span><br><span class="line">MongoDB shell version: 3.2.1</span><br><span class="line">connection to: test</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>下面执行一些简单的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2016-02-20T14:05.849+0800 I CONTROL [main] Hotfix KB271284 or later update is not installed, will zero-out data files</span><br><span class="line">MongoDB shell version: 3.2.1</span><br><span class="line">connection to: test</span><br><span class="line">&gt; db</span><br><span class="line">test</span><br><span class="line">&gt; show dbs</span><br><span class="line">local0.000GB</span><br><span class="line">test0.004GB</span><br></pre></td></tr></table></figure><ul><li><code>db</code>: 显示当前使用的是哪个数据库</li><li><code>show dbs</code>: 显示有几个数据库</li></ul>]]></content>
    
    <summary type="html">
    
      前段时间在上家公司做的产品后台用的就是Mongodb，由于当时这块根本接触不到，也一直没有时间去学习。趁现在在家呆着没事学习一下Mongodb。
    
    </summary>
    
    
      <category term="database" scheme="https://fantasylion.github.io/categories/database/"/>
    
    
      <category term="MongoDB" scheme="https://fantasylion.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>使用 php printf() 和 sprintf() 格式化字符串</title>
    <link href="https://fantasylion.github.io/translation/2016-01-23-Formating_PHP_Strings_With_Printf_And_Sprintf/"/>
    <id>https://fantasylion.github.io/translation/2016-01-23-Formating_PHP_Strings_With_Printf_And_Sprintf/</id>
    <published>2016-01-22T16:00:00.000Z</published>
    <updated>2016-01-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>原文在 2009/11/19 发表于 <a href="http://www.elated.com/articles/formatting-php-strings-printf-sprintf/" target="_blank" rel="noopener">http://www.elated.com/articles/formatting-php-strings-printf-sprintf/</a></em></p><p>和其他许多编程语言一样, PHP 也有功能强大的 <a href="http://php.net/manual/en/function.printf.php" target="_blank" rel="noopener"><code>printf()</code></a> 和 <a href="http://php.net/manual/en/function.sprintf.php" target="_blank" rel="noopener"><code>sprintf()</code></a> 函数, 它们提供了很多格式化字符串的方式. 当你想要某些数据更易读, 或者需要传递数据给其他程式的时候, 这两个函数很有用.</p><p>PHP 也有许多专门用途的格式化字符串的函数 - 比如 <a href="http://php.net/manual/en/function.date.php" target="_blank" rel="noopener"><code>date()</code></a> 函数, 适合用于格式化日期字符串. 而 <code>printf()</code> 和 <code>sprintf()</code> 则适合更为通用的格式化.</p><p>这篇教程就会教你如何使用 <code>printf()</code> 和 <code>sprintf()</code> 来格式化字符串.</p><p>#一个简单的 <code>printf()</code> 示例</p><p>了解 <code>printf()</code> 的最简单方式就是通过示例. 下面这个例子打印一个包含了两个数字的字符串:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 打印 "Australia comprises 6 states and 10 territories"</span></span><br><span class="line">printf( <span class="string">"Australia comprises %d states and %d territories"</span>, <span class="number">6</span>, <span class="number">10</span> );</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>注意这个字符串在被打印出的时候, 第一个 <code>%d</code> 被第二个参数 <code>6</code> 替换, 第二个 <code>%d</code> 则被第三个参数 <code>10</code> 替换. 其工作原理即:</p><ul><li><p>第一个参数必须是一个字符串, 我们称之为目标字符串. 目标字符串包含普通的字符, 和一些可选的格式说明符 (比如 <code>%d</code>)</p></li><li><p>所有格式说明符都以 <code>%</code> 开头. 它按对应的顺序以特定方式格式化目标字符串之后的参数, 然后将其插入到最终的字符串中, 并显示到网页.</p></li></ul><p><strong>NOTE:</strong> 如果想要打印 <code>%</code> 符, 使用 <code>%%</code>.</p><p>#类型说明符</p><p>上面那个例子使用的 <code>%d</code> 这个格式说明符, 会将参数按照有符号十进制数字格式化. 这个 <code>d</code> 被称为类型说明符. <code>printf()</code> 支持很多类型说明符. 下面是类型说明符的完整列表:</p><table><thead><tr><th>类型说明符</th><th>备注</th></tr></thead><tbody><tr><td><code>b</code></td><td>将参数作为二进制数字(如 <code>10010110</code>)格式化</td></tr><tr><td><code>c</code></td><td>将参数作为 ASCII 码值格式化为对应的字符</td></tr><tr><td><code>d</code></td><td>将参数作为有符号十进制数字格式化</td></tr><tr><td><code>e</code></td><td>将参数作为科学计数法(如 <code>1.234e+3</code>)格式化</td></tr><tr><td><code>f</code></td><td>将参数作为浮点数字, 并且使用地区设定(如在法国, 逗号被用作小数点)格式化</td></tr><tr><td><code>F</code></td><td>和上面相同, 不过不使用地区设定</td></tr><tr><td><code>o</code></td><td>将参数作为八进制数字格式化</td></tr><tr><td><code>s</code></td><td>将参数作为字符串格式化</td></tr><tr><td><code>u</code></td><td>将参数作为无符号十进制数字格式化</td></tr><tr><td><code>x</code></td><td>将参数作为小写十六进制数字(如 <code>4fdf87</code>)格式化</td></tr><tr><td><code>X</code></td><td>将参数作为大写十六进制数字(如 <code>4FDF87</code>)格式化</td></tr></tbody></table><p>下面是一些类型说明符的示例:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">printf( <span class="string">"Here's the number %s as a float (%f), a binary integer (%b), an octal integer (%o), and a hex integer (%x)."</span>, <span class="number">543.21</span>, <span class="number">543.21</span>, <span class="number">543.21</span>, <span class="number">543.21</span>, <span class="number">543.21</span> );</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码会输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Here&#39;s the number 543.21 as a float (543.210000), a binary integer (1000011111), an octal integer (1037), and a hex integer (21f).</span><br></pre></td></tr></table></figure><p>#符号说明符</p><p>默认情况下, <code>printf()</code> 只会在负数前加正负符号:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">printf( <span class="string">"%d"</span>, <span class="number">36</span> );   <span class="comment">// 输出 "36"</span></span><br><span class="line">printf( <span class="string">"%d"</span>, <span class="number">-36</span> );  <span class="comment">// 输出 "-36"</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果你也想让 <code>printf()</code> 在正数前加符号, 可以在类型说明符前指定一个符号说明符 <code>+</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">printf( <span class="string">"%+d"</span>, <span class="number">36</span> );   <span class="comment">// 输出 "+36"</span></span><br><span class="line">printf( <span class="string">"%+d"</span>, <span class="number">-36</span> );  <span class="comment">// 输出 "-36"</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>#填充</p><p><code>printf()</code> 允许你填充目标字符串到指定的长度. 你可以使用任何字符做填充字符, 也可以指定填充左边还是右边. 如果你希望在数字前补 <code>0</code> 或让字符串右对齐, 填充就派上用场了.</p><p>通过在 <code>%</code> 前面插入一个填充说明符来指定填充规则. 填充说明符使用以下格式:</p><p>&lt;填充符&gt;&lt;宽度&gt;:</p><ul><li><p>&lt;填充符&gt; 可以是 <code>0</code> 或空格. 如果你不指定则默认使用空格. 如果你想要指定其他填充符, 需在它之前加一个 <code>'</code> 字符.</p></li><li><p>&lt;宽度&gt; 即想要填充到的宽度. 整数代表左填充, 负数代表右填充.</p></li></ul><p>这是些填充说明符示例:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">printf( <span class="string">"%04d"</span>, <span class="number">12</span> );          <span class="comment">// 输出 "0012"</span></span><br><span class="line">printf( <span class="string">"%04d"</span>, <span class="number">1234</span> );        <span class="comment">// 输出 "1234"</span></span><br><span class="line">printf( <span class="string">"%04d"</span>, <span class="number">12345</span> );       <span class="comment">// 输出 "12345"</span></span><br><span class="line">printf( <span class="string">"% 10s"</span>, <span class="string">"Hello"</span> );    <span class="comment">// 输出 "     Hello"</span></span><br><span class="line">printf( <span class="string">"%10s"</span>, <span class="string">"Hello"</span> );     <span class="comment">// 输出 "     Hello"</span></span><br><span class="line">printf( <span class="string">"%'*10s"</span>, <span class="string">"Hello"</span> );   <span class="comment">// 输出 "*****Hello"</span></span><br><span class="line">printf( <span class="string">"%'*-10s"</span>, <span class="string">"Hello"</span> );  <span class="comment">// 输出 "Hello*****"</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>留意第三个示例, 填充说明符并不会导致目标字符串被截断为 4 个字符. <strong>填充只会在必要处增加字符</strong></p><p>#数字精度</p><p>当使用 <code>f</code> 或者 <code>F</code> 类型说明符格式化浮点数时, PHP 默认会取到小数点后面 6 位:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">printf( <span class="string">"%f"</span>, <span class="number">123.456</span> );  <span class="comment">// 输出 "123.456000"</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果要指定不同的精度, 就要用到精度说明符了. 精度说明符是一个 <code>.</code> 号后跟一个数字, 并应放到类型说明符之前. 如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">printf( <span class="string">"%.2f"</span>, <span class="number">123.456</span> );   <span class="comment">// 输出 "123.46"</span></span><br><span class="line">printf( <span class="string">"%.10f"</span>, <span class="number">123.456</span> );  <span class="comment">// 输出 "123.4560000000"</span></span><br><span class="line">printf( <span class="string">"%.0f"</span>, <span class="number">123.456</span> );   <span class="comment">// 输出 "123"</span></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果你既指定了填充说明符又指定了精度说明符, <code>printf()</code> 会将整个数字(包括整数和小数部分)填充到指定长度:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">printf( <span class="string">"%08.2f"</span>, <span class="number">123.456</span> );  <span class="comment">// 输出 "00123.46"</span></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果你同时使用 <code>s</code> 类型说明符和精度说明符, <code>printf()</code> 会截断目标字符串到指定的长度:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">printf( <span class="string">"%.2s"</span>, <span class="string">"Hello"</span> );  <span class="comment">// 输出 "He"</span></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>#参数交换</p><p>默认情况下, 目标字符串的第一个格式说明符会格式化该字符串后的第一个参数, 目标字符串的第二个格式说明符会格式化该字符串后的第二个参数, 以此类推. 但是你可以更改这个顺序.</p><p>要这样做, 在 <code>%</code> 符和类型说明符之间插入一个 <code>$</code> 号. 如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">// 输出 "Australia comprises 10 territories and 6 states"</span></span><br><span class="line">printf( <span class="string">'Australia comprises %2$d territories and %1$d states'</span>, <span class="number">6</span>, <span class="number">10</span> );</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的例子中, 第一个格式说明符是 <code>%2$d</code>. 意即: “将目标字符串后的第二个参数作为十进制整数格式化”. 第二个格式说明符 <code>%1$d</code> 即: “将目标字符串后的第一个参数作为十进制整数格式化”. 这样, 参数便以不同与默认的顺序格式化.</p><p>在上面的例子中, 格式字符串使用单引号而非双引号包围. 这样是为了阻止 <code>$</code> 符号被 PHP 解释为变量名.</p><p>#保存格式化后的结果</p><p>那 <code>sprintf()</code> 又是干嘛的呢? 这个函数和 <code>printf()</code> 只有一点不同: 它会将格式化后的结果返回, 而不是直接输出. 这样你就可以将结果赋给变量, 进行其他操作等. 如果你想要在输出它之前进行额外的处理, 或者保存到数据库等, 那这点会很有用. 下面是示例:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$result = sprintf( <span class="string">"Australia comprises %d states and %d territories"</span>, <span class="number">6</span>, <span class="number">10</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 "Australia comprises 6 states and 10 territories"</span></span><br><span class="line"><span class="keyword">echo</span> $result;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>#相关函数</p><p>其他相关的函数包括 <a href="http://php.net/manual/en/function.fprintf.php" target="_blank" rel="noopener"><code>fprintf()</code></a>, 用于将结果写到流(如文件). 还有 <a href="http://php.net/manual/en/function.vprintf.php" target="_blank" rel="noopener"><code>vprintf()</code></a>/<a href="http://php.net/manual/en/function.vsprintf.php" target="_blank" rel="noopener"><code>vsprintf()</code></a>/<a href="http://php.net/manual/en/function.vfprintf.php" target="_blank" rel="noopener"><code>vfprintf()</code></a>, 它们使用一个数组参数, 而非参数列表.</p>]]></content>
    
    <summary type="html">
    
      和其他许多编程语言一样, PHP 也有功能强大的 printf() 和 sprintf() 函数, 它们提供了很多格式化字符串的方式. 当你想要某些数据更易读, 或者需要传递数据给其他程式的时候, 这两个函数很有用. 这篇教程就会教你如何使用 printf() 和 sprintf() 来格式化字符串.
    
    </summary>
    
    
      <category term="translation" scheme="https://fantasylion.github.io/categories/translation/"/>
    
    
      <category term="php" scheme="https://fantasylion.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>ios微信上不能更换标题解决办法</title>
    <link href="https://fantasylion.github.io/program/2015-11-25-cant-modify-title-on-ios-wechat/"/>
    <id>https://fantasylion.github.io/program/2015-11-25-cant-modify-title-on-ios-wechat/</id>
    <published>2015-11-24T16:00:00.000Z</published>
    <updated>2015-11-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h1><p>用Iphone手机的微信浏览网页的时候，在切换页面时无法更新页面的title。于是从网上找了一个传说中的黑魔法解决此问题。</p><h1 id="使用jquery"><a class="markdownIt-Anchor" href="#使用jquery"></a> 使用jQuery</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var$body &#x3D; $(&#39;body&#39;);</span><br><span class="line"></span><br><span class="line">document.title &#x3D; &#39;title&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; hack在微信等webview中无法修改document.title的情况</span><br><span class="line"></span><br><span class="line">var$iframe &#x3D; $(&#39;&lt;iframe src&#x3D;&quot;&#x2F;favicon.ico&quot;&gt;&lt;&#x2F;iframe&gt;&#39;);</span><br><span class="line"></span><br><span class="line">$iframe.on(&#39;load&#39;,function()&#123;</span><br><span class="line"></span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line"></span><br><span class="line">        $iframe.off(&#39;load&#39;).remove();</span><br><span class="line"></span><br><span class="line">    &#125;, 0);</span><br><span class="line"></span><br><span class="line">&#125;).appendTo($body);</span><br></pre></td></tr></table></figure><h1 id="原生javascript"><a class="markdownIt-Anchor" href="#原生javascript"></a> 原生javaScript</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var body &#x3D; document.getElementsByTagName(&#39;body&#39;)[0];</span><br><span class="line"></span><br><span class="line">document.title &#x3D; &quot;标题被我改了&quot;;</span><br><span class="line"></span><br><span class="line">var iframe &#x3D; document.createElement(&quot;iframe&quot;);</span><br><span class="line"></span><br><span class="line">iframe.setAttribute(&quot;src&quot;, &quot;loading.png&quot;);</span><br><span class="line"></span><br><span class="line">iframe.addEventListener(&#39;load&#39;, function()&#123;</span><br><span class="line"></span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line"></span><br><span class="line">  iframe.removeEventListener(&#39;load&#39;);</span><br><span class="line"></span><br><span class="line">    document.body.removeChild(iframe);</span><br><span class="line"></span><br><span class="line">  &#125;, 0);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">document.body.appendChild(iframe);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      用Iphone手机的微信浏览网页的时候，在切换页面时无法更新页面的title。于是从网上找了一个传说中的黑魔法解决此问题。
    
    </summary>
    
    
      <category term="program" scheme="https://fantasylion.github.io/categories/program/"/>
    
    
      <category term="JavaScript" scheme="https://fantasylion.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>YII(版本1) 权威指南学习笔记(未完结)</title>
    <link href="https://fantasylion.github.io/notes/2015-11-19-learning-note-YII(1.1)/"/>
    <id>https://fantasylion.github.io/notes/2015-11-19-learning-note-YII(1.1)/</id>
    <published>2015-11-18T16:00:00.000Z</published>
    <updated>2015-11-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>#基础</p><p>##入口脚本</p><p>WEB 应用一般为 <code>index.php</code>, 控制台应用一般为 <code>yii.php</code> 并在文件开头加上 <code>#! /usr/bin/env php</code></p><p>入口脚本是定义全局常量的好地方</p><p>支持三个常量: <code>YII_DEBUG</code>, <code>YII_ENV</code>, <code>YII_ENABLE_ERROR_HANDLER</code></p><p>WEB:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 定义全局常量</span></span><br><span class="line">defined(<span class="string">'YII_DEBUG'</span>) <span class="keyword">or</span> define(<span class="string">'YII_DEBUG'</span>, <span class="keyword">true</span>);</span><br><span class="line">defined(<span class="string">'YII_ENV'</span>) <span class="keyword">or</span> define(<span class="string">'YII_ENV'</span>, <span class="string">'dev'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册 Composer 自动加载器</span></span><br><span class="line"><span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/../vendor/autoload.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含 Yii 类文件</span></span><br><span class="line"><span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/../vendor/yiisoft/yii2/Yii.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载应用配置</span></span><br><span class="line">$config = <span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/../config/web.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建、配置、运行一个应用</span></span><br><span class="line">(<span class="keyword">new</span> yii\web\Application($config))-&gt;run();</span><br></pre></td></tr></table></figure><p>控制台:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">defined(<span class="string">'YII_DEBUG'</span>) <span class="keyword">or</span> define(<span class="string">'YII_DEBUG'</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fcgi 默认没有定义 STDIN 和 STDOUT</span></span><br><span class="line">defined(<span class="string">'STDIN'</span>) <span class="keyword">or</span> define(<span class="string">'STDIN'</span>, fopen(<span class="string">'php://stdin'</span>, <span class="string">'r'</span>));</span><br><span class="line">defined(<span class="string">'STDOUT'</span>) <span class="keyword">or</span> define(<span class="string">'STDOUT'</span>, fopen(<span class="string">'php://stdout'</span>, <span class="string">'w'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册 Composer 自动加载器</span></span><br><span class="line"><span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含 Yii 类文件</span></span><br><span class="line"><span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/vendor/yiisoft/yii2/Yii.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载应用配置</span></span><br><span class="line">$config = <span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/config/console.php'</span>);</span><br><span class="line"></span><br><span class="line">$application = <span class="keyword">new</span> yii\console\Application($config);</span><br><span class="line">$exitCode = $application-&gt;run();</span><br><span class="line"><span class="keyword">exit</span>($exitCode);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>##应用主体</p><p>创建: <code>Yii::createWebApplication($configFile)</code></p><p>访问: 可以在任何地方使用 <code>Yii::app()|YiiBase::app</code> 访问</p><p>##控制器</p><p>控制器路由格式: <code>moduleID/controllerID/actionID</code></p><p>控制器创建决策步骤:</p><ol><li>如果指定了 <code>CWebApplication::catchAllRequest</code>, 用户指定的 ID 将被忽略. (通常用于设置应用为维护状态, 显示一个静态页面)</li><li>如果在 <code>CWebApplication::controllerMap</code> 中找到 ID, 相应的控制器配置则被用于创建控制器</li><li>如果 ID 为 <code>path/to/xyz</code> 形式, 则按控制器路由格式解析并创建</li></ol><p>创建:</p><ul><li><p>默认控制器在 <code>CWebApplication::defaultController</code> 中定义, 默认动作为 <code>index</code>, 对应的方法名为 <code>actionIndex</code>, 可通过 <code>CController::defaultAction</code> 修改</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiteController</span> <span class="keyword">extends</span> <span class="title">CController</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>也可以由一个动作类来定义动作, 以便重用动作:</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateAction</span> <span class="keyword">extends</span> <span class="title">CAction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// place the action logic here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后需覆盖控制器类的 <code>actions</code> 方法:</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostController</span> <span class="keyword">extends</span> <span class="title">CController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'edit'</span>=&gt;<span class="string">'application.controllers.post.UpdateAction'</span>,</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>动作参数绑定:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// in PostController:</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionCreate</span><span class="params">(array $category, $language = <span class="string">'en'</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 动作参数绑定功能将会把传入 action 的参数和 $_GET 中的数据绑定</span></span><br><span class="line">    <span class="comment">// 在此, 如果 $_GET 中没有 language 这一项, $language 默认为 'en'</span></span><br><span class="line">    <span class="comment">// 因为没有为 $category 提供默认值, 如果 $_GET 中没有 category 这一项则会报错</span></span><br><span class="line">    <span class="comment">// array 类型声明会确保 $category 为一个数组(自动将基本类型转换为数组)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤器可被配置在动作执行之前或之后执行, 如访问控制过滤器, 性能过滤器(参见<a href="#accessControlFilter">访问控制过滤器</a>)</p><ul><li><p>定义:</p><ul><li>可被定义为一个 <code>filter</code> 前缀的控制器方法:</li></ul>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filterAccessControl</span><span class="params">($filterChain)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用 $filterChain-&gt;run() 以继续后续过滤器与动作的执行。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>也可是一个 <code>CFilter</code> 或其子类的实例:</li></ul>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceFilter</span> <span class="keyword">extends</span> <span class="title">CFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">preFilter</span><span class="params">($filterChain)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 动作被执行之前应用的逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 如果动作不应被执行，此处返回 false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">postFilter</span><span class="params">($filterChain)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 动作执行之后应用的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置使用: 需要覆盖控制器的 <code>filter()</code> 方法:</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostController</span> <span class="keyword">extends</span> <span class="title">CController</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'postOnly + edit, create'</span>, <span class="comment">// 使用 filter 前缀方法定义的过滤器</span></span><br><span class="line">            <span class="keyword">array</span>(                     <span class="comment">// 使用类定义的过滤器</span></span><br><span class="line">                <span class="string">'application.filters.PerformanceFilter - edit, create'</span>,</span><br><span class="line">                <span class="string">'unit'</span>=&gt;<span class="string">'second'</span>,</span><br><span class="line">            ),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>##模型</p><p>Yii 实现了两种类型的模型: 表单模型和 Active Record, 二者都继承于 CModel</p><p>如果用户输入被收集然后丢弃, 应该创建一个表单模型; 如果用户输入被收集后要保存到数据库, 应使用一个 Active Record</p><p>详见<a href="#FormModel">表单模型</a>和<a href="#ActiveRecord">Active Record</a></p><p>##视图</p><p><code>CController::render('edit')</code> 将会在 <code>protected/views/ControllerID</code> 目录下寻找 <code>edit.php</code> 视图文件</p><p>可以通过在视图中使用 <code>$this-&gt;propertyName</code> 访问控制器的任何属性, 也可以在控制器中将数据传递到视图中:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;render(<span class="string">'edit'</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'var1'</span>=&gt;$value1,</span><br><span class="line">    <span class="string">'var2'</span>=&gt;$value2,</span><br><span class="line">));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>protected/views/layouts/main.php</code> 是默认的<code>布局</code>文件, 可通过 <code>CWebApplication::layout</code> 自定义. 要渲染一个不带布局的视图, 需调用 <code>CController::renderPartial</code></p><p><code>小物件</code>是 <code>CWidget</code> 或其子类的实例, 它也可以有自己的视图文件</p><ul><li><p>定义</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span> <span class="keyword">extends</span> <span class="title">CWidget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 此方法会被 CController::beginWidget() 调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 此方法会被 CController::endWidget() 调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>按如下视图脚本来使用一个小物件:</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">$this</span>-&gt;beginWidget(<span class="string">'path.to.WidgetClass'</span>, $config); <span class="meta">?&gt;</span></span><br><span class="line">...可能会由小物件获取的内容主体...</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">$this</span>-&gt;endWidget(); <span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">$this</span>-&gt;widget(<span class="string">'path.to.WidgetClass'</span>, $config); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>系统视图用于展示 Yii 的错误和日志消息, 如如果 CHttpException 抛出一个 404 错误, 那么 <code>error404</code> 就会被展示. Yii 在 <code>framework/views</code> 下提供了默认的系统视图, 也可以通过在 <code>protected/views/system</code> 下创建同名视图文件进行自定义</p><p>##组件</p><p>加载: 通过配置应用的 <code>components|CApplication::components</code> 属性</p><ul><li>可以配置 <code>enabled</code> 为 <code>false</code> 禁用组件</li><li>组件是按需创建的, 但是可以将组件 ID 列入应用的 <code>preload|CWebApplication::preload</code> 属性中强制其加载</li></ul><p>访问: <code>Yii::app()-&gt;ComponentID</code></p><p>预定义的核心应用组件:</p><ul><li>assetManager</li><li>authManager</li><li>cache</li><li>clientScript</li><li>coreMessage</li><li>db</li><li>errorHandler</li><li>format</li><li>messages</li><li>request</li><li>securityManager</li><li>session</li><li>statePersister</li><li>urlManager</li><li>user</li><li>themeManager</li></ul><p>组件属性</p><ul><li>可以通过直接定义一个公共成员变量定义</li><li>也可以使用 getter 和 setter 更灵活的定义</li><li>通过 getter 和 setter 定义的属性和类成员变量有个区别: 他们是不区分大小写的</li></ul><p>组件事件</p><ol><li><p>定义组件事件(<code>on</code> 开头)</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onClicked</span><span class="params">($event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;raiseEvent(<span class="string">'onClicked'</span>, $event);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义事件回调</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callbackName</span><span class="params">($event)</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>绑定事件回调</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$component-&gt;onClicked=$callback;</span><br><span class="line"><span class="comment">// 或使用匿名函数</span></span><br><span class="line">$component-&gt;onclicked=<span class="function"><span class="keyword">function</span><span class="params">($event)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>组件行为</p><ul><li><p>行为类必须实现 <code>IBehavior</code></p></li><li><p>大多数行为可继承自 <code>CBehavior</code>, 如果行为需要绑定到模型, 则也可以继承自 <code>CModelBehavior</code> 或 <code>CActiveRecordBehavior</code></p></li><li><p>两个同名行为绑定到同一个组件下是有可能的, 在这种情况下, 先绑定的行为则拥有优先权</p></li><li><p>当和 events, 一起使用时, 行为会更加强大. 当行为被绑定到组件时,行为里的一些方法就可以绑定到组件的一些事件上了. 这样一来,行为就有机观察或者改变组件的常规执行流程</p></li><li><p>一个行为的属性也可以通过绑定到的组件来访问. 这些属性包含公共成员变量以及通过 getters 和/或 setters 方式设置的属性. 例如, 若一个行为有一个 <code>xyz</code> 的属性，此行为被绑定到组件 <code>$a</code>, 然后我们可以使用表达式 <code>$a-&gt;xyz</code> 访问此行为的属性</p></li><li><p>绑定行为:</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// $name 在组件中实现了对行为的唯一识别</span></span><br><span class="line">$component-&gt;attachBehavior($name,$behavior);</span><br><span class="line"><span class="comment">// test() 是行为中的方法。</span></span><br><span class="line">$component-&gt;test();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>访问行为:</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$behavior=$component-&gt;tree;</span><br><span class="line"><span class="comment">// 等于下行代码：</span></span><br><span class="line"><span class="comment">// $behavior=$component-&gt;asa('tree');</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>禁用行为:</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$component-&gt;disableBehavior($name);</span><br><span class="line"><span class="comment">// 下面的代码将抛出一个异常</span></span><br><span class="line">$component-&gt;test();</span><br><span class="line">$component-&gt;enableBehavior($name);</span><br><span class="line"><span class="comment">// 现在就可以使用了</span></span><br><span class="line">$component-&gt;test();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>##模块</p><p>模块是一个独立的软件单元，它包含 模型, 视图, 控制器 和其他支持的组件. 如 <code>forum</code> 模块的典型目录结构</p><pre><code>forum/   ForumModule.php            模块类文件   components/                包含可复用的用户组件      views/                  包含小物件的视图文件   controllers/               包含控制器类文件      DefaultController.php   默认的控制器类文件   extensions/                包含第三方扩展   models/                    包含模块类文件   views/                     包含控制器视图和布局文件      layouts/                包含布局文件      default/                包含 DefaultController 的视图文件         index.php            首页视图文件</code></pre><p>模块可以嵌套</p><p>使用模块:</p><ol><li><p>继承 CWebModule, 并命名为 ucfirst($id).‘Module’</p></li><li><p>将模块目录放入 <code>modules</code> 目录中, 然后在应用的 <code>modules</code> 配置 属性中声明模块 ID. 模块也可以在配置是带有初始属性值</p></li><li><p>使用 CController::module 访问</p></li></ol><p>##路径别名和名字空间</p><p><code>YiiBase::getPathOfAlias()</code> 获取别名的真实路径, <code>YiiBase::setPathOfAlias()</code> 设置新的别名的真实路径</p><p>预定义的根别名</p><ul><li>system</li><li>zii</li><li>application</li><li>webroot</li><li>ext</li><li>模块 ID</li></ul><p>使用别名导入类: <code>Yii::import('system.web.CController')</code>. (所有核心类已被预先导入)</p><p>预导入: 在 <code>CWebApplication::run()</code> 之前执行:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Yii::$classMap=<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'ClassName1'</span> =&gt; <span class="string">'path/to/ClassName1.php'</span>,</span><br><span class="line">    <span class="string">'ClassName2'</span> =&gt; <span class="string">'path/to/ClassName2.php'</span>,</span><br><span class="line">    ......</span><br><span class="line">);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>导入目录: <code>Yii::import('system.web.*');</code></p><p>#<a name="FormModel">使用表单</a></p><p>##创建模型</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span> <span class="keyword">extends</span> <span class="title">CFormModel</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义特性(我们把用于存储用户输入或数据库数据的属性成为特性(attribute))</span></span><br><span class="line">    <span class="keyword">public</span> $username;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> $rememberMe=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $_identity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证规则</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 每个验证规则的格式为: </span></span><br><span class="line"><span class="comment">         * array('AttributeList', 'Validator', 'on'=&gt;'ScenarioList', ...附加选项)</span></span><br><span class="line"><span class="comment">         * 有三种方法指定 Validator</span></span><br><span class="line"><span class="comment">         * 1. 指定为模型类中的一个方法, 该方法定义格式为</span></span><br><span class="line"><span class="comment">         * public function ValidatiorName($attributes, $params) &#123;...&#125;</span></span><br><span class="line"><span class="comment">         * 2. 一个继承自 CValidator 的验证器类, 此时附加选项用于初始化实例的属性值</span></span><br><span class="line"><span class="comment">         * 3. 一个预定义的验证器类的别名, 以下是完整列表</span></span><br><span class="line"><span class="comment">         * boolean, captcha, compare, email, default, exists, file</span></span><br><span class="line"><span class="comment">         * filter, in, length, match, numerical, required, type, unique, url</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">'username, password'</span>, <span class="string">'required'</span>), <span class="comment">// 必填</span></span><br><span class="line">            <span class="keyword">array</span>(<span class="string">'rememberMe'</span>, <span class="string">'boolean'</span>),          <span class="comment">// 布尔</span></span><br><span class="line">            <span class="keyword">array</span>(<span class="string">'password'</span>, <span class="string">'authenticate'</span>),       <span class="comment">// 需验证</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * authenticate Validator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authenticate</span><span class="params">($attribute,$params)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_identity=<span class="keyword">new</span> UserIdentity(<span class="keyword">$this</span>-&gt;username,<span class="keyword">$this</span>-&gt;password);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;_identity-&gt;authenticate())</span><br><span class="line">            <span class="keyword">$this</span>-&gt;addError(<span class="string">'password'</span>,<span class="string">'错误的用户名或密码。'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a name="massiveAssign">块赋值(massive assignment)</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$model = <span class="keyword">new</span> LoginForm();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'LoginForm'</span>])) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只有被认为 '安全' 的特性才会被赋值</span></span><br><span class="line"><span class="comment">     * 特性如果出现在相应场景的一个验证规则中, 即被认为是安全的</span></span><br><span class="line"><span class="comment">     * 也可以用特殊的 `safe` Validator 来让特性变为安全的</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 为了使块赋值正确工作, 对应于模型类 `C` 中的特性 `a` 的表单域, 请命名其为  `C[a]`</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    $model-&gt;attributes = $_POST[<span class="string">'LoginForm'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a name="triggerValidation">触发验证</a></p><ul><li>验证是基于 <code>场景(scenario)</code> 的</li><li>可以手动调用 <code>CModel::validate()</code> 触发; 对于 <code>CActiveRecord</code>, 会在 <code>CAcitveRecord::save()</code> 时自动触发验证</li><li>验证错误可以使用 <code>CModel::getError()</code> 或 <code>CModel::getErrors()</code> 获取</li></ul><p>标签</p><ul><li><code>CModel</code> 默认将返回特性的名字作为其标签</li><li>也可使用 <code>CModel::attributesLabels</code> 方法自定义标签</li></ul><p>##创建动作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $model=<span class="keyword">new</span> LoginForm;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'LoginForm'</span>])) &#123;</span><br><span class="line">        <span class="comment">// 收集用户输入的数据</span></span><br><span class="line">        $model-&gt;attributes=$_POST[<span class="string">'LoginForm'</span>];</span><br><span class="line">        <span class="comment">// 验证用户输入，并在判断输入正确后重定向到前一页</span></span><br><span class="line">        <span class="keyword">if</span>($model-&gt;validate())</span><br><span class="line">            <span class="keyword">$this</span>-&gt;redirect(Yii::app()-&gt;user-&gt;returnUrl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 显示登录表单</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;render(<span class="string">'login'</span>,<span class="keyword">array</span>(<span class="string">'model'</span>=&gt;$model));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>##创建视图</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="form"&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> $form=<span class="keyword">$this</span>-&gt;beginWidget(<span class="string">'CActiveForm'</span>); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;errorSummary($model); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;div class="row"&gt;</span><br><span class="line">        <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;label($model,<span class="string">'username'</span>); <span class="meta">?&gt;</span></span><br><span class="line">        <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;textField($model,<span class="string">'username'</span>) <span class="meta">?&gt;</span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class="row"&gt;</span><br><span class="line">        <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;label($model,<span class="string">'password'</span>); <span class="meta">?&gt;</span></span><br><span class="line">        <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;passwordField($model,<span class="string">'password'</span>) <span class="meta">?&gt;</span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class="row rememberMe"&gt;</span><br><span class="line">        <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;checkBox($model,<span class="string">'rememberMe'</span>); <span class="meta">?&gt;</span></span><br><span class="line">        <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;label($model,<span class="string">'rememberMe'</span>); <span class="meta">?&gt;</span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class="row submit"&gt;</span><br><span class="line">        <span class="meta">&lt;?php</span> <span class="keyword">echo</span> CHtml::submitButton(<span class="string">'Login'</span>); <span class="meta">?&gt;</span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">$this</span>-&gt;endWidget(); <span class="meta">?&gt;</span></span><br><span class="line">&lt;/div&gt;&lt;!-- form --&gt;</span><br></pre></td></tr></table></figure><p>##收集表格输入(批量)</p><p>action:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionBatchUpdate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 假设每一项（item）是一个 'Item' 类的实例，</span></span><br><span class="line">    <span class="comment">// 提取要通过批量模式更新的项</span></span><br><span class="line">    $items=<span class="keyword">$this</span>-&gt;getItemsToUpdate();</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'Item'</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        $valid=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">foreach</span>($items <span class="keyword">as</span> $i=&gt;$item)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'Item'</span>][$i]))</span><br><span class="line">                $item-&gt;attributes=$_POST[<span class="string">'Item'</span>][$i];</span><br><span class="line">            $valid=$valid &amp;&amp; $item-&gt;validate();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>($valid)  <span class="comment">// 如果所有项目有效</span></span><br><span class="line">            <span class="comment">// ...则在此处做一些操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 显示视图收集表格输入</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;render(<span class="string">'batchUpdate'</span>,<span class="keyword">array</span>(<span class="string">'items'</span>=&gt;$items));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>view:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="form"&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> CHtml::beginForm(); <span class="meta">?&gt;</span></span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Price&lt;/th&gt;&lt;th&gt;Count&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">foreach</span>($items <span class="keyword">as</span> $i=&gt;$item): <span class="meta">?&gt;</span></span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> CHtml::activeTextField($item,<span class="string">"[$i]name"</span>); <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">&lt;td&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> CHtml::activeTextField($item,<span class="string">"[$i]price"</span>); <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">&lt;td&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> CHtml::activeTextField($item,<span class="string">"[$i]count"</span>); <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">&lt;td&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> CHtml::activeTextArea($item,<span class="string">"[$i]description"</span>); <span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">endforeach</span>; <span class="meta">?&gt;</span></span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> CHtml::submitButton(<span class="string">'Save'</span>); <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> CHtml::endForm(); <span class="meta">?&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>##使用表单生成器 @todo</p><p>action:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $model = <span class="keyword">new</span> LoginForm;</span><br><span class="line">    $form = <span class="keyword">new</span> CForm(<span class="string">'application.views.site.loginForm'</span>, $model);</span><br><span class="line">    <span class="keyword">if</span>($form-&gt;submitted(<span class="string">'login'</span>) &amp;&amp; $form-&gt;validate()) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;redirect(<span class="keyword">array</span>(<span class="string">'site/index'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;render(<span class="string">'login'</span>, <span class="keyword">array</span>(<span class="string">'form'</span>=&gt;$form));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>protected/views/site/loginForm.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'title'</span>=&gt;<span class="string">'Please provide your login credential'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'elements'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'username'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">            <span class="comment">// 可选 type: text, hidden, password, textarea, file, radio</span></span><br><span class="line">            <span class="comment">// checkbox, listbox, dropdownlist, checkboxlist, radiolist</span></span><br><span class="line">            <span class="string">'type'</span>=&gt;<span class="string">'text'</span>,</span><br><span class="line">            <span class="string">'maxlength'</span>=&gt;<span class="number">32</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">'password'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'type'</span>=&gt;<span class="string">'password'</span>,</span><br><span class="line">            <span class="string">'maxlength'</span>=&gt;<span class="number">32</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">'rememberMe'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'type'</span>=&gt;<span class="string">'checkbox'</span>,</span><br><span class="line">        )</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">    <span class="string">'buttons'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'login'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'type'</span>=&gt;<span class="string">'submit'</span>,</span><br><span class="line">            <span class="string">'label'</span>=&gt;<span class="string">'Login'</span>,</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>view:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Login&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="form"&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form; <span class="meta">?&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>#使用数据库</p><p>##数据访问对象(DAO)</p><p>建立数据库连接:</p><ul><li>使用 <code>CDbConnection</code>:</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$connection=<span class="keyword">new</span> CDbConnection($dsn,$username,$password);</span><br><span class="line"><span class="comment">// 建立连接。你可以使用  try...catch 捕获可能抛出的异常</span></span><br><span class="line">$connection-&gt;active=<span class="keyword">true</span>;</span><br><span class="line">......</span><br><span class="line">$connection-&gt;active=<span class="keyword">false</span>;  <span class="comment">// 关闭连接</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>作为应用组件配置, 然后使用 <code>Yii::app()-&gt;db</code> 访问</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">array</span>(</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">'components'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        ......</span><br><span class="line">        <span class="string">'db'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'class'</span>=&gt;<span class="string">'CDbConnection'</span>,</span><br><span class="line">            <span class="string">'connectionString'</span>=&gt;<span class="string">'mysql:host=localhost;dbname=testdb'</span>,</span><br><span class="line">            <span class="string">'username'</span>=&gt;<span class="string">'root'</span>,</span><br><span class="line">            <span class="string">'password'</span>=&gt;<span class="string">'password'</span>,</span><br><span class="line">            <span class="string">'emulatePrepare'</span>=&gt;<span class="keyword">true</span>,  <span class="comment">// needed by some MySQL installations</span></span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>##执行 SQL 语句</p><ol><li><p>创建 <code>CDbCommand</code> 实例</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$connection=Yii::app()-&gt;db;   <span class="comment">// 假设你已经建立了一个 "db" 连接</span></span><br><span class="line"><span class="comment">// 如果没有，你可能需要显式建立一个连接：</span></span><br><span class="line"><span class="comment">// $connection=new CDbConnection($dsn,$username,$password);</span></span><br><span class="line">$command=$connection-&gt;createCommand($sql);</span><br><span class="line"><span class="comment">// 如果需要，此 SQL 语句可通过如下方式修改：</span></span><br><span class="line"><span class="comment">// $command-&gt;text=$newSQL;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用以下方法执行语句</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$rowCount=$command-&gt;execute();   <span class="comment">// 执行无查询 SQL(Insert, delete, update)</span></span><br><span class="line">$dataReader=$command-&gt;query();   <span class="comment">// 执行一个 SQL 查询(select), 返回 CDbDataReader 实例</span></span><br><span class="line">$rows=$command-&gt;queryAll();      <span class="comment">// 查询并返回结果中的所有行</span></span><br><span class="line">$row=$command-&gt;queryRow();       <span class="comment">// 查询并返回结果中的第一行</span></span><br><span class="line">$column=$command-&gt;queryColumn(); <span class="comment">// 查询并返回结果中的第一列</span></span><br><span class="line">$value=$command-&gt;queryScalar();  <span class="comment">// 查询并返回结果中第一行的第一个字段</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>获取查询结果</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$dataReader=$command-&gt;query();</span><br><span class="line"><span class="comment">// 重复调用 read() 直到它返回 false</span></span><br><span class="line"><span class="keyword">while</span>(($row=$dataReader-&gt;read())!==<span class="keyword">false</span>) &#123; ... &#125;</span><br><span class="line"><span class="comment">// 或使用 foreach 遍历数据中的每一行</span></span><br><span class="line"><span class="keyword">foreach</span>($dataReader <span class="keyword">as</span> $row) &#123; ... &#125;</span><br><span class="line"><span class="comment">// 一次性提取所有行到一个数组</span></span><br><span class="line">$rows=$dataReader-&gt;readAll();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用事务</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$transaction=$connection-&gt;beginTransaction();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $connection-&gt;createCommand($sql1)-&gt;execute();</span><br><span class="line">    $connection-&gt;createCommand($sql2)-&gt;execute();</span><br><span class="line">    <span class="comment">//.... other SQL executions</span></span><br><span class="line">    $transaction-&gt;commit();</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="keyword">Exception</span> $e) &#123; <span class="comment">// 如果有一条查询失败，则会抛出异常</span></span><br><span class="line">    $transaction-&gt;rollBack();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 Prepare Statment</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 一条带有两个占位符 ":username" 和 ":email"的 SQL</span></span><br><span class="line">$sql=<span class="string">"INSERT INTO tbl_user (username, email) VALUES(:username,:email)"</span>;</span><br><span class="line">$command=$connection-&gt;createCommand($sql);</span><br><span class="line"><span class="comment">// 用实际的用户名替换占位符 ":username" </span></span><br><span class="line">$command-&gt;bindParam(<span class="string">":username"</span>,$username,PDO::PARAM_STR);</span><br><span class="line"><span class="comment">// 用实际的 Email 替换占位符 ":email" </span></span><br><span class="line">$command-&gt;bindParam(<span class="string">":email"</span>,$email,PDO::PARAM_STR);</span><br><span class="line">$command-&gt;execute();</span><br><span class="line"><span class="comment">// 使用新的参数集插入另一行</span></span><br><span class="line">$command-&gt;bindParam(<span class="string">":username"</span>,$username2,PDO::PARAM_STR);</span><br><span class="line">$command-&gt;bindParam(<span class="string">":email"</span>,$email2,PDO::PARAM_STR);</span><br><span class="line">$command-&gt;execute();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>绑定结果列</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sql=<span class="string">"SELECT username, email FROM tbl_user"</span>;</span><br><span class="line">$dataReader=$connection-&gt;createCommand($sql)-&gt;query();</span><br><span class="line"><span class="comment">// 使用 $username 变量绑定第一列 (username) </span></span><br><span class="line">$dataReader-&gt;bindColumn(<span class="number">1</span>,$username);</span><br><span class="line"><span class="comment">// 使用 $email 变量绑定第二列 (email) </span></span><br><span class="line">$dataReader-&gt;bindColumn(<span class="number">2</span>,$email);</span><br><span class="line"><span class="keyword">while</span>($dataReader-&gt;read()!==<span class="keyword">false</span>) &#123;</span><br><span class="line">    <span class="comment">// $username 和 $email 含有当前行中的 username 和 email </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用表前缀</p><p>配置 <code>CDbConnection::tablePrefix</code> 属性为所希望的表前缀, 然后便可以在 SQL 语句中使用 <code></code> 代表表的名字</p></li></ol><p>##查询构建器</p><p>查询构建器构建于一个 <code>CDbCommand</code> 实例上</p><p>查询构建器不能用于修改一个已经存在的 SQL 查询</p><p>可用的查询构建器示例:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 1. 数据查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT *</span></span><br><span class="line">select()</span><br><span class="line"><span class="comment">// SELECT `id`, `username`</span></span><br><span class="line">select(<span class="string">'id, username'</span>)</span><br><span class="line"><span class="comment">// SELECT `tbl_user`.`id`, `username` AS `name`</span></span><br><span class="line">select(<span class="string">'tbl_user.id, username as name'</span>)</span><br><span class="line"><span class="comment">// SELECT `id`, `username`</span></span><br><span class="line">select(<span class="keyword">array</span>(<span class="string">'id'</span>, <span class="string">'username'</span>))</span><br><span class="line"><span class="comment">// SELECT `id`, count(*) as num</span></span><br><span class="line">select(<span class="keyword">array</span>(<span class="string">'id'</span>, <span class="string">'count(*) as num'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT DISTINCT `id`, `username`</span></span><br><span class="line">selectDistinct(<span class="string">'id, username'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// FROM `tbl_user`</span></span><br><span class="line">from(<span class="string">'tbl_user'</span>)</span><br><span class="line"><span class="comment">// FROM `tbl_user` `u`, `public`.`tbl_profile` `p`</span></span><br><span class="line">from(<span class="string">'tbl_user u, public.tbl_profile p'</span>)</span><br><span class="line"><span class="comment">// FROM `tbl_user`, `tbl_profile`</span></span><br><span class="line">from(<span class="keyword">array</span>(<span class="string">'tbl_user'</span>, <span class="string">'tbl_profile'</span>))</span><br><span class="line"><span class="comment">// FROM `tbl_user`, (select * from tbl_profile) p</span></span><br><span class="line">from(<span class="keyword">array</span>(<span class="string">'tbl_user'</span>, <span class="string">'(select * from tbl_profile) p'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// WHERE id=1 or id=2</span></span><br><span class="line">where(<span class="string">'id=1 or id=2'</span>)</span><br><span class="line"><span class="comment">// WHERE id=:id1 or id=:id2</span></span><br><span class="line">where(<span class="string">'id=:id1 or id=:id2'</span>, <span class="keyword">array</span>(<span class="string">':id1'</span>=&gt;<span class="number">1</span>, <span class="string">':id2'</span>=&gt;<span class="number">2</span>))</span><br><span class="line"><span class="comment">// WHERE id=1 OR id=2</span></span><br><span class="line">where(<span class="keyword">array</span>(<span class="string">'or'</span>, <span class="string">'id=1'</span>, <span class="string">'id=2'</span>))</span><br><span class="line"><span class="comment">// WHERE id=1 AND (type=2 OR type=3)</span></span><br><span class="line">where(<span class="keyword">array</span>(<span class="string">'and'</span>, <span class="string">'id=1'</span>, <span class="keyword">array</span>(<span class="string">'or'</span>, <span class="string">'type=2'</span>, <span class="string">'type=3'</span>)))</span><br><span class="line"><span class="comment">// WHERE `id` IN (1, 2)</span></span><br><span class="line">where(<span class="keyword">array</span>(<span class="string">'in'</span>, <span class="string">'id'</span>, <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment">// WHERE `id` NOT IN (1, 2)</span></span><br><span class="line">where(<span class="keyword">array</span>(<span class="string">'not in'</span>, <span class="string">'id'</span>, <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>)))</span><br><span class="line"><span class="comment">// when using LIKE, remember to escape user inputed `%` and `_`</span></span><br><span class="line"><span class="comment">// WHERE `name` LIKE '%Qiang%'</span></span><br><span class="line">where(<span class="keyword">array</span>(<span class="string">'like'</span>, <span class="string">'name'</span>, <span class="string">'%Qiang%'</span>))</span><br><span class="line"><span class="comment">// WHERE `name` LIKE '%Qiang' AND `name` LIKE '%Xue'</span></span><br><span class="line">where(<span class="keyword">array</span>(<span class="string">'like'</span>, <span class="string">'name'</span>, <span class="keyword">array</span>(<span class="string">'%Qiang'</span>, <span class="string">'%Xue'</span>)))</span><br><span class="line"><span class="comment">// WHERE `name` LIKE '%Qiang' OR `name` LIKE '%Xue'</span></span><br><span class="line">where(<span class="keyword">array</span>(<span class="string">'or like'</span>, <span class="string">'name'</span>, <span class="keyword">array</span>(<span class="string">'%Qiang'</span>, <span class="string">'%Xue'</span>)))</span><br><span class="line"><span class="comment">// WHERE `name` NOT LIKE '%Qiang%'</span></span><br><span class="line">where(<span class="keyword">array</span>(<span class="string">'not like'</span>, <span class="string">'name'</span>, <span class="string">'%Qiang%'</span>))</span><br><span class="line"><span class="comment">// WHERE `name` NOT LIKE '%Qiang%' OR `name` NOT LIKE '%Xue%'</span></span><br><span class="line">where(<span class="keyword">array</span>(<span class="string">'or not like'</span>, <span class="string">'name'</span>, <span class="keyword">array</span>(<span class="string">'%Qiang%'</span>, <span class="string">'%Xue%'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// WHERE ... OR ...</span></span><br><span class="line">orWhere()</span><br><span class="line"></span><br><span class="line"><span class="comment">// WHERE ... AND ...</span></span><br><span class="line">andWhere()</span><br><span class="line"></span><br><span class="line"><span class="comment">// ORDER BY `name`, `id` DESC</span></span><br><span class="line">order(<span class="string">'name, id desc'</span>)</span><br><span class="line"><span class="comment">// ORDER BY `tbl_profile`.`name`, `id` DESC</span></span><br><span class="line">order(<span class="keyword">array</span>(<span class="string">'tbl_profile.name'</span>, <span class="string">'id desc'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// LIMIT 10</span></span><br><span class="line">limit(<span class="number">10</span>)</span><br><span class="line"><span class="comment">// LIMIT 10 OFFSET 20</span></span><br><span class="line">limit(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// OFFSET 20</span></span><br><span class="line">offset(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// JOIN `tbl_profile` ON user_id=id</span></span><br><span class="line">join(<span class="string">'tbl_profile'</span>, <span class="string">'user_id=id'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// LEFT JOIN `pub`.`tbl_profile` `p` ON p.user_id=id AND type=1</span></span><br><span class="line">leftJoin(<span class="string">'pub.tbl_profile p'</span>, <span class="string">'p.user_id=id AND type=:type'</span>, <span class="keyword">array</span>(<span class="string">':type'</span>=&gt;<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// RIGHT JOIN</span></span><br><span class="line">rightJoin()</span><br><span class="line"></span><br><span class="line"><span class="comment">// CROSS JOIN</span></span><br><span class="line">crossJoin()</span><br><span class="line"></span><br><span class="line"><span class="comment">// NATURAL JOIN</span></span><br><span class="line">natrualJoin()</span><br><span class="line"></span><br><span class="line"><span class="comment">// GROUP BY `name`, `id`</span></span><br><span class="line">group(<span class="string">'name, id'</span>)</span><br><span class="line"><span class="comment">// GROUP BY `tbl_profile`.`name`, `id`</span></span><br><span class="line">group(<span class="keyword">array</span>(<span class="string">'tbl_profile.name'</span>, <span class="string">'id'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// HAVING id=1 or id=2</span></span><br><span class="line">having(<span class="string">'id=1 or id=2'</span>)</span><br><span class="line"><span class="comment">// HAVING id=1 OR id=2</span></span><br><span class="line">having(<span class="keyword">array</span>(<span class="string">'or'</span>, <span class="string">'id=1'</span>, <span class="string">'id=2'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// UNION (select * from tbl_profile)</span></span><br><span class="line">union(<span class="string">'select * from tbl_profile'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 数据操作(不同于数据查询, 数据操作会立即执行)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// INSERT INTO `tbl_user` (`name`, `email`) VALUES (:name, :email)</span></span><br><span class="line">$command-&gt;insert(<span class="string">'tbl_user'</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'name'</span>=&gt;<span class="string">'Tester'</span>,</span><br><span class="line">    <span class="string">'email'</span>=&gt;<span class="string">'tester@example.com'</span>,</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// UPDATE `tbl_user` SET `name`=:name WHERE id=:id</span></span><br><span class="line">$command-&gt;update(<span class="string">'tbl_user'</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'name'</span>=&gt;<span class="string">'Tester'</span>,</span><br><span class="line">), <span class="string">'id=:id'</span>, <span class="keyword">array</span>(<span class="string">':id'</span>=&gt;<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// DELETE FROM `tbl_user` WHERE id=:id</span></span><br><span class="line">$command-&gt;delete(<span class="string">'tbl_user'</span>, <span class="string">'id=:id'</span>, <span class="keyword">array</span>(<span class="string">':id'</span>=&gt;<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Schema 操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CREATE TABLE `tbl_user` (</span></span><br><span class="line"><span class="comment">//     `id` int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,</span></span><br><span class="line"><span class="comment">//     `username` varchar(255) NOT NULL,</span></span><br><span class="line"><span class="comment">//     `location` point</span></span><br><span class="line"><span class="comment">// ) ENGINE=InnoDB</span></span><br><span class="line">createTable(<span class="string">'tbl_user'</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'id'</span> =&gt; <span class="string">'pk'</span>,</span><br><span class="line">    <span class="string">'username'</span> =&gt; <span class="string">'string NOT NULL'</span>,</span><br><span class="line">    <span class="string">'location'</span> =&gt; <span class="string">'point'</span>,</span><br><span class="line">), <span class="string">'ENGINE=InnoDB'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// RENAME TABLE `tbl_users` TO `tbl_user`</span></span><br><span class="line">renameTable(<span class="string">'tbl_users'</span>, <span class="string">'tbl_user'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// DROP TABLE `tbl_user`</span></span><br><span class="line">dropTable(<span class="string">'tbl_user'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// TRUNCATE TABLE `tbl_user`</span></span><br><span class="line">truncateTable(<span class="string">'tbl_user'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ALTER TABLE `tbl_user` ADD `email` varchar(255) NOT NULL</span></span><br><span class="line">addColumn(<span class="string">'tbl_user'</span>, <span class="string">'email'</span>, <span class="string">'string NOT NULL'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ALTER TABLE `tbl_user` DROP COLUMN `location`</span></span><br><span class="line">dropColumn(<span class="string">'tbl_user'</span>, <span class="string">'location'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ALTER TABLE `tbl_users` CHANGE `name` `username` varchar(255) NOT NULL</span></span><br><span class="line">renameColumn(<span class="string">'tbl_user'</span>, <span class="string">'name'</span>, <span class="string">'username'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ALTER TABLE `tbl_user` CHANGE `username` `username` varchar(255) NOT NULL</span></span><br><span class="line">alterColumn(<span class="string">'tbl_user'</span>, <span class="string">'username'</span>, <span class="string">'string NOT NULL'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ALTER TABLE `tbl_profile` ADD CONSTRAINT `fk_profile_user_id`</span></span><br><span class="line"><span class="comment">// FOREIGN KEY (`user_id`) REFERENCES `tbl_user` (`id`)</span></span><br><span class="line"><span class="comment">// ON DELETE CASCADE ON UPDATE CASCADE</span></span><br><span class="line">addForeignKey(<span class="string">'fk_profile_user_id'</span>, <span class="string">'tbl_profile'</span>, <span class="string">'user_id'</span>,</span><br><span class="line">    <span class="string">'tbl_user'</span>, <span class="string">'id'</span>, <span class="string">'CASCADE'</span>, <span class="string">'CASCADE'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ALTER TABLE `tbl_profile` DROP FOREIGN KEY `fk_profile_user_id`</span></span><br><span class="line">dropForeignKey(<span class="string">'fk_profile_user_id'</span>, <span class="string">'tbl_profile'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CREATE INDEX `idx_username` ON `tbl_user` (`username`)</span></span><br><span class="line">createIndex(<span class="string">'idx_username'</span>, <span class="string">'tbl_user'</span>, <span class="string">'username'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// DROP INDEX `idx_username` ON `tbl_user`</span></span><br><span class="line">dropIndex(<span class="string">'idx_username'</span>, <span class="string">'tbl_user'</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>也可通过使用属性赋值方式:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$command-&gt;select = <span class="keyword">array</span>(<span class="string">'id'</span>, <span class="string">'username'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>或在创建 <code>CDbCommand</code> 是传配置参数的方式构建:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$row = Yii::app()-&gt;db-&gt;createCommand(<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'select'</span> =&gt; <span class="keyword">array</span>(<span class="string">'id'</span>, <span class="string">'username'</span>),</span><br><span class="line">    <span class="string">'from'</span> =&gt; <span class="string">'tbl_user'</span>,</span><br><span class="line">    <span class="string">'where'</span> =&gt; <span class="string">'id=:id'</span>,</span><br><span class="line">    <span class="string">'params'</span> =&gt; <span class="keyword">array</span>(<span class="string">':id'</span>=&gt;<span class="number">1</span>),</span><br><span class="line">))-&gt;queryRow();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>构建完成后, 可以使用在<a href="#runSql">执行 SQL 语句</a>中讲到的方法执行之; 也可使用 <code>CDbCommand::getText()</code> 获取最后构建完工后的 SQL 语句, 绑定的参数被保存在 <code>CDbCommand::params</code> 中</p><p>同一个 <code>CDbCommand</code> 实例可用于多次构建不同的查询, 但是记得要再另一次之前调用 <code>CDbCommand::reset()</code> 以清理上次的查询</p><p>##<a name="ActiveRecord">Active Record</a></p><p>每个 AR 类代表一个数据表(或视图), 数据表(或视图)的列在 AR 类中体现为类的属性, 一个 AR 实例则表示表中的一行</p><p>最佳应用是模型化数据表为 PHP 结构和执行不包含复杂 SQL 语句的查询. 对于复杂查询的场景, 应使用 Yii DAO</p><p>如果你数据库的表结构很少改动, 你应该通过配置 <code>CDbConnection::schemaCachingDuration</code> 属性的值为一个大于零的值开启表结构缓存</p><p>通过 AR 使用多个数据库有两种方式. 如果数据库的结构不同, 你可以创建不同的 AR 基类实现不同的 <code>getDbConnection()</code>; 否则, 动态改变静态变量 <code>CActiveRecord::db</code> 是一个好主意</p><p>由于 AR 类经常在多处被引用, 我们可以导入包含 AR 类的整个目录, 而不是一个个导入. 见<a href="#">路径别名和命名空间</a></p><p>通过 Yii 的日志功能, 可以查看 AR 在背后到底执行了那些语句</p><p>定义 AR 类:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">CActiveRecord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">model</span><span class="params">($className=__CLASS__)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::model($className);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认情况下, AR 类的名字和数据表的名字相同. 如果不同, 请覆盖 `CActiveRecord::tableName` 方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tableName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'tbl_post'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AR 依靠表中良好定义的主键. 如果一个表没有主键，则必须在相应的 AR 类中通过如下方式覆盖 primaryKey() 方法指定哪一列或哪几列作为主键:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">primaryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'id'</span>;</span><br><span class="line">        <span class="comment">// 对于复合主键，要返回一个类似如下的数组</span></span><br><span class="line">        <span class="comment">// return array('pk1', 'pk2');</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>创建记录:</p><ul><li>如果表的主键是自增的, 在插入完成后, AR 实例将包含一个更新的主键</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$post=<span class="keyword">new</span> Post;</span><br><span class="line">$post-&gt;title=<span class="string">'sample post'</span>;</span><br><span class="line">$post-&gt;content=<span class="string">'content for the sample post'</span>;</span><br><span class="line"><span class="comment">// 如果要使用 Mysql 的 NOW(), 必须使用 CDbExpression, 单纯的 'NOW()' 将会被作为字符串对待</span></span><br><span class="line">$post-&gt;create_time=<span class="keyword">new</span> CDbExpression(<span class="string">'NOW()'</span>);</span><br><span class="line">$post-&gt;save();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>读取记录:</p><ul><li><code>find</code> 系列返回一个 AR 实例, 或者 <code>null</code></li><li><code>findAll</code> 系列返回 AR 实例数组, 或者空数组</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 1. 常规</span></span><br><span class="line"><span class="comment">// 查找满足指定条件的结果中的第一行</span></span><br><span class="line">$post=Post::model()-&gt;find($condition,$params);</span><br><span class="line">$post=Post::model()-&gt;find(<span class="string">'postID=:postID'</span>, <span class="keyword">array</span>(<span class="string">':postID'</span>=&gt;<span class="number">10</span>));</span><br><span class="line"><span class="comment">// 查找具有指定主键值的那一行</span></span><br><span class="line">$post=Post::model()-&gt;findByPk($postID,$condition,$params);</span><br><span class="line"><span class="comment">// 查找具有指定属性值的行</span></span><br><span class="line">$post=Post::model()-&gt;findByAttributes($attributes,$condition,$params);</span><br><span class="line"><span class="comment">// 通过指定的 SQL 语句查找结果中的第一行</span></span><br><span class="line">$post=Post::model()-&gt;findBySql($sql,$params);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找满足指定条件的所有行</span></span><br><span class="line">$posts=Post::model()-&gt;findAll($condition,$params);</span><br><span class="line"><span class="comment">// 查找带有指定主键的所有行</span></span><br><span class="line">$posts=Post::model()-&gt;findAllByPk($postIDs,$condition,$params);</span><br><span class="line"><span class="comment">// 查找带有指定属性值的所有行</span></span><br><span class="line">$posts=Post::model()-&gt;findAllByAttributes($attributes,$condition,$params);</span><br><span class="line"><span class="comment">// 通过指定的SQL语句查找所有行</span></span><br><span class="line">$posts=Post::model()-&gt;findAllBySql($sql,$params);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取满足指定条件的行数</span></span><br><span class="line">$n=Post::model()-&gt;count($condition,$params);</span><br><span class="line"><span class="comment">// 通过指定的 SQL 获取结果行数</span></span><br><span class="line">$n=Post::model()-&gt;countBySql($sql,$params);</span><br><span class="line"><span class="comment">// 检查是否至少有一行复合指定的条件</span></span><br><span class="line">$exists=Post::model()-&gt;exists($condition,$params);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用 `CDbCriteria`</span></span><br><span class="line">$criteria=<span class="keyword">new</span> CDbCriteria;</span><br><span class="line">$criteria-&gt;select=<span class="string">'title'</span>;  <span class="comment">// 只选择 'title' 列</span></span><br><span class="line">$criteria-&gt;condition=<span class="string">'postID=:postID'</span>;</span><br><span class="line">$criteria-&gt;params=<span class="keyword">array</span>(<span class="string">':postID'</span>=&gt;<span class="number">10</span>);</span><br><span class="line">$post=Post::model()-&gt;find($criteria); <span class="comment">// $params 不需要了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 传递数组</span></span><br><span class="line">$post=Post::model()-&gt;find(<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'select'</span>=&gt;<span class="string">'title'</span>,</span><br><span class="line">    <span class="string">'condition'</span>=&gt;<span class="string">'postID=:postID'</span>,</span><br><span class="line">    <span class="string">'params'</span>=&gt;<span class="keyword">array</span>(<span class="string">':postID'</span>=&gt;<span class="number">10</span>),</span><br><span class="line">));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>更新记录:</p><ul><li><p>如果一个 AR 实例是使用 new 操作符创建的, 调用 <code>CActiveRecord::save</code> 将会向数据表中插入一行新数据; 如果 AR 实例是某个 find 或 findAll 方法的结果, 调用 <code>CActiveRecord::save</code> 将更新表中现有的行. 实际上, 我们是使用 <code>CActiveRecord::isNewRecord</code> 说明一个 AR 实例是不是新的</p></li><li><p>直接更新数据表中的一行或多行而不首先载入也是可行的:</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 更新符合指定条件的行</span></span><br><span class="line">Post::model()-&gt;updateAll($attributes,$condition,$params);</span><br><span class="line"><span class="comment">// 更新符合指定条件和主键的行</span></span><br><span class="line">Post::model()-&gt;updateByPk($pk,$attributes,$condition,$params);</span><br><span class="line"><span class="comment">// 更新满足指定条件的行的计数列</span></span><br><span class="line">Post::model()-&gt;updateCounters($counters,$condition,$params);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>删除记录:</p><ul><li>实例化后删除: 这样删除之后, AR 实例仍不改变</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$post=Post::model()-&gt;findByPk(<span class="number">10</span>); <span class="comment">// 假设有一个帖子，其 ID 为 10</span></span><br><span class="line">$post-&gt;delete(); <span class="comment">// 从数据表中删除此行</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>不实例化直接删除</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 删除符合指定条件的行</span></span><br><span class="line">Post::model()-&gt;deleteAll($condition,$params);</span><br><span class="line"><span class="comment">// 删除符合指定条件和主键的行</span></span><br><span class="line">Post::model()-&gt;deleteByPk($pk,$condition,$params);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果要确定两个 AR 是否是同一个记录, 只需对比它们的主键值, 或直接调用 <code>CActiveRecord::equals()</code></p><p>通过以下几个占位符方法, 可以自定义 AR 的工作流:</p><table><thead><tr><th>占位符方法</th><th>含义</th></tr></thead><tbody><tr><td>beforeValidate, afterValidate</td><td>在验证之前(后)执行</td></tr><tr><td>beforeSave, afterSave</td><td>在保存 AR 实例之前(后)执行</td></tr><tr><td>beforeFind, afterFind</td><td>在执行查询之前(后)执行</td></tr><tr><td>afterConstruct</td><td>在 AR 实例化之后执行</td></tr></tbody></table><p>数据验证和块赋值参见<a href="#triggerValidation">触发验证</a>和<a href="#massiveAssign">块赋值</a></p><p>事务处理, 参见<a href="#">使用事务</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$model=Post::model();</span><br><span class="line">$transaction=$model-&gt;dbConnection-&gt;beginTransaction();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 查找和保存是可能由另一个请求干预的两个步骤</span></span><br><span class="line">    <span class="comment">// 这样我们使用一个事务以确保其一致性和完整性</span></span><br><span class="line">    $post=$model-&gt;findByPk(<span class="number">10</span>);</span><br><span class="line">    $post-&gt;title=<span class="string">'new post title'</span>;</span><br><span class="line">    $post-&gt;save();</span><br><span class="line">    $transaction-&gt;commit();</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">    $transaction-&gt;rollBack();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>命名范围: 即查询时的过滤器</p><ul><li>定义</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">CActiveRecord</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认命名范围, 隐式应用于所有关于此模型的 SELECT 查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">defaultScope</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'condition'</span>=&gt;<span class="string">"language='"</span>.Yii::app()-&gt;language.<span class="string">"'"</span>,</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里定义的命名范围可以被显式应用于 SELECT,UPDATE,CREATE,DELETE 操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;[type]&#125; [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'published'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'condition'</span>=&gt;<span class="string">'status=1'</span>,</span><br><span class="line">            ),</span><br><span class="line">            <span class="string">'recently'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'order'</span>=&gt;<span class="string">'create_time DESC'</span>,</span><br><span class="line">                <span class="string">'limit'</span>=&gt;<span class="number">5</span>,</span><br><span class="line">            ),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$posts=Post::model()-&gt;published()-&gt;recently()-&gt;findAll();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>##关系型 Active Record</p><p>为了使用关系型 AR, 建议在关联的表中定义主键-外键约束</p><p>关系包括: <code>BELONGS_TO</code>, <code>HAS_MANY</code>, <code>HAS_ONE</code>, <code>MANY_MANY</code>, <code>STAT</code></p><p>使用 <code>STAT</code> 关系已获取统计数据</p><p>适当使用 <code>together</code> 查询选项, 会加快查询速度</p><p>在 AR 查询中, 基础表的别名为 <code>t</code>, 其他关联表的别名和关系的名称一样</p><p>声明关系</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">CActiveRecord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">relations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'author'</span>=&gt;<span class="keyword">array</span>(<span class="keyword">self</span>::BELONGS_TO, <span class="string">'User'</span>, <span class="string">'author_id'</span>),</span><br><span class="line">            <span class="string">'categories'</span>=&gt;<span class="keyword">array</span>(<span class="keyword">self</span>::MANY_MANY, <span class="string">'Category'</span>,</span><br><span class="line">                <span class="string">'tbl_post_category(post_id, category_id)'</span>),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">CActiveRecord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">relations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'posts'</span>=&gt;<span class="keyword">array</span>(<span class="keyword">self</span>::HAS_MANY, <span class="string">'Post'</span>, <span class="string">'author_id'</span>),</span><br><span class="line">            <span class="string">'profile'</span>=&gt;<span class="keyword">array</span>(<span class="keyword">self</span>::HAS_ONE, <span class="string">'Profile'</span>, <span class="string">'owner_id'</span>),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用额外的选项</span></span><br><span class="line"><span class="comment">// 可用选项包括: select, condition, params, on, order, with, joinType, alias, together, join, group, having, index</span></span><br><span class="line"><span class="comment">// 当使用 `STAT` 关系时, 可用的选项包括: select, defaultValue, condition, params, order, group, having</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">CActiveRecord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">relations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'posts'</span>=&gt;<span class="keyword">array</span>(<span class="keyword">self</span>::HAS_MANY, <span class="string">'Post'</span>, <span class="string">'author_id'</span>,</span><br><span class="line">                            <span class="string">'order'</span>=&gt;<span class="string">'posts.create_time DESC'</span>,</span><br><span class="line">                            <span class="string">'with'</span>=&gt;<span class="string">'categories'</span>),</span><br><span class="line">            <span class="string">'profile'</span>=&gt;<span class="keyword">array</span>(<span class="keyword">self</span>::HAS_ONE, <span class="string">'Profile'</span>, <span class="string">'owner_id'</span>),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>执行关联查询</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 1. 懒惰式加载: </span></span><br><span class="line"><span class="comment">// 获取 ID 为 10 的帖子</span></span><br><span class="line">$post=Post::model()-&gt;findByPk(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 获取帖子的作者(author): 此处将执行一个关联查询。</span></span><br><span class="line">$author=$post-&gt;author;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 渴求式加载(比懒惰式高效)</span></span><br><span class="line"><span class="comment">// 2.1 常规方式</span></span><br><span class="line"><span class="comment">// 获取 post 及其作者和分类</span></span><br><span class="line">$posts=Post::model()-&gt;with(<span class="string">'author'</span>)-&gt;findAll();</span><br><span class="line"><span class="comment">// 获取 post 及其作者和分类, 以及作者简介(author.profile) 和帖子(author.posts)</span></span><br><span class="line">$posts=Post::model()-&gt;with(</span><br><span class="line">    <span class="string">'author.profile'</span>,</span><br><span class="line">    <span class="string">'author.posts'</span>,</span><br><span class="line">    <span class="string">'categories'</span>)-&gt;findAll();</span><br><span class="line"><span class="comment">// 2.2 指定 `CDbCeteria::with` 属性</span></span><br><span class="line">$criteria=<span class="keyword">new</span> CDbCriteria;</span><br><span class="line">$criteria-&gt;with=<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'author.profile'</span>,</span><br><span class="line">    <span class="string">'author.posts'</span>,</span><br><span class="line">    <span class="string">'categories'</span>,</span><br><span class="line">);</span><br><span class="line">$posts=Post::model()-&gt;findAll($criteria);</span><br><span class="line"><span class="comment">// 2.3 配置数组</span></span><br><span class="line">$posts=Post::model()-&gt;findAll(<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'with'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'author.profile'</span>,</span><br><span class="line">        <span class="string">'author.posts'</span>,</span><br><span class="line">        <span class="string">'categories'</span>,</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 动态</span></span><br><span class="line"><span class="comment">// 3.1</span></span><br><span class="line">User::model()-&gt;with(<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'posts'</span>=&gt;<span class="keyword">array</span>(<span class="string">'order'</span>=&gt;<span class="string">'posts.create_time ASC'</span>),</span><br><span class="line">    <span class="string">'profile'</span>,</span><br><span class="line">))-&gt;findAll();</span><br><span class="line"><span class="comment">// 3.2</span></span><br><span class="line">$user=User::model()-&gt;findByPk(<span class="number">1</span>);</span><br><span class="line">$posts=$user-&gt;posts(<span class="keyword">array</span>(<span class="string">'condition'</span>=&gt;<span class="string">'status=1'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果关系中没有相关的实例，则相应的属性将为 null(BELONGS_TO, HAS_ONE) 或一个空数组(HAS_MANY, MANY_MANY)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用命名空间</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">CActiveRecord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">relations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'posts'</span>=&gt;<span class="keyword">array</span>(<span class="keyword">self</span>::HAS_MANY, <span class="string">'Post'</span>, <span class="string">'author_id'</span>,</span><br><span class="line">                <span class="string">'with'</span>=&gt;<span class="string">'comments:approved'</span>),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line">$posts=Post::model()-&gt;published()-&gt;recently()-&gt;with(<span class="string">'comments'</span>)-&gt;findAll();</span><br><span class="line"><span class="comment">// 3.</span></span><br><span class="line">$posts=Post::model()-&gt;published()-&gt;recently()-&gt;with(<span class="string">'comments'</span>)-&gt;findAll();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>##数据库迁移 @todo</p><p>#专题</p><p>##验证</p><p>验证即核查一个人是否真实他声称的那个人(用户名, 密码); 授权即检查是否有权操作特定的资源</p><p>定义身份类:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserIdentity</span> <span class="keyword">extends</span> <span class="title">CUserIdentity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是身份类的主要工作, 实现验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authenticate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用 User AR 获取数据</span></span><br><span class="line">        $record=User::model()-&gt;findByAttributes(<span class="keyword">array</span>(<span class="string">'username'</span>=&gt;<span class="keyword">$this</span>-&gt;username));</span><br><span class="line">        <span class="keyword">if</span>($record===<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;errorCode=<span class="keyword">self</span>::ERROR_USERNAME_INVALID;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> &#123;</span><br><span class="line">            ($record-&gt;password!==md5(<span class="keyword">$this</span>-&gt;password))</span><br><span class="line">            <span class="keyword">$this</span>-&gt;errorCode=<span class="keyword">self</span>::ERROR_PASSWORD_INVALID;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_id=$record-&gt;id;</span><br><span class="line">            <span class="comment">// 使用 setState 把 title 信息存储为状态传递给 CWebUser</span></span><br><span class="line">            <span class="comment">// 之后便可以使用 Yii::app()-&gt;user-&gt;title 访问</span></span><br><span class="line">            <span class="comment">// CWebUser 默认会存储状态信息到 session, 但如果 CWebUser::allowAutoLogin 为 true, 则会存到 cookie, 切勿将敏感信息存入 cookie</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;setState(<span class="string">'title'</span>, $record-&gt;title);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;errorCode=<span class="keyword">self</span>::ERROR_NONE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">$this</span>-&gt;errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写 getId, 默认的实现是直接返回用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>登录和注销:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 1. 使用提供的用户名和密码登录用户</span></span><br><span class="line">$identity=<span class="keyword">new</span> UserIdentity($username,$password);</span><br><span class="line"><span class="keyword">if</span>($identity-&gt;authenticate()) &#123;</span><br><span class="line">    <span class="comment">// 将用户身份信息存入持久存储(默认为 Session)</span></span><br><span class="line">    <span class="comment">// 之后便可以用 `Yii::app-&gt;user-&gt;isGuest` 判断用户是否登录</span></span><br><span class="line">    Yii::app()-&gt;user-&gt;login($identity);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> $identity-&gt;errorMessage;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注销当前用户</span></span><br><span class="line">Yii::app()-&gt;user-&gt;logout();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用 Cookie 登录</span></span><br><span class="line"><span class="comment">// 要确保用户部件的allowAutoLogin被设置为true。</span></span><br><span class="line"><span class="comment">// 保留用户登陆状态时间7天</span></span><br><span class="line">Yii::app()-&gt;user-&gt;login($identity,<span class="number">3600</span>*<span class="number">24</span>*<span class="number">7</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果使用 cookie 登录, 要确保不要保存敏感信息到 State, 而是保存到持久存储(数据库) 上, 最好(参见<a href="#security">安全</a>):</p><ul><li>当用户成功登录时, 保存同一个随机串到 cookie State 和数据库</li><li>在之后的的自动 cookie 登录时, 对比 cookie 中和数据库中的随机串是否一致</li><li>如果用户通过登录表单登录, 刷新这个随机串</li></ul><p>##授权</p><p>访问控制过滤器的定义参见<a href="#filter">过滤器</a></p><p>过滤器定义之后, 还要通过重载 <code>CController::accessRules</code> 指定具体授权规则</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostController</span> <span class="keyword">extends</span> <span class="title">CController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置数组的值可为</span></span><br><span class="line"><span class="comment">     * 第一项: `deny` 或者 `allow`</span></span><br><span class="line"><span class="comment">     * actions: action 名字</span></span><br><span class="line"><span class="comment">     * users: *: 任何用户, ?: 匿名用户, @: 验证通过的用户 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">accessRules</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">'deny'</span>,</span><br><span class="line">                <span class="string">'actions'</span>=&gt;<span class="keyword">array</span>(<span class="string">'create'</span>, <span class="string">'edit'</span>),</span><br><span class="line">                <span class="string">'users'</span>=&gt;<span class="keyword">array</span>(<span class="string">'?'</span>),</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">'allow'</span>,</span><br><span class="line">                <span class="string">'actions'</span>=&gt;<span class="keyword">array</span>(<span class="string">'delete'</span>),</span><br><span class="line">                <span class="string">'roles'</span>=&gt;<span class="keyword">array</span>(<span class="string">'admin'</span>),</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">'deny'</span>,</span><br><span class="line">                <span class="string">'actions'</span>=&gt;<span class="keyword">array</span>(<span class="string">'delete'</span>),</span><br><span class="line">                <span class="string">'users'</span>=&gt;<span class="keyword">array</span>(<span class="string">'*'</span>),</span><br><span class="line">            ),</span><br><span class="line">            <span class="comment">// 为了确保某类动作在没允许情况下不被执行</span></span><br><span class="line">            <span class="keyword">array</span>(<span class="string">'deny'</span>,</span><br><span class="line">                    <span class="string">'action'</span>=&gt;<span class="string">'delete'</span>,</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果授权失败</p><ul><li><p>已经配置 <code>CWebUser::loingUrl</code>, 则重定向到此 URL, 可以这样配置:</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">array</span>(</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">'components'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'user'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">            <span class="comment">// 这实际上是默认值</span></span><br><span class="line">            <span class="string">'loginUrl'</span>=&gt;<span class="keyword">array</span>(<span class="string">'site/login'</span>),</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>否则显示一个 401 HTTP 例外</p></li></ul><p>如果希望在用户登录成功后转到之前页面:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Yii::app()-&gt;request-&gt;redirect(Yii::app()-&gt;user-&gt;returnUrl);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>##基于角色的访问控制(Role-Based Access Control)</p><p><code>授权项目</code>可分为<code>操作(operations)</code>, <code>任务(tasks)</code> 和<code>角色(roles)</code> 一个角色由若干任务组成, 一个任务由若干操作组成， 而一个操作就是一个<code>许可</code>, 不可再分. Yii 还允许一个角色包含其他角色或操作, 一个任务可以包含其他操作, 一个操作可以包括其他操作. 授权项目是通过它的名字唯一识别的</p><p>一个授权项目可能与一个<code>业务规则</code>关联. 业务规则是一段 PHP 代码, 在进行涉及授权项目的访问检查时将会被执行. 仅在执行返回 <code>true</code> 时, 用户才会被视为拥有此授权项目所代表的权限许可</p><p>Yii 提供了两种授权管理器： <code>CPhpAuthManager</code> 和 <code>CDbAuthManager</code>. 前者将授权数据存储在一个 PHP 脚本文件中而后者存储在数据库中.  配置 <code>CWebApplication::authManager</code> 应用组件时, 我们需要指定使用哪个授权管理器组件类, 以及所选授权管理器组件的初始化属性值:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'components'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'db'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'class'</span>=&gt;<span class="string">'CDbConnection'</span>,</span><br><span class="line">            <span class="string">'connectionString'</span>=&gt;<span class="string">'sqlite:path/to/file.db'</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">'authManager'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'class'</span>=&gt;<span class="string">'CDbAuthManager'</span>,</span><br><span class="line">            <span class="string">'connectionID'</span>=&gt;<span class="string">'db'</span>,</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后, 我们便可以使用 <code>Yii::app()-&gt;authManager</code> 访问</p><p>定义授权等级体总共分三步</p><ol><li>定义授权项目<ul><li><code>CAuthManager::createRole</code></li><li><code>CAuthManager::createTask</code></li><li><code>CAuthManager::createOperation</code></li></ul></li><li>建立授权项目之间的关系<ul><li><code>CAuthManager::addItemChild</code></li><li><code>CAuthManager::removeItemChild</code></li><li><code>CAuthItem::addChild</code></li><li><code>CAuthItem::removeChild</code></li></ul></li><li>分配角色给用户<ul><li><code>CAuthManager::assign</code></li><li><code>CAuthManager::revoke</code></li></ul></li></ol><p>如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 并不需要在每个请求中都要运行</span></span><br><span class="line">$auth=Yii::app()-&gt;authManager;</span><br><span class="line"></span><br><span class="line">$auth-&gt;createOperation(<span class="string">'createPost'</span>,<span class="string">'create a post'</span>);</span><br><span class="line">$auth-&gt;createOperation(<span class="string">'readPost'</span>,<span class="string">'read a post'</span>);</span><br><span class="line">$auth-&gt;createOperation(<span class="string">'updatePost'</span>,<span class="string">'update a post'</span>);</span><br><span class="line">$auth-&gt;createOperation(<span class="string">'deletePost'</span>,<span class="string">'delete a post'</span>);</span><br><span class="line"></span><br><span class="line">$bizRule=<span class="string">'return Yii::app()-&gt;user-&gt;id==$params["post"]-&gt;authID;'</span>;</span><br><span class="line">$task=$auth-&gt;createTask(<span class="string">'updateOwnPost'</span>,<span class="string">'update a post by author himself'</span>,$bizRule);</span><br><span class="line">$task-&gt;addChild(<span class="string">'updatePost'</span>);</span><br><span class="line"></span><br><span class="line">$role=$auth-&gt;createRole(<span class="string">'reader'</span>);</span><br><span class="line">$role-&gt;addChild(<span class="string">'readPost'</span>);</span><br><span class="line"></span><br><span class="line">$role=$auth-&gt;createRole(<span class="string">'author'</span>);</span><br><span class="line">$role-&gt;addChild(<span class="string">'reader'</span>);</span><br><span class="line">$role-&gt;addChild(<span class="string">'createPost'</span>);</span><br><span class="line">$role-&gt;addChild(<span class="string">'updateOwnPost'</span>);</span><br><span class="line"></span><br><span class="line">$role=$auth-&gt;createRole(<span class="string">'editor'</span>);</span><br><span class="line">$role-&gt;addChild(<span class="string">'reader'</span>);</span><br><span class="line">$role-&gt;addChild(<span class="string">'updatePost'</span>);</span><br><span class="line"></span><br><span class="line">$role=$auth-&gt;createRole(<span class="string">'admin'</span>);</span><br><span class="line">$role-&gt;addChild(<span class="string">'editor'</span>);</span><br><span class="line">$role-&gt;addChild(<span class="string">'author'</span>);</span><br><span class="line">$role-&gt;addChild(<span class="string">'deletePost'</span>);</span><br><span class="line"></span><br><span class="line">$auth-&gt;assign(<span class="string">'reader'</span>,<span class="string">'readerA'</span>);</span><br><span class="line">$auth-&gt;assign(<span class="string">'author'</span>,<span class="string">'authorB'</span>);</span><br><span class="line">$auth-&gt;assign(<span class="string">'editor'</span>,<span class="string">'editorC'</span>);</span><br><span class="line">$auth-&gt;assign(<span class="string">'admin'</span>,<span class="string">'adminD'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>权限检查:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(Yii::app()-&gt;user-&gt;checkAccess(<span class="string">'createPost'</span>)) &#123;</span><br><span class="line">    <span class="comment">// 创建帖子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可传参</span></span><br><span class="line">$params=<span class="keyword">array</span>(<span class="string">'post'</span>=&gt;$post);</span><br><span class="line"><span class="keyword">if</span>(Yii::app()-&gt;user-&gt;checkAccess(<span class="string">'updateOwnPost'</span>,$params)) &#123;</span><br><span class="line">    <span class="comment">// 更新帖子</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>默认角色就是一个隐式分配给每个用户的角色, 这些用户包括通过身份验证的用户和游客</p><p>配置:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'components'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'authManager'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'class'</span>=&gt;<span class="string">'CDbAuthManager'</span>,</span><br><span class="line">            <span class="string">'defaultRoles'</span>=&gt;<span class="keyword">array</span>(<span class="string">'authenticated'</span>, <span class="string">'guest'</span>),</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>定义:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$bizRule=<span class="string">'return !Yii::app()-&gt;user-&gt;isGuest;'</span>;</span><br><span class="line">$auth-&gt;createRole(<span class="string">'authenticated'</span>, <span class="string">'authenticated user'</span>, $bizRule);</span><br><span class="line"></span><br><span class="line">$bizRule=<span class="string">'return Yii::app()-&gt;user-&gt;isGuest;'</span>;</span><br><span class="line">$auth-&gt;createRole(<span class="string">'guest'</span>, <span class="string">'guest user'</span>, $bizRule);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>##安全</p><ul><li><p>XSS: 跨站脚本攻击</p><p>定义: 攻击者常常向易受攻击的 web 应用注入 JavaScript, VBScript, ActiveX, HTML 或 Flash 来迷惑访问者以收集访问者的信息</p><p>防范: 在显示用户输入的内容之前进行检查</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里将 CHtmlPurifier 作为一个 Widget 来过滤用户输入</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">$this</span>-&gt;beginWidget(<span class="string">'CHtmlPurifier'</span>); <span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//...这里显示用户输入的内容...</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">$this</span>-&gt;endWidget(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CSRF: 跨站请求伪造</p><p>定义: 攻击者在用户浏览器在访问恶意网站的时候, 让用户的浏览器向一个受信任的网站发起攻击者指定的请求</p><p>防范: GET 请求只允许检索数据而不能修改服务器上的任何数据, 而 POST 请求应当含有一些可以被服务器识别的随机数值, 用来保证表单数据的来源和运行结果发送的去向是相同的</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 启用 CsrfValidation 组件</span></span><br><span class="line"><span class="comment">// 该组件会自动在用 CHtml::form 生成的表单中嵌入一个保存随机值的隐藏项, 在表单提交的时候发送到服务器进行验证</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'components'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'request'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'enableCsrfValidation'</span>=&gt;<span class="keyword">true</span>,</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Cookie 攻击</p><p>定义: session ID 通常存储在  Cookie中, 如果攻击者窃取到了一个有效的 session ID, 他就可以使用这个 session ID 对应的 session 信息</p><p>防范:</p><ul><li>您可以使用 SSL 来产生一个安全通道, 且只通过 HTTPS 连接来传送验证 cookie</li><li>设置 cookie 的过期时间, 对所有的 cookie 和 session 令牌也这样做</li><li>防范跨站代码攻击, 因为它可以在用户的浏览器触发任意代码, 这些代码可能会泄露用户的 cookie</li><li>在 cookie 有变动的时候验证 cookie 的内容</li></ul>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 1. 启用 CookieValidation 组件 </span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'components'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'request'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'enableCookieValidation'</span>=&gt;<span class="keyword">true</span>,</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后只使用 CHttpRequest::cookies 进行 cookie 操作(而不是 $_COOKIES)</span></span><br><span class="line"><span class="comment">// 检索一个名为$name的cookie值</span></span><br><span class="line">$cookie=Yii::app()-&gt;request-&gt;cookies[$name];</span><br><span class="line">$value=$cookie-&gt;value;</span><br><span class="line">......</span><br><span class="line"><span class="comment">// 设置一个cookie</span></span><br><span class="line">$cookie=<span class="keyword">new</span> CHttpCookie($name,$value);</span><br><span class="line">Yii::app()-&gt;request-&gt;cookies[$name]=$cookie;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      Yii 是一个基于组件的高性能 PHP 框架, 用于快速开发大型 Web 应用. 它使 Web 开发中的 可复用度最大化, 可以显著提高你的 Web 应用开发速度. Yii 这个名字(读作易(Yee) 或 [ji:])代表 简单(easy), 高效(efficient) 和 可扩展(extensible).
    
    </summary>
    
    
      <category term="notes" scheme="https://fantasylion.github.io/categories/notes/"/>
    
    
      <category term="php" scheme="https://fantasylion.github.io/tags/php/"/>
    
      <category term="framework" scheme="https://fantasylion.github.io/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>理解 diff 命令</title>
    <link href="https://fantasylion.github.io/translation/2015-09-28-Understanding_the_diff_command_in_unix/"/>
    <id>https://fantasylion.github.io/translation/2015-09-28-Understanding_the_diff_command_in_unix/</id>
    <published>2015-09-27T16:00:00.000Z</published>
    <updated>2015-09-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>原文在 2009/04/17 发表于 <a href="http://unix.worldiswelcome.com/understanding-the-diff-command-in-unix" target="_blank" rel="noopener">http://unix.worldiswelcome.com/understanding-the-diff-command-in-unix</a></em></p><p>Unix 系统管理员来经常需要去知道两个文件之间有什么差异. <code>diff</code> 命令就是干这个的. 我现在就准备讲讲 <code>diff</code>. 它是一个经常被用到却不是很被了解的命令. 我希望 Unix 使用者在读完这篇文章之后能够正确了解这个命令的用途并从中获益. 另外一个有用的命令是: <a href="http://unix.worldiswelcome.com/how-to-find-common-lines-between-two-text-files-in-unix" target="_blank" rel="noopener"><code>comm</code></a> 命令. 我们开始吧…</p><p>示例文件分别是 <em>first</em> 文件和 <em>second</em> 文件. 如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wiw_labs:$ nl first</span><br><span class="line">1 computer</span><br><span class="line">2 modem</span><br><span class="line">3 monitor</span><br><span class="line">4 phone</span><br><span class="line">5 switch</span><br><span class="line"></span><br><span class="line">wiw_labs:$ nl second</span><br><span class="line">1 cable</span><br><span class="line">2 mobile</span><br><span class="line">3 screen</span><br><span class="line">4 modem</span><br><span class="line">5 phone</span><br><span class="line">6 server</span><br></pre></td></tr></table></figure><p><code>diff</code> 命令用来比较这两个文件之间的差异</p><p>#diff 命令的用法</p><p>我命先从 <code>diff</code> 的用法说起. <code>diff</code> 通常这样使用:</p><pre><code>diff first_file second_file</code></pre><p>这条命令意即: first_file 和 second_file 有什么不同</p><p>#diff 命令如何工作</p><p><code>diff</code> 命令的运作原理就是, 想法设法的让 <em>first</em> 文件和 <em>second</em> 文件一样. 它希望通过更改©, 删除(d) <em>first</em> 文件中的行以使其和 <em>second</em> 文件一模一样. 如果需要, 它还会把 <em>second</em> 文件中的行附加到 <em>first</em> 文件中. 如果你明白我说的什么, 很好, 如果不明白也随便. 当我使用示例给你解释的时候你就会明白的.</p><p><code>diff</code> 就是通过下面的这些步骤来生成这两个文件的差异报告的:</p><ol><li><p>它从 <em>first</em> 文件和 <em>second</em> 文件的第 1 行开始. 如果它们不一样, <code>diff</code> 便顺着 <em>first</em> 文件往下找, 直到找到和 <em>second</em> 文件中相似的条目.</p></li><li><p>如果在 <em>first</em> 文件中没有找到和 <em>second</em> 文件第 1 行相同的行, 它就再从 <em>second</em> 文件的第 2 行开始. 它会在 <em>first</em> 文件中开始找. 然后提议做什么(附加, 更改或删除)</p></li></ol><p>#示例<br />理论讲得够多了. 我们来点实际例子好解释的更通透一点.<br />我把这两个文件并排来放, 好理解起来更容易一些. 另外行号也一并显示了出来.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">wiw_labs:$ paste first second|nl</span><br><span class="line">1 computer cable</span><br><span class="line">2 modem mobile</span><br><span class="line">3 monitor screen</span><br><span class="line">4 phone modem</span><br><span class="line">5 switch phone</span><br><span class="line">6           server</span><br><span class="line"></span><br><span class="line">wiw_labs:$ diff first second</span><br><span class="line">1c1,3</span><br><span class="line">&lt; computer</span><br><span class="line">—</span><br><span class="line">&gt; cable</span><br><span class="line">&gt; mobile</span><br><span class="line">&gt; screen</span><br><span class="line">3d4</span><br><span class="line">&lt; monitor</span><br><span class="line">5c6</span><br><span class="line">&lt; switch</span><br><span class="line">—</span><br><span class="line">&gt; server</span><br></pre></td></tr></table></figure><p>现在, 看一下上面 <code>paste</code> 命令带行号的输出. 注意下面几点:</p><ul><li><em>first</em> 文件的第 2 行(modem) 和 <em>second</em> 文件的第 4 行(modem) 一致. 所以, 如果我们把 <em>first</em> 文件中的第 1 行换成 <em>second</em> 文件中的 1 到 3 行, 这两个文件的第一部分便都一样了. 输出看起来就会是这样的:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wiw_labs:$ paste first second|nl</span><br><span class="line">1 cable cable</span><br><span class="line">2 mobile mobile</span><br><span class="line">3 screen screen</span><br><span class="line">4 modem modem</span><br><span class="line">5 monitor phone</span><br><span class="line">6 phone server</span><br><span class="line">7 switch</span><br></pre></td></tr></table></figure><ul><li><em>first</em> 文件的第 4 行(phone) 和 <em>second</em> 文件的第 5 行一致. 这意味着如果我们删除 <em>first</em> 文件中的第 3 行(也就是目前的第 4 行), 这两个文件的第二部分便都一样了.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wiw_labs:$ paste first second|nl</span><br><span class="line">1 cable cable</span><br><span class="line">2 mobile mobile</span><br><span class="line">3 screen screen</span><br><span class="line">4 modem modem</span><br><span class="line">5 phone phone</span><br><span class="line">6 switch server</span><br></pre></td></tr></table></figure><ul><li><em>first</em> 文件的第 5 行(switch)可用 <em>second</em> 文件的第 6 行(server)替换. 至此, 这两个文件完全一样了.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wiw_labs:$ paste first second|nl</span><br><span class="line">1 cable cable</span><br><span class="line">2 mobile mobile</span><br><span class="line">3 screen screen</span><br><span class="line">4 modem modem</span><br><span class="line">5 phone phone</span><br><span class="line">6 server server</span><br></pre></td></tr></table></figure><p>现在, <code>diff</code> 命令的输出更容易理解了:</p><blockquote><p><strong>1c1,3</strong>: 更改 <em>first</em> 文件的第一行为 <em>second</em> 文件的 1 到 3 行</p><p><strong>3d4</strong>: 从 <em>first</em> 文件中删除第 3 行(modem).</p><p><strong>5c6</strong>: 更改 <em>first</em> 文件中的第 5 行(switch) 为 <em>second</em> 文件中的第 6 行(server)</p></blockquote><p>现在, 反过来再看一下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">wiw_labs:$ paste second first | nl</span><br><span class="line">1 cable computer</span><br><span class="line">2 mobile modem</span><br><span class="line">3 screen monitor</span><br><span class="line">4 modem phone</span><br><span class="line">5 phone switch</span><br><span class="line">6 server</span><br><span class="line"></span><br><span class="line">wiw_labs:$ diff second first</span><br><span class="line">1,3c1</span><br><span class="line">&lt; cable</span><br><span class="line">&lt; mobile</span><br><span class="line">&lt; screen</span><br><span class="line">—</span><br><span class="line">&gt; computer</span><br><span class="line">4a3</span><br><span class="line">&gt; monitor</span><br><span class="line">6c5</span><br><span class="line">&lt; server</span><br><span class="line">—</span><br><span class="line">&gt; switch</span><br></pre></td></tr></table></figure><ul><li>我们看到 <em>first</em> 文件的第 4 行(modem) 和 <em>second</em> 文件的第 2 行一致. 所以如果我们把 <em>first</em> 文件的 1 到 3 行替换为 <em>second</em> 文件的第 1 行, 我们得到如下输出:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wiw_labs:$ paste second first | nl</span><br><span class="line">1 computer computer</span><br><span class="line">2 modem modem</span><br><span class="line">3 phone monitor</span><br><span class="line">4 server phone</span><br><span class="line">5 switch</span><br></pre></td></tr></table></figure><ul><li>现在, <em>second</em> 文件的第 3 行(monitor) 在 <em>first</em> 文件中并不存在. 所以, 把它附加到 <em>first</em> 文件的第 4 行(modem)后面. 要记住 <code>diff</code> 命令的输出中的行号永远指的是原始的行号. 现在, 输出看起来是这样的:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wiw_labs:$ paste second first | nl</span><br><span class="line">1 computer computer</span><br><span class="line">2 modem modem</span><br><span class="line">3 monitor monitor</span><br><span class="line">4 phone phone</span><br><span class="line">5 server switch</span><br></pre></td></tr></table></figure><ul><li><em>first</em> 文件的第 6 行(server)需要改成 <em>second</em> 文件的第 5 行(switch). 更改之后, 两个文件便都一样了:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 computer computer</span><br><span class="line">2 modem modem</span><br><span class="line">3 monitor monitor</span><br><span class="line">4 phone phone</span><br><span class="line">5 switch switch</span><br></pre></td></tr></table></figure><p>现在, 更容易理解 <code>diff</code> 命令的输出了:</p><blockquote><p><strong>1,3c1</strong>: 把 <em>first</em> 文件的第 1 到 3 行改为 <em>second</em> 文件的第 1 行.</p><p><strong>4a3</strong>: 在 <em>first</em> 文件的第 4 行(modem)后面附加上 <em>second</em> 文件的第 3 行(monitor).</p><p><strong>6c5</strong>: 把 <em>first</em> 文件的第 6 行(server)改为 <em>second</em> 文件的第 5 行(switch).</p></blockquote>]]></content>
    
    <summary type="html">
    
      Unix 系统管理员来经常需要去知道两个文件之间有什么差异. diff 命令就是干这个的. 我现在就准备讲讲 diff. 它是一个经常被用到却不是很被了解的命令. 我希望 Unix 使用者在读完这篇文章之后能够正确了解这个命令的用途并从中获益.
    
    </summary>
    
    
      <category term="translation" scheme="https://fantasylion.github.io/categories/translation/"/>
    
    
      <category term="linux" scheme="https://fantasylion.github.io/tags/linux/"/>
    
  </entry>
  
</feed>
